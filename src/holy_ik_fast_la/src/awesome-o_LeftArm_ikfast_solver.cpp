/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-06-12 08:36:34.344191
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=((0.0707296823218818)*x0);
x7=((0.997495519808809)*x0);
x8=((0.0707296823218818)*x1);
x9=((0.997495519808809)*x1);
eerot[0]=(((x4*(((((-1.0)*x9))+(((-1.0)*x6))))))+((x2*(((((-1.0)*x8))+x7)))));
IkReal x10=((1.0)*x3);
eerot[1]=(((x2*(((((-1.0)*x10*x9))+(((-1.0)*x10*x6))))))+((x4*(((((-1.0)*x10*x7))+((x3*x8)))))));
eerot[2]=(((x2*((((x5*x6))+((x5*x9))))))+((x4*((((x5*x7))+(((-1.0)*x5*x8)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x23000004; }

class IKSolver {
public:
IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij8[0] = -1; _ij8[1] = -1; _nj8 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j8=pfree[0]; cj8=cos(pfree[0]); sj8=sin(pfree[0]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
r00 = new_r00; r01 = new_r01; r02 = new_r02; {
IkReal j6eval[1];
j6eval[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
j7eval[0]=((sj8*sj8)+(cj8*cj8));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6, j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x11=((((0.0707296823218818)*sj8))+(((-0.997495519808809)*cj8)));
IkReal x12=((((0.0707296823218818)*cj8))+(((0.997495519808809)*sj8)));
CheckValue<IkReal> x15 = IKatan2WithCheck(IkReal(x11),x12,IKFAST_ATAN2_MAGTHRESH);
if(!x15.valid){
continue;
}
IkReal x13=((1.0)*(x15.value));
if((((x12*x12)+(x11*x11))) < -0.00001)
continue;
CheckValue<IkReal> x16=IKPowWithIntegerCheck(IKabs(IKsqrt(((x12*x12)+(x11*x11)))),-1);
if(!x16.valid){
continue;
}
if( ((r02*(x16.value))) < -1-IKFAST_SINCOS_THRESH || ((r02*(x16.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x14=IKasin((r02*(x16.value)));
j7array[0]=((((-1.0)*x13))+x14);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x13))+(((-1.0)*x14)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j6eval[3];
IkReal x17=(cj8*sj7);
IkReal x18=(sj7*sj8);
IkReal x19=(cj7*cj8);
IkReal x20=(cj7*sj8);
j6eval[0]=((((-1.0)*x18))+x19+(((14.1029266223667)*x20))+(((14.1029266223667)*x17)));
j6eval[1]=IKsign(((((0.0707296823218818)*x19))+(((0.997495519808809)*x20))+(((0.997495519808809)*x17))+(((-0.0707296823218818)*x18))));
j6eval[2]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x21=((707303176.795451)*sj8);
IkReal x22=((9975044802.11314)*cj8);
IkReal x23=((10000089829.0)*cj7*r02);
IkReal x24=(((sj7*(r00*r00)))+((sj7*(r01*r01))));
j6eval[0]=x24;
j6eval[1]=((IKabs(((((-1.0)*r00*x21))+((r00*x23))+((r00*x22)))))+(IKabs(((((-1.0)*r01*x22))+(((-1.0)*r01*x23))+((r01*x21))))));
j6eval[2]=IKsign(x24);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x25=((9975044802.11314)*sj8);
IkReal x26=((707303176.795451)*cj8);
IkReal x27=((10000089829.0)*r02*sj7);
IkReal x28=(((cj7*(r01*r01)))+((cj7*(r00*r00))));
j6eval[0]=x28;
j6eval[1]=((IKabs(((((-1.0)*r01*x26))+(((-1.0)*r01*x25))+((r01*x27)))))+(IKabs(((((-1.0)*r00*x27))+((r00*x25))+((r00*x26))))));
j6eval[2]=IKsign(x28);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x29=((((-1.0)*r02))+(((0.997495519808809)*sj8))+(((0.0707296823218817)*cj8)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=x29;
evalcond[2]=x29;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j6eval[0]=((((-1.0)*sj8))+(((14.1029266223667)*cj8)));
j6eval[1]=((IKabs(r01))+(IKabs(r00)));
j6eval[2]=IKsign(((((-0.0707296823218818)*sj8))+(((0.997495519808809)*cj8))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x30=((707303176.795451)*sj8);
IkReal x31=((9975044802.11314)*cj8);
IkReal x32=((r00*r00)+(r01*r01));
j6eval[0]=x32;
j6eval[1]=((IKabs(((((-1.0)*r00*x30))+((r00*x31)))))+(IKabs(((((-1.0)*r01*x31))+((r01*x30))))));
j6eval[2]=IKsign(x32);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x33=((0.0707296823218817)*sj8);
IkReal x34=((0.997495519808809)*cj8);
IkReal x35=x29;
evalcond[0]=((r00*r00)+(r01*r01));
evalcond[1]=0;
evalcond[2]=((((-1.0)*x33))+x34);
evalcond[3]=x35;
evalcond[4]=x35;
evalcond[5]=((((-1.0)*x34))+x33);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
j6eval[0]=IKabs(((((-1.0)*sj8))+(((14.1029266223667)*cj8))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x36=((14.1029266223667)*cj8);
op[0]=((((-1.0)*sj8))+x36);
op[1]=0;
op[2]=(sj8+(((-1.0)*x36)));
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x37=((-1.00000000002649)+(((-1.0)*r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.64158511536262)+j8)))), 6.28318530717959)));
evalcond[1]=x37;
evalcond[2]=x37;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((429260169.745842)*r00))+IKsqr(((-429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((429260169.745842)*r00), ((-429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x38=IKsin(j6);
IkReal x39=IKcos(j6);
IkReal x40=((1.0)*r00);
IkReal x41=((1.0)*r01);
evalcond[0]=((((-1.0)*x40))+(((2.32958953678857e-9)*x38)));
evalcond[1]=((((-2.32958953678857e-9)*x39))+(((-1.0)*x41)));
evalcond[2]=((((-1.0)*x38*x41))+(((-1.0)*x39*x40)));
evalcond[3]=((2.32958953678857e-9)+(((-1.0)*x38*x40))+((r01*x39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x42=((1.00000000002649)+(((-1.0)*r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.50000753822717)+j8)))), 6.28318530717959)));
evalcond[1]=x42;
evalcond[2]=x42;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-429260169.745842)*r00))+IKsqr(((429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-429260169.745842)*r00), ((429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x43=IKsin(j6);
IkReal x44=IKcos(j6);
IkReal x45=((1.0)*r00);
IkReal x46=((1.0)*r01);
evalcond[0]=((((-2.32958953678857e-9)*x43))+(((-1.0)*x45)));
evalcond[1]=((((-1.0)*x46))+(((2.32958953678857e-9)*x44)));
evalcond[2]=((((-1.0)*x43*x46))+(((-1.0)*x44*x45)));
evalcond[3]=((-2.32958953678857e-9)+((r01*x44))+(((-1.0)*x43*x45)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x47=((0.997495519808809)*cj8);
IkReal x48=((0.0707296823218818)*sj8);
CheckValue<IkReal> x49=IKPowWithIntegerCheck(IKsign(((r00*r00)+(r01*r01))),-1);
if(!x49.valid){
continue;
}
CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x48))+((r00*x47)))),((((-1.0)*r01*x47))+((r01*x48))),IKFAST_ATAN2_MAGTHRESH);
if(!x50.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x49.value)))+(x50.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x51=IKsin(j6);
IkReal x52=IKcos(j6);
IkReal x53=((0.997495519808809)*cj8);
IkReal x54=((0.0707296823218818)*sj8);
IkReal x55=((1.0)*r00);
IkReal x56=((1.0)*r01);
evalcond[0]=((((-1.0)*x52*x55))+(((-1.0)*x51*x56)));
evalcond[1]=((((-1.0)*x51*x54))+((x51*x53))+(((-1.0)*x55)));
evalcond[2]=((((-1.0)*x52*x53))+((x52*x54))+(((-1.0)*x56)));
evalcond[3]=((((-1.0)*x51*x55))+((r01*x52))+x53+(((-1.0)*x54)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x57 = IKatan2WithCheck(IkReal(r00),((-1.0)*r01),IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
CheckValue<IkReal> x58=IKPowWithIntegerCheck(IKsign(((((-0.0707296823218818)*sj8))+(((0.997495519808809)*cj8)))),-1);
if(!x58.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x57.value)+(((1.5707963267949)*(x58.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x59=IKsin(j6);
IkReal x60=IKcos(j6);
IkReal x61=((0.997495519808809)*cj8);
IkReal x62=((0.0707296823218818)*sj8);
IkReal x63=((1.0)*r00);
IkReal x64=((1.0)*r01);
evalcond[0]=((((-1.0)*x59*x64))+(((-1.0)*x60*x63)));
evalcond[1]=(((x59*x61))+(((-1.0)*x59*x62))+(((-1.0)*x63)));
evalcond[2]=(((x60*x62))+(((-1.0)*x64))+(((-1.0)*x60*x61)));
evalcond[3]=((((-1.0)*x59*x63))+((r01*x60))+x61+(((-1.0)*x62)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x65=((0.997495519808809)*sj8);
IkReal x66=((0.0707296823218817)*cj8);
IkReal x67=(x65+x66);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=(x67+r02);
evalcond[2]=((((-1.0)*r02))+(((-1.0)*x67)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j6eval[0]=((((-14.1029266223667)*cj8))+sj8);
j6eval[1]=((IKabs(r01))+(IKabs(r00)));
j6eval[2]=IKsign(((((0.0707296823218818)*sj8))+(((-0.997495519808809)*cj8))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x68=((707303176.795451)*sj8);
IkReal x69=((9975044802.11314)*cj8);
IkReal x70=((((-1.0)*(r00*r00)))+(((-1.0)*(r01*r01))));
j6eval[0]=x70;
j6eval[1]=((IKabs((((r00*x69))+(((-1.0)*r00*x68)))))+(IKabs((((r01*x68))+(((-1.0)*r01*x69))))));
j6eval[2]=IKsign(x70);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.50000753822717)+j8)))), 6.28318530717959)));
evalcond[1]=((1.00000000002649)+r02);
evalcond[2]=((-1.00000000002649)+(((-1.0)*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((429260169.745842)*r00))+IKsqr(((-429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((429260169.745842)*r00), ((-429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x71=IKsin(j6);
IkReal x72=IKcos(j6);
IkReal x73=((1.0)*r01);
IkReal x74=((1.0)*x72);
evalcond[0]=((((-1.0)*r00))+(((2.32958953678857e-9)*x71)));
evalcond[1]=((((-1.0)*x73))+(((-2.32958953678857e-9)*x72)));
evalcond[2]=((((-1.0)*r00*x74))+(((-1.0)*x71*x73)));
evalcond[3]=((-2.32958953678857e-9)+(((-1.0)*x72*x73))+((r00*x71)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-4.64160019181696)+j8)))), 6.28318530717959)));
evalcond[1]=((-1.00000000002649)+r02);
evalcond[2]=((1.00000000002649)+(((-1.0)*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-429260169.745842)*r00))+IKsqr(((429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-429260169.745842)*r00), ((429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x75=IKsin(j6);
IkReal x76=IKcos(j6);
IkReal x77=((1.0)*r01);
IkReal x78=((1.0)*x76);
evalcond[0]=((((-1.0)*r00))+(((-2.32958953678857e-9)*x75)));
evalcond[1]=((((-1.0)*x77))+(((2.32958953678857e-9)*x76)));
evalcond[2]=((((-1.0)*r00*x78))+(((-1.0)*x75*x77)));
evalcond[3]=((2.32958953678857e-9)+(((-1.0)*x76*x77))+((r00*x75)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x79=((0.0707296823218818)*sj8);
IkReal x80=((0.997495519808809)*cj8);
CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal((((r00*x80))+(((-1.0)*r00*x79)))),(((r01*x79))+(((-1.0)*r01*x80))),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
CheckValue<IkReal> x82=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r00*r00)))+(((-1.0)*(r01*r01))))),-1);
if(!x82.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x81.value)+(((1.5707963267949)*(x82.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x83=IKsin(j6);
IkReal x84=IKcos(j6);
IkReal x85=((0.997495519808809)*cj8);
IkReal x86=((0.0707296823218818)*sj8);
IkReal x87=((1.0)*r01);
IkReal x88=((1.0)*x84);
evalcond[0]=((((-1.0)*x83*x87))+(((-1.0)*r00*x88)));
evalcond[1]=((((-1.0)*x83*x85))+(((-1.0)*r00))+((x83*x86)));
evalcond[2]=(((x84*x85))+(((-1.0)*x84*x86))+(((-1.0)*x87)));
evalcond[3]=(((r00*x83))+x85+(((-1.0)*x84*x87))+(((-1.0)*x86)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x89 = IKatan2WithCheck(IkReal(r00),((-1.0)*r01),IKFAST_ATAN2_MAGTHRESH);
if(!x89.valid){
continue;
}
CheckValue<IkReal> x90=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*sj8))+(((-0.997495519808809)*cj8)))),-1);
if(!x90.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x89.value)+(((1.5707963267949)*(x90.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x91=IKsin(j6);
IkReal x92=IKcos(j6);
IkReal x93=((0.997495519808809)*cj8);
IkReal x94=((0.0707296823218818)*sj8);
IkReal x95=((1.0)*r01);
IkReal x96=((1.0)*x92);
evalcond[0]=((((-1.0)*x91*x95))+(((-1.0)*r00*x96)));
evalcond[1]=((((-1.0)*r00))+(((-1.0)*x91*x93))+((x91*x94)));
evalcond[2]=(((x92*x93))+(((-1.0)*x92*x94))+(((-1.0)*x95)));
evalcond[3]=(((r00*x91))+x93+(((-1.0)*x92*x95))+(((-1.0)*x94)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x97=((0.0707296823218817)*sj8);
IkReal x98=((0.997495519808809)*cj8);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=(x98+r02+(((-1.0)*x97)));
evalcond[2]=((((-1.0)*r02))+x97+(((-1.0)*x98)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=0;
cj7=1.0;
j7=0;
j6eval[0]=(cj8+(((14.1029266223667)*sj8)));
j6eval[1]=IKsign(((((0.0707296823218818)*cj8))+(((0.997495519808809)*sj8))));
j6eval[2]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x99=((707303176.795451)*cj8);
IkReal x100=((9975044802.11314)*sj8);
IkReal x101=((r00*r00)+(r01*r01));
j6eval[0]=x101;
j6eval[1]=((IKabs(((((-1.0)*r01*x100))+(((-1.0)*r01*x99)))))+(IKabs((((r00*x99))+((r00*x100))))));
j6eval[2]=IKsign(x101);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x102=((0.0707296823218817)*sj8);
IkReal x103=((0.997495519808809)*cj8);
IkReal x104=((((0.997495519808809)*sj8))+(((0.0707296823218817)*cj8)));
evalcond[0]=((r00*r00)+(r01*r01));
evalcond[1]=0;
evalcond[2]=((((-1.0)*x102))+x103+r02);
evalcond[3]=x104;
evalcond[4]=((((-1.0)*r02))+(((-1.0)*x103))+x102);
evalcond[5]=((-1.0)*x104);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=0;
cj7=1.0;
j7=0;
r00=0;
r01=0;
j6eval[0]=IKabs((cj8+(((14.1029266223667)*sj8))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x105=((14.1029266223667)*sj8);
op[0]=(cj8+x105);
op[1]=0;
op[2]=((((-1.0)*x105))+(((-1.0)*cj8)));
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0707887885677252)+j8)))), 6.28318530717959)));
evalcond[1]=((1.00000000002649)+r02);
evalcond[2]=((-1.00000000002649)+(((-1.0)*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((429260169.745842)*r00))+IKsqr(((-429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((429260169.745842)*r00), ((-429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x106=IKsin(j6);
IkReal x107=IKcos(j6);
IkReal x108=((1.0)*r00);
IkReal x109=((1.0)*r01);
evalcond[0]=((((-1.0)*x108))+(((2.32958953678857e-9)*x106)));
evalcond[1]=((((-2.32958953678857e-9)*x107))+(((-1.0)*x109)));
evalcond[2]=((((-1.0)*x107*x108))+(((-1.0)*x106*x109)));
evalcond[3]=((2.32958953678857e-9)+(((-1.0)*x106*x108))+((r01*x107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.07080386502207)+j8)))), 6.28318530717959)));
evalcond[1]=((-1.00000000002649)+r02);
evalcond[2]=((1.00000000002649)+(((-1.0)*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-429260169.745842)*r00))+IKsqr(((429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-429260169.745842)*r00), ((429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x110=IKsin(j6);
IkReal x111=IKcos(j6);
IkReal x112=((1.0)*r00);
IkReal x113=((1.0)*r01);
evalcond[0]=((((-2.32958953678857e-9)*x110))+(((-1.0)*x112)));
evalcond[1]=((((2.32958953678857e-9)*x111))+(((-1.0)*x113)));
evalcond[2]=((((-1.0)*x111*x112))+(((-1.0)*x110*x113)));
evalcond[3]=((-2.32958953678857e-9)+(((-1.0)*x110*x112))+((r01*x111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x114=((0.0707296823218818)*cj8);
IkReal x115=((0.997495519808809)*sj8);
CheckValue<IkReal> x116=IKPowWithIntegerCheck(IKsign(((r00*r00)+(r01*r01))),-1);
if(!x116.valid){
continue;
}
CheckValue<IkReal> x117 = IKatan2WithCheck(IkReal((((r00*x115))+((r00*x114)))),((((-1.0)*r01*x114))+(((-1.0)*r01*x115))),IKFAST_ATAN2_MAGTHRESH);
if(!x117.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x116.value)))+(x117.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x118=IKsin(j6);
IkReal x119=IKcos(j6);
IkReal x120=((1.0)*r00);
IkReal x121=((0.0707296823218818)*cj8);
IkReal x122=((1.0)*r01);
IkReal x123=((0.997495519808809)*sj8);
evalcond[0]=((((-1.0)*x119*x120))+(((-1.0)*x118*x122)));
evalcond[1]=((((-1.0)*x120))+((x118*x121))+((x118*x123)));
evalcond[2]=((((-1.0)*x119*x121))+(((-1.0)*x119*x123))+(((-1.0)*x122)));
evalcond[3]=((((-1.0)*x118*x120))+x123+x121+((r01*x119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(r00),((-1.0)*r01),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
CheckValue<IkReal> x125=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*cj8))+(((0.997495519808809)*sj8)))),-1);
if(!x125.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x124.value)+(((1.5707963267949)*(x125.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x126=IKsin(j6);
IkReal x127=IKcos(j6);
IkReal x128=((1.0)*r00);
IkReal x129=((0.0707296823218818)*cj8);
IkReal x130=((1.0)*r01);
IkReal x131=((0.997495519808809)*sj8);
evalcond[0]=((((-1.0)*x126*x130))+(((-1.0)*x127*x128)));
evalcond[1]=((((-1.0)*x128))+((x126*x131))+((x126*x129)));
evalcond[2]=((((-1.0)*x130))+(((-1.0)*x127*x129))+(((-1.0)*x127*x131)));
evalcond[3]=((((-1.0)*x126*x128))+((r01*x127))+x131+x129);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x132=((((-0.0707296823218817)*sj8))+(((-1.0)*r02))+(((0.997495519808809)*cj8)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=x132;
evalcond[2]=x132;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j6eval[0]=((((-1.0)*cj8))+(((-14.1029266223667)*sj8)));
j6eval[1]=IKsign(((((-0.0707296823218818)*cj8))+(((-0.997495519808809)*sj8))));
j6eval[2]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x133=((9975044802.11314)*sj8);
IkReal x134=((707303176.795451)*cj8);
IkReal x135=((((-1.0)*(r00*r00)))+(((-1.0)*(r01*r01))));
j6eval[0]=x135;
j6eval[1]=((IKabs((((r00*x133))+((r00*x134)))))+(IKabs(((((-1.0)*r01*x134))+(((-1.0)*r01*x133))))));
j6eval[2]=IKsign(x135);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x136=((-1.00000000002649)+(((-1.0)*r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.07080386502207)+j8)))), 6.28318530717959)));
evalcond[1]=x136;
evalcond[2]=x136;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((429260169.745842)*r00))+IKsqr(((-429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((429260169.745842)*r00), ((-429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x137=IKsin(j6);
IkReal x138=IKcos(j6);
IkReal x139=((1.0)*r01);
IkReal x140=((1.0)*x138);
evalcond[0]=((((-1.0)*r00))+(((2.32958953678857e-9)*x137)));
evalcond[1]=((((-2.32958953678857e-9)*x138))+(((-1.0)*x139)));
evalcond[2]=((((-1.0)*x137*x139))+(((-1.0)*r00*x140)));
evalcond[3]=((-2.32958953678857e-9)+(((-1.0)*x138*x139))+((r00*x137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x141=((1.00000000002649)+(((-1.0)*r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.21239651861186)+j8)))), 6.28318530717959)));
evalcond[1]=x141;
evalcond[2]=x141;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-429260169.745842)*r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((429260169.745842)*r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-429260169.745842)*r00))+IKsqr(((429260169.745842)*r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-429260169.745842)*r00), ((429260169.745842)*r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x142=IKsin(j6);
IkReal x143=IKcos(j6);
IkReal x144=((1.0)*r01);
IkReal x145=((1.0)*x143);
evalcond[0]=((((-1.0)*r00))+(((-2.32958953678857e-9)*x142)));
evalcond[1]=((((-1.0)*x144))+(((2.32958953678857e-9)*x143)));
evalcond[2]=((((-1.0)*x142*x144))+(((-1.0)*r00*x145)));
evalcond[3]=((2.32958953678857e-9)+(((-1.0)*x143*x144))+((r00*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x146=((0.997495519808809)*sj8);
IkReal x147=((0.0707296823218818)*cj8);
CheckValue<IkReal> x148=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r00*r00)))+(((-1.0)*(r01*r01))))),-1);
if(!x148.valid){
continue;
}
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal((((r00*x147))+((r00*x146)))),((((-1.0)*r01*x146))+(((-1.0)*r01*x147))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x148.value)))+(x149.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x150=IKsin(j6);
IkReal x151=IKcos(j6);
IkReal x152=((0.0707296823218818)*cj8);
IkReal x153=((1.0)*r01);
IkReal x154=((0.997495519808809)*sj8);
IkReal x155=((1.0)*x151);
evalcond[0]=((((-1.0)*x150*x153))+(((-1.0)*r00*x155)));
evalcond[1]=((((-1.0)*r00))+(((-1.0)*x150*x154))+(((-1.0)*x150*x152)));
evalcond[2]=((((-1.0)*x153))+((x151*x152))+((x151*x154)));
evalcond[3]=((((-1.0)*x151*x153))+((r00*x150))+x154+x152);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(r00),((-1.0)*r01),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
CheckValue<IkReal> x157=IKPowWithIntegerCheck(IKsign(((((-0.0707296823218818)*cj8))+(((-0.997495519808809)*sj8)))),-1);
if(!x157.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x156.value)+(((1.5707963267949)*(x157.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x158=IKsin(j6);
IkReal x159=IKcos(j6);
IkReal x160=((0.0707296823218818)*cj8);
IkReal x161=((1.0)*r01);
IkReal x162=((0.997495519808809)*sj8);
IkReal x163=((1.0)*x159);
evalcond[0]=((((-1.0)*x158*x161))+(((-1.0)*r00*x163)));
evalcond[1]=((((-1.0)*x158*x160))+(((-1.0)*x158*x162))+(((-1.0)*r00)));
evalcond[2]=((((-1.0)*x161))+((x159*x160))+((x159*x162)));
evalcond[3]=((((-1.0)*x159*x161))+((r00*x158))+x162+x160);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x164=((0.997495519808809)*sj8);
IkReal x165=(r02*sj7);
IkReal x166=((0.0707296823218818)*cj8);
CheckValue<IkReal> x167 = IKatan2WithCheck(IkReal((((r00*x164))+((r00*x166))+(((-1.0)*r00*x165)))),(((r01*x165))+(((-1.0)*r01*x166))+(((-1.0)*r01*x164))),IKFAST_ATAN2_MAGTHRESH);
if(!x167.valid){
continue;
}
CheckValue<IkReal> x168=IKPowWithIntegerCheck(IKsign((((cj7*(r01*r01)))+((cj7*(r00*r00))))),-1);
if(!x168.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x167.value)+(((1.5707963267949)*(x168.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x169=IKcos(j6);
IkReal x170=IKsin(j6);
IkReal x171=((1.0)*r01);
IkReal x172=(cj7*cj8);
IkReal x173=((0.997495519808809)*cj8);
IkReal x174=((1.0)*r00);
IkReal x175=((1.0)*x170);
IkReal x176=((0.997495519808809)*cj7*sj8);
IkReal x177=((0.0707296823218818)*x170);
IkReal x178=((0.0707296823218818)*sj7*sj8);
IkReal x179=(r01*x169);
evalcond[0]=((((-1.0)*x170*x171))+(((-1.0)*x169*x174)));
evalcond[1]=((((-0.0707296823218818)*sj8))+(((-1.0)*sj7*x170*x174))+x173+((sj7*x179))+((cj7*r02)));
evalcond[2]=((((0.0707296823218818)*cj8))+((cj7*x179))+(((0.997495519808809)*sj8))+(((-1.0)*r02*sj7))+(((-1.0)*cj7*x170*x174)));
evalcond[3]=((((-0.0707296823218818)*x172))+((r00*x170))+(((-1.0)*x176))+x178+(((-1.0)*sj7*x173))+(((-1.0)*x169*x171)));
evalcond[4]=((((-1.0)*x174))+((sj7*x170*x173))+((x172*x177))+((x170*x176))+(((-1.0)*sj7*sj8*x177)));
evalcond[5]=((((-1.0)*x171))+((x169*x178))+(((-1.0)*sj7*x169*x173))+(((-1.0)*x169*x176))+(((-0.0707296823218818)*x169*x172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x180=((0.0707296823218818)*sj8);
IkReal x181=(cj7*r02);
IkReal x182=((0.997495519808809)*cj8);
CheckValue<IkReal> x183 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x180))+((r00*x182))+((r00*x181)))),((((-1.0)*r01*x182))+((r01*x180))+(((-1.0)*r01*x181))),IKFAST_ATAN2_MAGTHRESH);
if(!x183.valid){
continue;
}
CheckValue<IkReal> x184=IKPowWithIntegerCheck(IKsign((((sj7*(r00*r00)))+((sj7*(r01*r01))))),-1);
if(!x184.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x183.value)+(((1.5707963267949)*(x184.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x185=IKcos(j6);
IkReal x186=IKsin(j6);
IkReal x187=((1.0)*r01);
IkReal x188=(cj7*cj8);
IkReal x189=((0.997495519808809)*cj8);
IkReal x190=((1.0)*r00);
IkReal x191=((1.0)*x186);
IkReal x192=((0.997495519808809)*cj7*sj8);
IkReal x193=((0.0707296823218818)*x186);
IkReal x194=((0.0707296823218818)*sj7*sj8);
IkReal x195=(r01*x185);
evalcond[0]=((((-1.0)*x186*x187))+(((-1.0)*x185*x190)));
evalcond[1]=((((-0.0707296823218818)*sj8))+x189+((sj7*x195))+(((-1.0)*sj7*x186*x190))+((cj7*r02)));
evalcond[2]=((((0.0707296823218818)*cj8))+((cj7*x195))+(((0.997495519808809)*sj8))+(((-1.0)*r02*sj7))+(((-1.0)*cj7*x186*x190)));
evalcond[3]=((((-0.0707296823218818)*x188))+((r00*x186))+(((-1.0)*x192))+(((-1.0)*sj7*x189))+x194+(((-1.0)*x185*x187)));
evalcond[4]=(((x186*x192))+(((-1.0)*sj7*sj8*x193))+((sj7*x186*x189))+((x188*x193))+(((-1.0)*x190)));
evalcond[5]=((((-1.0)*x187))+(((-1.0)*sj7*x185*x189))+((x185*x194))+(((-1.0)*x185*x192))+(((-0.0707296823218818)*x185*x188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x196 = IKatan2WithCheck(IkReal(r00),((-1.0)*r01),IKFAST_ATAN2_MAGTHRESH);
if(!x196.valid){
continue;
}
CheckValue<IkReal> x197=IKPowWithIntegerCheck(IKsign(((((-0.0707296823218818)*sj7*sj8))+(((0.997495519808809)*cj7*sj8))+(((0.997495519808809)*cj8*sj7))+(((0.0707296823218818)*cj7*cj8)))),-1);
if(!x197.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x196.value)+(((1.5707963267949)*(x197.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x198=IKcos(j6);
IkReal x199=IKsin(j6);
IkReal x200=((1.0)*r01);
IkReal x201=(cj7*cj8);
IkReal x202=((0.997495519808809)*cj8);
IkReal x203=((1.0)*r00);
IkReal x204=((1.0)*x199);
IkReal x205=((0.997495519808809)*cj7*sj8);
IkReal x206=((0.0707296823218818)*x199);
IkReal x207=((0.0707296823218818)*sj7*sj8);
IkReal x208=(r01*x198);
evalcond[0]=((((-1.0)*x198*x203))+(((-1.0)*x199*x200)));
evalcond[1]=((((-0.0707296823218818)*sj8))+(((-1.0)*sj7*x199*x203))+x202+((cj7*r02))+((sj7*x208)));
evalcond[2]=((((0.0707296823218818)*cj8))+(((-1.0)*cj7*x199*x203))+(((0.997495519808809)*sj8))+(((-1.0)*r02*sj7))+((cj7*x208)));
evalcond[3]=(((r00*x199))+(((-0.0707296823218818)*x201))+(((-1.0)*sj7*x202))+(((-1.0)*x205))+x207+(((-1.0)*x198*x200)));
evalcond[4]=(((x201*x206))+(((-1.0)*sj7*sj8*x206))+(((-1.0)*x203))+((sj7*x199*x202))+((x199*x205)));
evalcond[5]=(((x198*x207))+(((-0.0707296823218818)*x198*x201))+(((-1.0)*x200))+(((-1.0)*sj7*x198*x202))+(((-1.0)*x198*x205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(((-1.0)*r00)),((-1.0)*r01),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
IkReal x209=x210.value;
j6array[0]=((-1.0)*x209);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x209)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j7eval[3];
IkReal x211=cj8*cj8;
IkReal x212=(cj8*r02);
IkReal x213=(cj6*r01);
IkReal x214=((0.0707296823218818)*sj8);
IkReal x215=(r02*sj8);
IkReal x216=(cj8*sj8);
IkReal x217=(r00*sj6);
IkReal x218=((0.997495519808809)*cj8);
IkReal x219=((14.1029266223667)*cj8);
j7eval[0]=((((14.1029266223667)*x215))+((x213*x219))+x212+(((-1.0)*x217*x219))+(((-1.0)*sj8*x213))+((sj8*x217)));
j7eval[1]=IKsign(((((0.0707296823218818)*x212))+((x214*x217))+((x213*x218))+(((0.997495519808809)*x215))+(((-1.0)*x217*x218))+(((-1.0)*x213*x214))));
j7eval[2]=((IKabs(((0.0705525412335773)+(((-1.0)*r02*x213))+((r02*x217))+(((-0.989994624077291)*x216))+(((-0.141105082467155)*x211)))))+(IKabs(((-0.00500268796135431)+(((-0.989994624077291)*x211))+(((0.141105082467155)*x216))+(r02*r02)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x220=cj8*cj8;
IkReal x221=(cj8*sj8);
IkReal x222=(r00*sj6);
IkReal x223=((0.0707296823218818)*cj8);
IkReal x224=(cj8*r02);
IkReal x225=((14.1029266223667)*sj8);
IkReal x226=(cj6*r01);
IkReal x227=((0.997495519808809)*sj8);
IkReal x228=(r02*sj8);
j7eval[0]=(((cj8*x226))+((x225*x226))+(((-1.0)*cj8*x222))+(((-14.1029266223667)*x224))+(((-1.0)*x222*x225))+x228);
j7eval[1]=IKsign(((((-0.997495519808809)*x224))+(((0.0707296823218818)*x228))+(((-1.0)*x222*x223))+(((-1.0)*x222*x227))+((x223*x226))+((x226*x227))));
j7eval[2]=((IKabs(((-0.994997312038646)+(((-0.141105082467155)*x221))+(r02*r02)+(((0.989994624077291)*x220)))))+(IKabs(((0.0705525412335773)+(((-0.989994624077291)*x221))+(((-0.141105082467155)*x220))+(((-1.0)*r02*x222))+((r02*x226))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x229=cj6*cj6;
IkReal x230=cj8*cj8;
IkReal x231=(r00*sj8);
IkReal x232=(cj8*sj6);
IkReal x233=(sj6*sj8);
IkReal x234=(cj6*r01);
IkReal x235=(cj8*r00);
IkReal x236=(sj6*x230);
IkReal x237=((1.0)*x234);
IkReal x238=(x229*x235);
j7eval[0]=((((14.1029266223667)*r02*x232))+x235+(((-14.1029266223667)*x229*x231))+(((-1.0)*r02*x233))+(((14.1029266223667)*x231))+(((-1.0)*x238))+(((-1.0)*x232*x237))+(((-14.1029266223667)*x233*x234)));
j7eval[1]=IKsign(((((-0.0707296823218818)*r02*x233))+(((-0.0707296823218818)*x238))+(((0.0707296823218818)*x235))+(((-0.0707296823218818)*x232*x234))+(((0.997495519808809)*x231))+(((-0.997495519808809)*x233*x234))+(((-0.997495519808809)*x229*x231))+(((0.997495519808809)*r02*x232))));
j7eval[2]=((IKabs((((sj6*(r00*r00)))+(((-0.989994624077291)*x236))+(((-0.00500268796135431)*sj6))+(((0.141105082467155)*sj8*x232))+(((-1.0)*r00*x237)))))+(IKabs(((((-0.0705525412335773)*sj6))+(((0.141105082467155)*x236))+((r00*r02))+(((0.989994624077291)*sj8*x232))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)*r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x239=cj8*cj8;
IkReal x240=(cj8*r01);
IkReal x241=(r01*sj8);
IkReal x242=(cj8*r02);
IkReal x243=(cj8*sj8);
IkReal x244=(r02*sj8);
j7eval[0]=((((-14.1029266223667)*x242))+x240+x244+(((14.1029266223667)*x241)));
j7eval[1]=IKsign(((((0.997495519808809)*x241))+(((-0.997495519808809)*x242))+(((0.0707296823218818)*x244))+(((0.0707296823218818)*x240))));
j7eval[2]=((IKabs(((0.0705525412335773)+(((-0.141105082467155)*x239))+((r01*r02))+(((-0.989994624077291)*x243)))))+(IKabs(((-0.994997312038646)+(((-0.141105082467155)*x243))+(((0.989994624077291)*x239))+(r02*r02)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x245=cj8*cj8;
IkReal x246=(cj8*r02);
IkReal x247=(cj8*sj8);
IkReal x248=(r01*sj8);
IkReal x249=(r02*sj8);
IkReal x250=(cj8*r01);
j7eval[0]=((((-1.0)*x248))+(((14.1029266223667)*x250))+x246+(((14.1029266223667)*x249)));
j7eval[1]=IKsign(((((0.997495519808809)*x249))+(((-0.0707296823218818)*x248))+(((0.0707296823218818)*x246))+(((0.997495519808809)*x250))));
j7eval[2]=((IKabs(((0.0705525412335773)+(((-0.141105082467155)*x245))+(((-1.0)*r01*r02))+(((-0.989994624077291)*x247)))))+(IKabs(((-0.00500268796135431)+(((0.141105082467155)*x247))+(r02*r02)+(((-0.989994624077291)*x245))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x251=cj8*cj8;
IkReal x252=(cj8*r01);
IkReal x253=(r01*sj8);
IkReal x254=(cj8*r02);
IkReal x255=(cj8*sj8);
IkReal x256=(r02*sj8);
j7eval[0]=((((-14.1029266223667)*x254))+(((14.1029266223667)*x253))+x256+x252);
j7eval[1]=IKsign(((((-0.997495519808809)*x254))+(((0.0707296823218818)*x252))+(((0.0707296823218818)*x256))+(((0.997495519808809)*x253))));
j7eval[2]=((IKabs(((0.00500268796135431)+(((0.989994624077291)*x251))+(((-0.141105082467155)*x255))+(((-1.0)*(r01*r01))))))+(IKabs(((0.0705525412335773)+(((-0.989994624077291)*x255))+(((-0.141105082467155)*x251))+((r01*r02))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x257=((((-14.1029266223667)*r02))+r01);
IkReal x258=(r02+(((14.1029266223667)*r01)));
IkReal x260 = ((x258*x258)+(x257*x257));
if(IKabs(x260)==0){
continue;
}
IkReal x259=pow(x260,-0.5);
CheckValue<IkReal> x261 = IKatan2WithCheck(IkReal(x257),x258,IKFAST_ATAN2_MAGTHRESH);
if(!x261.valid){
continue;
}
IkReal gconst0=((-1.0)*(x261.value));
IkReal gconst1=((-1.0)*x257*x259);
IkReal gconst2=(x258*x259);
IkReal x262=j8;
CheckValue<IkReal> x265 = IKatan2WithCheck(IkReal(((((-14.1029266223667)*r02))+r01)),(r02+(((14.1029266223667)*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x265.valid){
continue;
}
IkReal x263=x265.value;
IkReal x264=x263;
if(((((x262*x263))+((x263*x264))+((j8*x262))+((j8*x264)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x262*x263))+((x263*x264))+((j8*x262))+((j8*x264)))))), 6.28318530717959)));
evalcond[1]=((-1.0)*r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x266=((((-14.1029266223667)*r02))+r01);
IkReal x267=(r02+(((14.1029266223667)*r01)));
IkReal x268=x259;
sj6=0;
cj6=1.0;
j6=0;
sj8=gconst1;
cj8=gconst2;
CheckValue<IkReal> x269 = IKatan2WithCheck(IkReal((r01+(((-14.1029262584782)*r02)))),((((14.1029262584782)*r01))+r02),IKFAST_ATAN2_MAGTHRESH);
if(!x269.valid){
continue;
}
j8=((-1.0)*(x269.value));
CheckValue<IkReal> x270 = IKatan2WithCheck(IkReal(x266),x267,IKFAST_ATAN2_MAGTHRESH);
if(!x270.valid){
continue;
}
IkReal gconst0=((-1.0)*(x270.value));
IkReal gconst1=((-1.0)*x266*x268);
IkReal gconst2=(x267*x268);
IkReal x271=((r01*r01)+(r02*r02));
j7eval[0]=x271;
j7eval[1]=IKsign(x271);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x272=((((-14.1029266223667)*r02))+r01);
IkReal x273=(r02+(((14.1029266223667)*r01)));
IkReal x274=x259;
sj6=0;
cj6=1.0;
j6=0;
sj8=gconst1;
cj8=gconst2;
CheckValue<IkReal> x275 = IKatan2WithCheck(IkReal((r01+(((-14.1029262584782)*r02)))),((((14.1029262584782)*r01))+r02),IKFAST_ATAN2_MAGTHRESH);
if(!x275.valid){
continue;
}
j8=((-1.0)*(x275.value));
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(x272),x273,IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
IkReal gconst0=((-1.0)*(x276.value));
IkReal gconst1=((-1.0)*x272*x274);
IkReal gconst2=(x273*x274);
IkReal x277=r01*r01;
IkReal x278=r02*r02;
CheckValue<IkReal> x282=IKPowWithIntegerCheck((x277+x278),-1);
if(!x282.valid){
continue;
}
IkReal x279=x282.value;
IkReal x280=(r02*x279);
IkReal x281=(x278*x279);
j7eval[0]=((IKabs((((r01*x280))+((x280*(r01*r01*r01)))+((r01*x280*(r02*r02))))))+(IKabs((((x279*(x277*x277)))+(((-1.0)*x281))+((x277*x281))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x283=((0.997495519808809)*r02);
IkReal x284=((0.0707296823218818)*gconst1);
IkReal x285=((0.0707296823218818)*gconst2);
IkReal x286=((0.997495519808809)*r01);
CheckValue<IkReal> x287 = IKatan2WithCheck(IkReal((((r01*x284))+((r02*x285))+(((-1.0)*gconst2*x286))+((gconst1*x283)))),(((r02*x284))+(((-1.0)*gconst1*x286))+(((-1.0)*r01*x285))+(((-1.0)*gconst2*x283))),IKFAST_ATAN2_MAGTHRESH);
if(!x287.valid){
continue;
}
CheckValue<IkReal> x288=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x288.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x287.value)+(((1.5707963267949)*(x288.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x289=IKcos(j7);
IkReal x290=IKsin(j7);
IkReal x291=((0.997495519808809)*gconst1);
IkReal x292=((0.997495519808809)*gconst2);
IkReal x293=((0.0707296823218818)*gconst2);
IkReal x294=((0.0707296823218818)*gconst1);
IkReal x295=((1.0)*r02);
IkReal x296=((0.0707296823218818)*x290);
evalcond[0]=((((-1.0)*x294))+((r02*x289))+x292+((r01*x290)));
evalcond[1]=(((r01*x289))+(((-1.0)*x290*x295))+x291+x293);
evalcond[2]=(((x289*x294))+((x290*x291))+((x290*x293))+(((-1.0)*x289*x292))+(((-1.0)*x295)));
evalcond[3]=(((x290*x294))+(((-1.0)*x290*x292))+(((-1.0)*x289*x293))+(((-1.0)*x289*x291))+(((-1.0)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x297=gconst2*gconst2;
IkReal x298=gconst1*gconst1;
IkReal x299=(gconst1*gconst2);
CheckValue<IkReal> x300 = IKatan2WithCheck(IkReal(((((-0.141105082467155)*x299))+(r01*r01)+(((-0.00500268796135431)*x297))+(((-0.994997312038646)*x298)))),((((-0.0705525412335773)*x298))+(((0.0705525412335773)*x297))+((r01*r02))+(((0.989994624077291)*x299))),IKFAST_ATAN2_MAGTHRESH);
if(!x300.valid){
continue;
}
CheckValue<IkReal> x301=IKPowWithIntegerCheck(IKsign(((((-0.997495519808809)*gconst1*r02))+(((-0.0707296823218818)*gconst2*r02))+(((0.0707296823218818)*gconst1*r01))+(((-0.997495519808809)*gconst2*r01)))),-1);
if(!x301.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x300.value)+(((1.5707963267949)*(x301.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x302=IKcos(j7);
IkReal x303=IKsin(j7);
IkReal x304=((0.997495519808809)*gconst1);
IkReal x305=((0.997495519808809)*gconst2);
IkReal x306=((0.0707296823218818)*gconst2);
IkReal x307=((0.0707296823218818)*gconst1);
IkReal x308=((1.0)*r02);
IkReal x309=((0.0707296823218818)*x303);
evalcond[0]=(((r02*x302))+x305+((r01*x303))+(((-1.0)*x307)));
evalcond[1]=((((-1.0)*x303*x308))+x306+x304+((r01*x302)));
evalcond[2]=(((x303*x306))+((x303*x304))+(((-1.0)*x302*x305))+((x302*x307))+(((-1.0)*x308)));
evalcond[3]=((((-1.0)*x303*x305))+(((-1.0)*r01))+((x303*x307))+(((-1.0)*x302*x304))+(((-1.0)*x302*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x310=((0.997495519808809)*r02);
IkReal x311=((0.0707296823218818)*gconst1);
IkReal x312=((0.0707296823218818)*gconst2);
IkReal x313=((0.997495519808809)*r01);
CheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x313))+((r02*x312))+((r01*x311))+((gconst1*x310)))),((((-1.0)*gconst2*x310))+((r02*x311))+(((-1.0)*gconst1*x313))+(((-1.0)*r01*x312))),IKFAST_ATAN2_MAGTHRESH);
if(!x314.valid){
continue;
}
CheckValue<IkReal> x315=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x315.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x314.value)+(((1.5707963267949)*(x315.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x316=IKcos(j7);
IkReal x317=IKsin(j7);
IkReal x318=((0.997495519808809)*gconst1);
IkReal x319=((0.997495519808809)*gconst2);
IkReal x320=((0.0707296823218818)*gconst2);
IkReal x321=((0.0707296823218818)*gconst1);
IkReal x322=((1.0)*r02);
IkReal x323=((0.0707296823218818)*x317);
evalcond[0]=(((r02*x316))+(((-1.0)*x321))+x319+((r01*x317)));
evalcond[1]=((((-1.0)*x317*x322))+x320+x318+((r01*x316)));
evalcond[2]=(((x317*x318))+(((-1.0)*x322))+((x317*x320))+((x316*x321))+(((-1.0)*x316*x319)));
evalcond[3]=((((-1.0)*r01))+(((-1.0)*x316*x320))+((x317*x321))+(((-1.0)*x317*x319))+(((-1.0)*x316*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x324=((((-14.1029266223667)*r02))+r01);
IkReal x325=(r02+(((14.1029266223667)*r01)));
IkReal x327 = ((x325*x325)+(x324*x324));
if(IKabs(x327)==0){
continue;
}
IkReal x326=pow(x327,-0.5);
CheckValue<IkReal> x328 = IKatan2WithCheck(IkReal(x324),x325,IKFAST_ATAN2_MAGTHRESH);
if(!x328.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x328.value))));
IkReal gconst4=((1.0)*x324*x326);
IkReal gconst5=((-1.0)*x325*x326);
IkReal x329=j8;
CheckValue<IkReal> x332 = IKatan2WithCheck(IkReal(((((-14.1029266223667)*r02))+r01)),(r02+(((14.1029266223667)*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x332.valid){
continue;
}
IkReal x330=x332.value;
IkReal x331=x330;
if((((9.86960440108936)+((x330*x331))+(((-3.14159265358979)*x329))+((j8*x331))+(((-3.14159265358979)*x331))+(((-3.14159265358979)*x330))+((x329*x330))+(((-3.14159265358979)*j8))+((j8*x329)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x330*x331))+(((-3.14159265358979)*x329))+((j8*x331))+(((-3.14159265358979)*x331))+(((-3.14159265358979)*x330))+((x329*x330))+(((-3.14159265358979)*j8))+((j8*x329)))))), 6.28318530717959)));
evalcond[1]=((-1.0)*r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x333=((((-14.1029266223667)*r02))+r01);
IkReal x334=(r02+(((14.1029266223667)*r01)));
IkReal x335=x326;
sj6=0;
cj6=1.0;
j6=0;
sj8=gconst4;
cj8=gconst5;
CheckValue<IkReal> x336 = IKatan2WithCheck(IkReal((r01+(((-14.1029262584782)*r02)))),((((14.1029262584782)*r01))+r02),IKFAST_ATAN2_MAGTHRESH);
if(!x336.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x336.value))));
CheckValue<IkReal> x337 = IKatan2WithCheck(IkReal(x333),x334,IKFAST_ATAN2_MAGTHRESH);
if(!x337.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x337.value))));
IkReal gconst4=((1.0)*x333*x335);
IkReal gconst5=((-1.0)*x334*x335);
IkReal x338=((r01*r01)+(r02*r02));
j7eval[0]=x338;
j7eval[1]=IKsign(x338);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x339=gconst5*gconst5;
IkReal x340=gconst4*gconst4;
IkReal x341=(gconst4*gconst5);
CheckValue<IkReal> x342 = IKatan2WithCheck(IkReal(((((0.0705525412335773)*x340))+(((-0.989994624077291)*x341))+(((-0.0705525412335773)*x339))+((r01*r02)))),((((-0.994997312038646)*x340))+(((-0.00500268796135431)*x339))+(r02*r02)+(((-0.141105082467155)*x341))),IKFAST_ATAN2_MAGTHRESH);
if(!x342.valid){
continue;
}
CheckValue<IkReal> x343=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*gconst5*r01))+(((0.997495519808809)*gconst4*r01))+(((0.0707296823218818)*gconst4*r02))+(((-0.997495519808809)*gconst5*r02)))),-1);
if(!x343.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x342.value)+(((1.5707963267949)*(x343.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x344=IKcos(j7);
IkReal x345=IKsin(j7);
IkReal x346=((0.997495519808809)*gconst5);
IkReal x347=((1.0)*r02);
IkReal x348=((0.997495519808809)*gconst4);
IkReal x349=((0.0707296823218818)*x344);
IkReal x350=((0.0707296823218818)*x345);
evalcond[0]=(((r01*x345))+(((-0.0707296823218818)*gconst4))+x346+((r02*x344)));
evalcond[1]=(((r01*x344))+(((0.0707296823218818)*gconst5))+x348+(((-1.0)*x345*x347)));
evalcond[2]=(((x345*x348))+(((-1.0)*x344*x346))+((gconst5*x350))+((gconst4*x349))+(((-1.0)*x347)));
evalcond[3]=((((-1.0)*r01))+(((-1.0)*gconst5*x349))+(((-1.0)*x344*x348))+(((-1.0)*x345*x346))+((gconst4*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x351=(gconst4*r02);
IkReal x352=((0.0707296823218818)*r01);
IkReal x353=(gconst5*r02);
IkReal x354=((0.997495519808809)*r01);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x355.valid){
continue;
}
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(((((0.0707296823218818)*x353))+(((-1.0)*gconst5*x354))+((gconst4*x352))+(((0.997495519808809)*x351)))),((((0.0707296823218818)*x351))+(((-0.997495519808809)*x353))+(((-1.0)*gconst5*x352))+(((-1.0)*gconst4*x354))),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x355.value)))+(x356.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x357=IKcos(j7);
IkReal x358=IKsin(j7);
IkReal x359=((0.997495519808809)*gconst5);
IkReal x360=((1.0)*r02);
IkReal x361=((0.997495519808809)*gconst4);
IkReal x362=((0.0707296823218818)*x357);
IkReal x363=((0.0707296823218818)*x358);
evalcond[0]=((((-0.0707296823218818)*gconst4))+((r01*x358))+x359+((r02*x357)));
evalcond[1]=((((0.0707296823218818)*gconst5))+((r01*x357))+(((-1.0)*x358*x360))+x361);
evalcond[2]=(((x358*x361))+((gconst5*x363))+((gconst4*x362))+(((-1.0)*x357*x359))+(((-1.0)*x360)));
evalcond[3]=(((gconst4*x363))+(((-1.0)*r01))+(((-1.0)*x358*x359))+(((-1.0)*gconst5*x362))+(((-1.0)*x357*x361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x364=((((-1.0)*r01))+(((14.1029266223667)*r02)));
IkReal x365=(r02+(((14.1029266223667)*r01)));
IkReal x367 = ((x365*x365)+(x364*x364));
if(IKabs(x367)==0){
continue;
}
IkReal x366=pow(x367,-0.5);
CheckValue<IkReal> x368 = IKatan2WithCheck(IkReal(x365),x364,IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
IkReal gconst6=((-1.0)*(x368.value));
IkReal gconst7=((-1.0)*x365*x366);
IkReal gconst8=(x364*x366);
IkReal x369=j8;
CheckValue<IkReal> x372 = IKatan2WithCheck(IkReal((r02+(((14.1029266223667)*r01)))),((((-1.0)*r01))+(((14.1029266223667)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x372.valid){
continue;
}
IkReal x370=x372.value;
IkReal x371=x370;
if(((((j8*x369))+((x370*x371))+((j8*x371))+((x369*x370)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j8*x369))+((x370*x371))+((j8*x371))+((x369*x370)))))), 6.28318530717959)));
evalcond[1]=((-1.0)*r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x373=((1.0)*r01);
IkReal x374=((((-1.0)*x373))+(((14.1029266223667)*r02)));
IkReal x375=(r02+(((14.1029266223667)*r01)));
IkReal x377 = ((x374*x374)+(x375*x375));
if(IKabs(x377)==0){
continue;
}
IkReal x376=pow(x377,-0.5);
sj6=0;
cj6=1.0;
j6=0;
sj8=gconst7;
cj8=gconst8;
CheckValue<IkReal> x378 = IKatan2WithCheck(IkReal(((((14.1029262584782)*r01))+r02)),((((14.1029262584782)*r02))+(((-1.0)*x373))),IKFAST_ATAN2_MAGTHRESH);
if(!x378.valid){
continue;
}
j8=((-1.0)*(x378.value));
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal(x375),x374,IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
IkReal gconst6=((-1.0)*(x379.value));
IkReal gconst7=((-1.0)*x375*x376);
IkReal gconst8=(x374*x376);
IkReal x380=((r01*r01)+(r02*r02));
j7eval[0]=x380;
j7eval[1]=IKsign(x380);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x381=((1.0)*r01);
IkReal x382=((((-1.0)*x381))+(((14.1029266223667)*r02)));
IkReal x383=(r02+(((14.1029266223667)*r01)));
IkReal x385 = ((x383*x383)+(x382*x382));
if(IKabs(x385)==0){
continue;
}
IkReal x384=pow(x385,-0.5);
sj6=0;
cj6=1.0;
j6=0;
sj8=gconst7;
cj8=gconst8;
CheckValue<IkReal> x386 = IKatan2WithCheck(IkReal(((((14.1029262584782)*r01))+r02)),((((14.1029262584782)*r02))+(((-1.0)*x381))),IKFAST_ATAN2_MAGTHRESH);
if(!x386.valid){
continue;
}
j8=((-1.0)*(x386.value));
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal(x383),x382,IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
IkReal gconst6=((-1.0)*(x387.value));
IkReal gconst7=((-1.0)*x383*x384);
IkReal gconst8=(x382*x384);
IkReal x388=r01*r01;
IkReal x389=r02*r02;
CheckValue<IkReal> x393=IKPowWithIntegerCheck((x388+x389),-1);
if(!x393.valid){
continue;
}
IkReal x390=x393.value;
IkReal x391=(r02*x390);
IkReal x392=(x388*x390);
j7eval[0]=((IKabs((((x391*(r01*r01*r01)))+((r01*x391))+((r01*x391*(r02*r02))))))+(IKabs(((((-1.0)*x392))+((x389*x392))+((x390*(x389*x389)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x394=((0.997495519808809)*r01);
IkReal x395=((0.0707296823218818)*r02);
IkReal x396=((0.997495519808809)*r02);
IkReal x397=((0.0707296823218818)*r01);
CheckValue<IkReal> x398=IKPowWithIntegerCheck(IKsign(((gconst7*gconst7)+(gconst8*gconst8))),-1);
if(!x398.valid){
continue;
}
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal((((gconst7*x397))+((gconst7*x396))+(((-1.0)*gconst8*x394))+((gconst8*x395)))),((((-1.0)*gconst7*x394))+((gconst7*x395))+(((-1.0)*gconst8*x396))+(((-1.0)*gconst8*x397))),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x398.value)))+(x399.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x400=IKcos(j7);
IkReal x401=IKsin(j7);
IkReal x402=((0.997495519808809)*gconst8);
IkReal x403=((0.0707296823218818)*gconst8);
IkReal x404=((0.0707296823218818)*gconst7);
IkReal x405=((1.0)*r02);
IkReal x406=((0.997495519808809)*gconst7);
evalcond[0]=(((r01*x401))+x402+(((-1.0)*x404))+((r02*x400)));
evalcond[1]=((((-1.0)*x401*x405))+((r01*x400))+x403+x406);
evalcond[2]=((((-1.0)*x400*x402))+((x400*x404))+(((-1.0)*x405))+((x401*x406))+((x401*x403)));
evalcond[3]=((((-1.0)*r01))+(((-1.0)*x401*x402))+(((-1.0)*x400*x403))+(((-1.0)*x400*x406))+((x401*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x407=gconst8*gconst8;
IkReal x408=gconst7*gconst7;
IkReal x409=(gconst7*gconst8);
CheckValue<IkReal> x410 = IKatan2WithCheck(IkReal(((((-0.0705525412335773)*x407))+(((-0.989994624077291)*x409))+((r01*r02))+(((0.0705525412335773)*x408)))),((((-0.00500268796135431)*x407))+(r02*r02)+(((-0.141105082467155)*x409))+(((-0.994997312038646)*x408))),IKFAST_ATAN2_MAGTHRESH);
if(!x410.valid){
continue;
}
CheckValue<IkReal> x411=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*gconst8*r01))+(((0.0707296823218818)*gconst7*r02))+(((0.997495519808809)*gconst7*r01))+(((-0.997495519808809)*gconst8*r02)))),-1);
if(!x411.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x410.value)+(((1.5707963267949)*(x411.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x412=IKcos(j7);
IkReal x413=IKsin(j7);
IkReal x414=((0.997495519808809)*gconst8);
IkReal x415=((0.0707296823218818)*gconst8);
IkReal x416=((0.0707296823218818)*gconst7);
IkReal x417=((1.0)*r02);
IkReal x418=((0.997495519808809)*gconst7);
evalcond[0]=(((r01*x413))+x414+(((-1.0)*x416))+((r02*x412)));
evalcond[1]=(((r01*x412))+x415+x418+(((-1.0)*x413*x417)));
evalcond[2]=((((-1.0)*x412*x414))+((x413*x415))+((x413*x418))+((x412*x416))+(((-1.0)*x417)));
evalcond[3]=((((-1.0)*x412*x418))+(((-1.0)*x412*x415))+((x413*x416))+(((-1.0)*r01))+(((-1.0)*x413*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x419=((0.997495519808809)*r01);
IkReal x420=((0.0707296823218818)*r02);
IkReal x421=((0.997495519808809)*r02);
IkReal x422=((0.0707296823218818)*r01);
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal((((gconst8*x420))+(((-1.0)*gconst8*x419))+((gconst7*x422))+((gconst7*x421)))),(((gconst7*x420))+(((-1.0)*gconst8*x421))+(((-1.0)*gconst8*x422))+(((-1.0)*gconst7*x419))),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
CheckValue<IkReal> x424=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x424.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x423.value)+(((1.5707963267949)*(x424.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x425=IKcos(j7);
IkReal x426=IKsin(j7);
IkReal x427=((0.997495519808809)*gconst8);
IkReal x428=((0.0707296823218818)*gconst8);
IkReal x429=((0.0707296823218818)*gconst7);
IkReal x430=((1.0)*r02);
IkReal x431=((0.997495519808809)*gconst7);
evalcond[0]=((((-1.0)*x429))+((r02*x425))+((r01*x426))+x427);
evalcond[1]=(((r01*x425))+x428+x431+(((-1.0)*x426*x430)));
evalcond[2]=(((x426*x428))+(((-1.0)*x430))+((x425*x429))+((x426*x431))+(((-1.0)*x425*x427)));
evalcond[3]=(((x426*x429))+(((-1.0)*r01))+(((-1.0)*x426*x427))+(((-1.0)*x425*x428))+(((-1.0)*x425*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x432=((((-1.0)*r01))+(((14.1029266223667)*r02)));
IkReal x433=(r02+(((14.1029266223667)*r01)));
IkReal x435 = ((x433*x433)+(x432*x432));
if(IKabs(x435)==0){
continue;
}
IkReal x434=pow(x435,-0.5);
CheckValue<IkReal> x436 = IKatan2WithCheck(IkReal(x433),x432,IKFAST_ATAN2_MAGTHRESH);
if(!x436.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x436.value))));
IkReal gconst10=((1.0)*x433*x434);
IkReal gconst11=((-1.0)*x432*x434);
IkReal x437=j8;
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal((r02+(((14.1029266223667)*r01)))),((((-1.0)*r01))+(((14.1029266223667)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
IkReal x438=x440.value;
IkReal x439=x438;
if((((9.86960440108936)+(((-3.14159265358979)*x437))+(((-3.14159265358979)*x439))+(((-3.14159265358979)*x438))+(((-3.14159265358979)*j8))+((j8*x439))+((j8*x437))+((x437*x438))+((x438*x439)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x437))+(((-3.14159265358979)*x439))+(((-3.14159265358979)*x438))+(((-3.14159265358979)*j8))+((j8*x439))+((j8*x437))+((x437*x438))+((x438*x439)))))), 6.28318530717959)));
evalcond[1]=((-1.0)*r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x441=((1.0)*r01);
IkReal x442=((((-1.0)*x441))+(((14.1029266223667)*r02)));
IkReal x443=(r02+(((14.1029266223667)*r01)));
IkReal x445 = ((x442*x442)+(x443*x443));
if(IKabs(x445)==0){
continue;
}
IkReal x444=pow(x445,-0.5);
sj6=0;
cj6=1.0;
j6=0;
sj8=gconst10;
cj8=gconst11;
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(((((14.1029262584782)*r01))+r02)),((((-1.0)*x441))+(((14.1029262584782)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x446.value))));
CheckValue<IkReal> x447 = IKatan2WithCheck(IkReal(x443),x442,IKFAST_ATAN2_MAGTHRESH);
if(!x447.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x447.value))));
IkReal gconst10=((1.0)*x443*x444);
IkReal gconst11=((-1.0)*x442*x444);
IkReal x448=((r01*r01)+(r02*r02));
j7eval[0]=x448;
j7eval[1]=IKsign(x448);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x449=gconst10*gconst10;
IkReal x450=gconst11*gconst11;
IkReal x451=(gconst10*gconst11);
CheckValue<IkReal> x452=IKPowWithIntegerCheck(IKsign(((((0.997495519808809)*gconst10*r01))+(((-0.997495519808809)*gconst11*r02))+(((0.0707296823218818)*gconst10*r02))+(((0.0707296823218818)*gconst11*r01)))),-1);
if(!x452.valid){
continue;
}
CheckValue<IkReal> x453 = IKatan2WithCheck(IkReal(((((-0.989994624077291)*x451))+(((0.0705525412335773)*x449))+((r01*r02))+(((-0.0705525412335773)*x450)))),((((-0.00500268796135431)*x450))+(((-0.994997312038646)*x449))+(((-0.141105082467155)*x451))+(r02*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x453.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x452.value)))+(x453.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x454=IKcos(j7);
IkReal x455=IKsin(j7);
IkReal x456=((0.997495519808809)*gconst11);
IkReal x457=((0.0707296823218818)*gconst11);
IkReal x458=((0.997495519808809)*gconst10);
IkReal x459=((0.0707296823218818)*gconst10);
IkReal x460=((1.0)*r02);
IkReal x461=(gconst11*x455);
evalcond[0]=((((-1.0)*x459))+x456+((r02*x454))+((r01*x455)));
evalcond[1]=(x458+x457+(((-1.0)*x455*x460))+((r01*x454)));
evalcond[2]=(((x454*x459))+((x455*x457))+((x455*x458))+(((-1.0)*x460))+(((-1.0)*x454*x456)));
evalcond[3]=(((x455*x459))+(((-1.0)*r01))+(((-1.0)*x454*x458))+(((-1.0)*x454*x457))+(((-1.0)*x455*x456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x462=((0.0707296823218818)*gconst11);
IkReal x463=((0.997495519808809)*gconst11);
IkReal x464=((0.997495519808809)*gconst10);
IkReal x465=((0.0707296823218818)*gconst10);
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x463))+((r02*x462))+((r02*x464))+((r01*x465)))),((((-1.0)*r01*x462))+(((-1.0)*r01*x464))+((r02*x465))+(((-1.0)*r02*x463))),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
CheckValue<IkReal> x467=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x467.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x466.value)+(((1.5707963267949)*(x467.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x468=IKcos(j7);
IkReal x469=IKsin(j7);
IkReal x470=((0.997495519808809)*gconst11);
IkReal x471=((0.0707296823218818)*gconst11);
IkReal x472=((0.997495519808809)*gconst10);
IkReal x473=((0.0707296823218818)*gconst10);
IkReal x474=((1.0)*r02);
IkReal x475=(gconst11*x469);
evalcond[0]=((((-1.0)*x473))+x470+((r02*x468))+((r01*x469)));
evalcond[1]=((((-1.0)*x469*x474))+x471+x472+((r01*x468)));
evalcond[2]=(((x469*x472))+((x469*x471))+(((-1.0)*x468*x470))+(((-1.0)*x474))+((x468*x473)));
evalcond[3]=(((x469*x473))+(((-1.0)*x468*x472))+(((-1.0)*x468*x471))+(((-1.0)*r01))+(((-1.0)*x469*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x476=cj8*cj8;
IkReal x477=(cj8*sj8);
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal(((0.0705525412335773)+(((-0.141105082467155)*x476))+((r01*r02))+(((-0.989994624077291)*x477)))),((0.00500268796135431)+(((0.989994624077291)*x476))+(((-0.141105082467155)*x477))+(((-1.0)*(r01*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
CheckValue<IkReal> x479=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*cj8*r01))+(((0.997495519808809)*r01*sj8))+(((-0.997495519808809)*cj8*r02))+(((0.0707296823218818)*r02*sj8)))),-1);
if(!x479.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x478.value)+(((1.5707963267949)*(x479.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x480=IKcos(j7);
IkReal x481=IKsin(j7);
IkReal x482=((0.997495519808809)*sj8);
IkReal x483=((1.0)*r02);
IkReal x484=((0.0707296823218818)*sj8);
IkReal x485=((0.0707296823218818)*cj8);
IkReal x486=((0.997495519808809)*cj8);
IkReal x487=(cj8*x480);
evalcond[0]=((((-1.0)*x484))+((r02*x480))+x486+((r01*x481)));
evalcond[1]=((((-1.0)*x481*x483))+x482+x485+((r01*x480)));
evalcond[2]=((((-1.0)*x483))+((x481*x485))+((x481*x482))+((x480*x484))+(((-1.0)*x480*x486)));
evalcond[3]=((((-1.0)*r01))+(((-1.0)*x481*x486))+((x481*x484))+(((-1.0)*x480*x485))+(((-1.0)*x480*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x488=cj8*cj8;
IkReal x489=(cj8*sj8);
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal(((-0.00500268796135431)+(((-0.989994624077291)*x488))+(((0.141105082467155)*x489))+(r02*r02))),((0.0705525412335773)+(((-0.989994624077291)*x489))+(((-0.141105082467155)*x488))+(((-1.0)*r01*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
CheckValue<IkReal> x491=IKPowWithIntegerCheck(IKsign(((((-0.0707296823218818)*r01*sj8))+(((0.0707296823218818)*cj8*r02))+(((0.997495519808809)*r02*sj8))+(((0.997495519808809)*cj8*r01)))),-1);
if(!x491.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x490.value)+(((1.5707963267949)*(x491.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x492=IKcos(j7);
IkReal x493=IKsin(j7);
IkReal x494=((0.997495519808809)*sj8);
IkReal x495=((1.0)*r02);
IkReal x496=((0.0707296823218818)*sj8);
IkReal x497=((0.0707296823218818)*cj8);
IkReal x498=((0.997495519808809)*cj8);
IkReal x499=(cj8*x492);
evalcond[0]=((((-1.0)*x496))+((r02*x492))+x498+((r01*x493)));
evalcond[1]=((((-1.0)*x493*x495))+x497+x494+((r01*x492)));
evalcond[2]=((((-1.0)*x495))+((x493*x494))+((x493*x497))+((x492*x496))+(((-1.0)*x492*x498)));
evalcond[3]=((((-1.0)*r01))+((x493*x496))+(((-1.0)*x493*x498))+(((-1.0)*x492*x497))+(((-1.0)*x492*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x500=cj8*cj8;
IkReal x501=(cj8*sj8);
CheckValue<IkReal> x502 = IKatan2WithCheck(IkReal(((0.0705525412335773)+(((-0.989994624077291)*x501))+((r01*r02))+(((-0.141105082467155)*x500)))),((-0.994997312038646)+(((0.989994624077291)*x500))+(((-0.141105082467155)*x501))+(r02*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x502.valid){
continue;
}
CheckValue<IkReal> x503=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*cj8*r01))+(((0.997495519808809)*r01*sj8))+(((-0.997495519808809)*cj8*r02))+(((0.0707296823218818)*r02*sj8)))),-1);
if(!x503.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x502.value)+(((1.5707963267949)*(x503.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x504=IKcos(j7);
IkReal x505=IKsin(j7);
IkReal x506=((0.997495519808809)*sj8);
IkReal x507=((1.0)*r02);
IkReal x508=((0.0707296823218818)*sj8);
IkReal x509=((0.0707296823218818)*cj8);
IkReal x510=((0.997495519808809)*cj8);
IkReal x511=(cj8*x504);
evalcond[0]=((((-1.0)*x508))+((r01*x505))+x510+((r02*x504)));
evalcond[1]=((((-1.0)*x505*x507))+((r01*x504))+x509+x506);
evalcond[2]=((((-1.0)*x507))+(((-1.0)*x504*x510))+((x505*x506))+((x505*x509))+((x504*x508)));
evalcond[3]=((((-1.0)*r01))+((x505*x508))+(((-1.0)*x505*x510))+(((-1.0)*x504*x506))+(((-1.0)*x504*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x512=cj8*cj8;
IkReal x513=(cj8*r02);
IkReal x514=(cj8*sj8);
IkReal x515=(r01*sj8);
IkReal x516=(r02*sj8);
IkReal x517=(cj8*r01);
j7eval[0]=((((14.1029266223667)*x516))+(((-14.1029266223667)*x517))+x515+x513);
j7eval[1]=((IKabs(((0.0705525412335773)+(((-0.989994624077291)*x514))+(((-0.141105082467155)*x512))+((r01*r02)))))+(IKabs(((-0.00500268796135431)+(((-0.989994624077291)*x512))+(((0.141105082467155)*x514))+(r02*r02)))));
j7eval[2]=IKsign(((((0.997495519808809)*x516))+(((-0.997495519808809)*x517))+(((0.0707296823218818)*x515))+(((0.0707296823218818)*x513))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x518=cj8*cj8;
IkReal x519=(cj8*sj8);
IkReal x520=(r01*sj8);
IkReal x521=((1.0)*r02);
IkReal x522=(r02*sj8);
IkReal x523=(cj8*r01);
j7eval[0]=((((-1.0)*cj8*x521))+(((-1.0)*x520))+(((14.1029266223667)*x523))+(((-14.1029266223667)*x522)));
j7eval[1]=IKsign(((((0.997495519808809)*x523))+(((-0.997495519808809)*x522))+(((-0.0707296823218818)*x520))+(((-0.0707296823218818)*cj8*r02))));
j7eval[2]=((IKabs(((-0.994997312038646)+(((-0.141105082467155)*x519))+(((0.989994624077291)*x518))+(r01*r01))))+(IKabs(((-0.0705525412335773)+(((0.141105082467155)*x518))+(((0.989994624077291)*x519))+(((-1.0)*r01*x521))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x524=cj8*cj8;
IkReal x525=(r01*sj8);
IkReal x526=(cj8*r02);
IkReal x527=((1.0)*r01);
IkReal x528=(cj8*sj8);
IkReal x529=(r02*sj8);
j7eval[0]=((((-1.0)*cj8*x527))+x529+(((-14.1029266223667)*x525))+(((-14.1029266223667)*x526)));
j7eval[1]=((IKabs(((0.00500268796135431)+(((-1.0)*r01*x527))+(((-0.141105082467155)*x528))+(((0.989994624077291)*x524)))))+(IKabs(((0.0705525412335773)+(((-0.989994624077291)*x528))+(((-0.141105082467155)*x524))+(((-1.0)*r02*x527))))));
j7eval[2]=IKsign(((((0.0707296823218818)*x529))+(((-0.997495519808809)*x525))+(((-0.997495519808809)*x526))+(((-0.0707296823218818)*cj8*r01))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x530=((((-14.1029266223667)*r01))+r02);
IkReal x531=((((-1.0)*r01))+(((-14.1029266223667)*r02)));
IkReal x533 = ((x531*x531)+(x530*x530));
if(IKabs(x533)==0){
continue;
}
IkReal x532=pow(x533,-0.5);
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal(x531),x530,IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
IkReal gconst18=((-1.0)*(x534.value));
IkReal gconst19=((-1.0)*x531*x532);
IkReal gconst20=(x530*x532);
IkReal x535=j8;
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(((((-1.0)*r01))+(((-14.1029266223667)*r02)))),((((-14.1029266223667)*r01))+r02),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
IkReal x536=x538.value;
IkReal x537=x536;
if(((((x536*x537))+((j8*x535))+((j8*x537))+((x535*x536)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x536*x537))+((j8*x535))+((j8*x537))+((x535*x536)))))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x539=((1.0)*r01);
IkReal x540=((((-14.1029266223667)*r01))+r02);
IkReal x541=x531;
IkReal x543 = ((x541*x541)+(x540*x540));
if(IKabs(x543)==0){
continue;
}
IkReal x542=pow(x543,-0.5);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst19;
cj8=gconst20;
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal(((((-1.0)*x539))+(((-14.1029262584782)*r02)))),(r02+(((-14.1029262584782)*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j8=((-1.0)*(x544.value));
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(x541),x540,IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
IkReal gconst18=((-1.0)*(x545.value));
IkReal gconst19=((-1.0)*x541*x542);
IkReal gconst20=(x540*x542);
IkReal x546=((r01*r01)+(r02*r02));
j7eval[0]=x546;
j7eval[1]=IKsign(x546);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x547=((1.0)*r01);
IkReal x548=((((-14.1029266223667)*r01))+r02);
IkReal x549=x531;
IkReal x551 = ((x549*x549)+(x548*x548));
if(IKabs(x551)==0){
continue;
}
IkReal x550=pow(x551,-0.5);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst19;
cj8=gconst20;
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal(((((-1.0)*x547))+(((-14.1029262584782)*r02)))),(r02+(((-14.1029262584782)*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
j8=((-1.0)*(x552.value));
CheckValue<IkReal> x553 = IKatan2WithCheck(IkReal(x549),x548,IKFAST_ATAN2_MAGTHRESH);
if(!x553.valid){
continue;
}
IkReal gconst18=((-1.0)*(x553.value));
IkReal gconst19=((-1.0)*x549*x550);
IkReal gconst20=(x548*x550);
IkReal x554=r01*r01;
IkReal x555=r02*r02;
CheckValue<IkReal> x559=IKPowWithIntegerCheck((x555+x554),-1);
if(!x559.valid){
continue;
}
IkReal x556=x559.value;
IkReal x557=(r02*x556);
IkReal x558=(x554*x556);
j7eval[0]=((IKabs((((x556*(x555*x555)))+(((-1.0)*x558))+((x555*x558)))))+(IKabs((((x557*(r01*r01*r01)))+((r01*x557*(r02*r02)))+((r01*x557))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x560=((1.0)*r01);
IkReal x561=((((-14.1029266223667)*r01))+r02);
IkReal x562=x531;
IkReal x564 = ((x562*x562)+(x561*x561));
if(IKabs(x564)==0){
continue;
}
IkReal x563=pow(x564,-0.5);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst19;
cj8=gconst20;
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(((((-14.1029262584782)*r02))+(((-1.0)*x560)))),(r02+(((-14.1029262584782)*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
j8=((-1.0)*(x565.value));
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(x562),x561,IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
IkReal gconst18=((-1.0)*(x566.value));
IkReal gconst19=((-1.0)*x562*x563);
IkReal gconst20=(x561*x563);
IkReal x567=r01*r01;
IkReal x568=r02*r02;
IkReal x569=((1.0)*x568);
CheckValue<IkReal> x575=IKPowWithIntegerCheck((x568+x567),-1);
if(!x575.valid){
continue;
}
IkReal x570=x575.value;
CheckValue<IkReal> x576=IKPowWithIntegerCheck(((((-1.0)*x567))+(((-1.0)*x569))),-1);
if(!x576.valid){
continue;
}
IkReal x571=x576.value;
IkReal x572=((1.0)*x571);
IkReal x573=(r02*x572);
IkReal x574=(r01*x572);
j7eval[0]=((IKabs(((((-1.0)*x569*x570))+((x570*(x567*x567)))+((x567*x568*x570)))))+(IKabs(((((-1.0)*r01*x573))+(((-1.0)*r01*x573*(r02*r02)))+(((-1.0)*x573*(r01*r01*r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x577=gconst20*gconst20;
IkReal x578=gconst19*gconst19;
IkReal x579=(gconst19*gconst20);
CheckValue<IkReal> x580=IKPowWithIntegerCheck(IKsign(((((0.997495519808809)*gconst20*r01))+(((-0.0707296823218818)*gconst19*r01))+(((-0.0707296823218818)*gconst20*r02))+(((-0.997495519808809)*gconst19*r02)))),-1);
if(!x580.valid){
continue;
}
CheckValue<IkReal> x581 = IKatan2WithCheck(IkReal(((((-0.141105082467155)*x579))+(((-0.00500268796135431)*x577))+(r01*r01)+(((-0.994997312038646)*x578)))),((((0.989994624077291)*x579))+(((0.0705525412335773)*x577))+(((-0.0705525412335773)*x578))+(((-1.0)*r01*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x581.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x580.value)))+(x581.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x582=IKsin(j7);
IkReal x583=IKcos(j7);
IkReal x584=((0.0707296823218818)*gconst19);
IkReal x585=((0.0707296823218818)*gconst20);
IkReal x586=((1.0)*r01);
IkReal x587=((0.997495519808809)*gconst20);
IkReal x588=((0.997495519808809)*gconst19);
IkReal x589=((1.0)*r02);
evalcond[0]=((((-1.0)*x582*x586))+((r02*x583))+x587+(((-1.0)*x584)));
evalcond[1]=((((-1.0)*x582*x589))+(((-1.0)*x583*x586))+x585+x588);
evalcond[2]=((((-1.0)*x582*x587))+((x582*x584))+(((-1.0)*x583*x585))+(((-1.0)*x583*x588))+r01);
evalcond[3]=(((x583*x584))+((x582*x588))+((x582*x585))+(((-1.0)*x583*x587))+(((-1.0)*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x590=gconst19*gconst19;
IkReal x591=gconst20*gconst20;
IkReal x592=(gconst19*gconst20);
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal(((((-0.994997312038646)*x591))+(((-0.00500268796135431)*x590))+(((0.141105082467155)*x592))+(r02*r02))),((((0.0705525412335773)*x590))+(((-0.0705525412335773)*x591))+((r01*r02))+(((-0.989994624077291)*x592))),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
CheckValue<IkReal> x594=IKPowWithIntegerCheck(IKsign(((((0.997495519808809)*gconst19*r02))+(((0.0707296823218818)*gconst19*r01))+(((-0.997495519808809)*gconst20*r01))+(((0.0707296823218818)*gconst20*r02)))),-1);
if(!x594.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x593.value)+(((1.5707963267949)*(x594.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x595=IKsin(j7);
IkReal x596=IKcos(j7);
IkReal x597=((0.0707296823218818)*gconst19);
IkReal x598=((0.0707296823218818)*gconst20);
IkReal x599=((1.0)*r01);
IkReal x600=((0.997495519808809)*gconst20);
IkReal x601=((0.997495519808809)*gconst19);
IkReal x602=((1.0)*r02);
evalcond[0]=((((-1.0)*x597))+((r02*x596))+(((-1.0)*x595*x599))+x600);
evalcond[1]=((((-1.0)*x596*x599))+x598+x601+(((-1.0)*x595*x602)));
evalcond[2]=(((x595*x597))+(((-1.0)*x596*x598))+(((-1.0)*x596*x601))+r01+(((-1.0)*x595*x600)));
evalcond[3]=(((x595*x598))+((x595*x601))+(((-1.0)*x596*x600))+((x596*x597))+(((-1.0)*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x603=(gconst20*r02);
IkReal x604=((0.0707296823218818)*r01);
IkReal x605=(gconst19*r02);
IkReal x606=((0.997495519808809)*r01);
CheckValue<IkReal> x607 = IKatan2WithCheck(IkReal(((((0.997495519808809)*x605))+(((-1.0)*gconst19*x604))+((gconst20*x606))+(((0.0707296823218818)*x603)))),(((gconst19*x606))+((gconst20*x604))+(((-0.997495519808809)*x603))+(((0.0707296823218818)*x605))),IKFAST_ATAN2_MAGTHRESH);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x608.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x607.value)+(((1.5707963267949)*(x608.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x609=IKsin(j7);
IkReal x610=IKcos(j7);
IkReal x611=((0.0707296823218818)*gconst19);
IkReal x612=((0.0707296823218818)*gconst20);
IkReal x613=((1.0)*r01);
IkReal x614=((0.997495519808809)*gconst20);
IkReal x615=((0.997495519808809)*gconst19);
IkReal x616=((1.0)*r02);
evalcond[0]=((((-1.0)*x609*x613))+((r02*x610))+(((-1.0)*x611))+x614);
evalcond[1]=((((-1.0)*x610*x613))+(((-1.0)*x609*x616))+x615+x612);
evalcond[2]=((((-1.0)*x610*x612))+(((-1.0)*x610*x615))+(((-1.0)*x609*x614))+r01+((x609*x611)));
evalcond[3]=((((-1.0)*x610*x614))+(((-1.0)*x616))+((x609*x612))+((x609*x615))+((x610*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x617=((((-14.1029266223667)*r01))+r02);
IkReal x618=((((-1.0)*r01))+(((-14.1029266223667)*r02)));
IkReal x620 = ((x618*x618)+(x617*x617));
if(IKabs(x620)==0){
continue;
}
IkReal x619=pow(x620,-0.5);
CheckValue<IkReal> x621 = IKatan2WithCheck(IkReal(x618),x617,IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x621.value))));
IkReal gconst22=((1.0)*x618*x619);
IkReal gconst23=((-1.0)*x617*x619);
IkReal x622=j8;
CheckValue<IkReal> x625 = IKatan2WithCheck(IkReal(((((-1.0)*r01))+(((-14.1029266223667)*r02)))),((((-14.1029266223667)*r01))+r02),IKFAST_ATAN2_MAGTHRESH);
if(!x625.valid){
continue;
}
IkReal x623=x625.value;
IkReal x624=x623;
if((((9.86960440108936)+((j8*x622))+((j8*x624))+(((-3.14159265358979)*x622))+(((-3.14159265358979)*x623))+(((-3.14159265358979)*x624))+(((-3.14159265358979)*j8))+((x623*x624))+((x622*x623)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j8*x622))+((j8*x624))+(((-3.14159265358979)*x622))+(((-3.14159265358979)*x623))+(((-3.14159265358979)*x624))+(((-3.14159265358979)*j8))+((x623*x624))+((x622*x623)))))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x626=((1.0)*r01);
IkReal x627=((((-14.1029266223667)*r01))+r02);
IkReal x628=x618;
IkReal x630 = ((x627*x627)+(x628*x628));
if(IKabs(x630)==0){
continue;
}
IkReal x629=pow(x630,-0.5);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst22;
cj8=gconst23;
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(((((-1.0)*x626))+(((-14.1029262584782)*r02)))),(r02+(((-14.1029262584782)*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x631.value))));
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal(x628),x627,IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x632.value))));
IkReal gconst22=((1.0)*x628*x629);
IkReal gconst23=((-1.0)*x627*x629);
IkReal x633=((r01*r01)+(r02*r02));
j7eval[0]=x633;
j7eval[1]=IKsign(x633);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x634=gconst22*gconst22;
IkReal x635=gconst23*gconst23;
IkReal x636=(gconst22*gconst23);
CheckValue<IkReal> x637=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*gconst22*r01))+(((0.997495519808809)*gconst22*r02))+(((0.0707296823218818)*gconst23*r02))+(((-0.997495519808809)*gconst23*r01)))),-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(((((0.141105082467155)*x636))+(((-0.994997312038646)*x635))+(((-0.00500268796135431)*x634))+(r02*r02))),((((-0.989994624077291)*x636))+(((-0.0705525412335773)*x635))+((r01*r02))+(((0.0705525412335773)*x634))),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x637.value)))+(x638.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x639=IKsin(j7);
IkReal x640=IKcos(j7);
IkReal x641=((0.0707296823218818)*gconst23);
IkReal x642=((0.997495519808809)*gconst23);
IkReal x643=((0.0707296823218818)*gconst22);
IkReal x644=((0.997495519808809)*gconst22);
IkReal x645=((1.0)*r01);
IkReal x646=((1.0)*r02);
IkReal x647=(gconst22*x640);
evalcond[0]=((((-1.0)*x639*x645))+((r02*x640))+(((-1.0)*x643))+x642);
evalcond[1]=((((-1.0)*x640*x645))+(((-1.0)*x639*x646))+x644+x641);
evalcond[2]=(((x639*x643))+(((-1.0)*x640*x644))+(((-1.0)*x640*x641))+(((-1.0)*x639*x642))+r01);
evalcond[3]=(((x639*x644))+((x639*x641))+(((-1.0)*x640*x642))+((x640*x643))+(((-1.0)*x646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x648=(gconst23*r02);
IkReal x649=((0.997495519808809)*r01);
IkReal x650=(gconst22*r02);
IkReal x651=((0.0707296823218818)*r01);
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal((((gconst23*x649))+(((0.997495519808809)*x650))+(((-1.0)*gconst22*x651))+(((0.0707296823218818)*x648)))),((((0.0707296823218818)*x650))+(((-0.997495519808809)*x648))+((gconst22*x649))+((gconst23*x651))),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x653.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x652.value)+(((1.5707963267949)*(x653.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x654=IKsin(j7);
IkReal x655=IKcos(j7);
IkReal x656=((0.0707296823218818)*gconst23);
IkReal x657=((0.997495519808809)*gconst23);
IkReal x658=((0.0707296823218818)*gconst22);
IkReal x659=((0.997495519808809)*gconst22);
IkReal x660=((1.0)*r01);
IkReal x661=((1.0)*r02);
IkReal x662=(gconst22*x655);
evalcond[0]=((((-1.0)*x654*x660))+((r02*x655))+(((-1.0)*x658))+x657);
evalcond[1]=((((-1.0)*x654*x661))+x656+x659+(((-1.0)*x655*x660)));
evalcond[2]=((((-1.0)*x655*x659))+(((-1.0)*x655*x656))+((x654*x658))+r01+(((-1.0)*x654*x657)));
evalcond[3]=((((-1.0)*x655*x657))+((x654*x656))+((x654*x659))+(((-1.0)*x661))+((x655*x658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x663=((((-1.0)*r02))+(((14.1029266223667)*r01)));
IkReal x664=((((-1.0)*r01))+(((-14.1029266223667)*r02)));
IkReal x666 = ((x664*x664)+(x663*x663));
if(IKabs(x666)==0){
continue;
}
IkReal x665=pow(x666,-0.5);
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(x663),x664,IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
IkReal gconst24=((-1.0)*(x667.value));
IkReal gconst25=((-1.0)*x663*x665);
IkReal gconst26=(x664*x665);
IkReal x668=j8;
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(((((-1.0)*r02))+(((14.1029266223667)*r01)))),((((-1.0)*r01))+(((-14.1029266223667)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
IkReal x669=x671.value;
IkReal x670=x669;
if(((((j8*x668))+((j8*x670))+((x668*x669))+((x669*x670)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j8*x668))+((j8*x670))+((x668*x669))+((x669*x670)))))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x672=((1.0)*r02);
IkReal x673=((1.0)*r01);
IkReal x674=((((14.1029266223667)*r01))+(((-1.0)*x672)));
IkReal x675=x664;
IkReal x677 = ((x674*x674)+(x675*x675));
if(IKabs(x677)==0){
continue;
}
IkReal x676=pow(x677,-0.5);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst25;
cj8=gconst26;
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(((((14.1029262584782)*r01))+(((-1.0)*x672)))),((((-14.1029262584782)*r02))+(((-1.0)*x673))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
j8=((-1.0)*(x678.value));
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(x674),x675,IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
IkReal gconst24=((-1.0)*(x679.value));
IkReal gconst25=((-1.0)*x674*x676);
IkReal gconst26=(x675*x676);
IkReal x680=((r01*r01)+(r02*r02));
j7eval[0]=x680;
j7eval[1]=IKsign(x680);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x681=gconst25*gconst25;
IkReal x682=gconst26*gconst26;
IkReal x683=(gconst25*gconst26);
CheckValue<IkReal> x684 = IKatan2WithCheck(IkReal(((((0.0705525412335773)*x682))+(((0.989994624077291)*x683))+(((-0.0705525412335773)*x681))+((r01*r02)))),((((0.00500268796135431)*x682))+(((-1.0)*(r02*r02)))+(((0.994997312038646)*x681))+(((0.141105082467155)*x683))),IKFAST_ATAN2_MAGTHRESH);
if(!x684.valid){
continue;
}
CheckValue<IkReal> x685=IKPowWithIntegerCheck(IKsign(((((0.997495519808809)*gconst26*r02))+(((0.0707296823218818)*gconst26*r01))+(((-0.0707296823218818)*gconst25*r02))+(((0.997495519808809)*gconst25*r01)))),-1);
if(!x685.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x684.value)+(((1.5707963267949)*(x685.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x686=IKsin(j7);
IkReal x687=IKcos(j7);
IkReal x688=((0.0707296823218818)*gconst26);
IkReal x689=((1.0)*r01);
IkReal x690=((1.0)*r02);
IkReal x691=((0.997495519808809)*gconst26);
IkReal x692=(gconst26*x686);
IkReal x693=(gconst25*x687);
IkReal x694=(gconst25*x686);
evalcond[0]=((((-0.0707296823218818)*gconst25))+(((-1.0)*x686*x689))+x691+((r02*x687)));
evalcond[1]=((((-1.0)*x687*x689))+x688+(((-1.0)*x686*x690))+(((0.997495519808809)*gconst25)));
evalcond[2]=((((-1.0)*x687*x688))+(((-0.997495519808809)*x693))+(((0.0707296823218818)*x694))+r01+(((-1.0)*x686*x691)));
evalcond[3]=((((-1.0)*x687*x691))+((x686*x688))+(((0.997495519808809)*x694))+(((0.0707296823218818)*x693))+(((-1.0)*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x695=((0.997495519808809)*gconst26);
IkReal x696=((0.0707296823218818)*gconst26);
IkReal x697=(gconst25*r02);
IkReal x698=(gconst25*r01);
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal(((((0.997495519808809)*x697))+((r02*x696))+(((-0.0707296823218818)*x698))+((r01*x695)))),((((0.997495519808809)*x698))+(((0.0707296823218818)*x697))+(((-1.0)*r02*x695))+((r01*x696))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x700.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x699.value)+(((1.5707963267949)*(x700.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x701=IKsin(j7);
IkReal x702=IKcos(j7);
IkReal x703=((0.0707296823218818)*gconst26);
IkReal x704=((1.0)*r01);
IkReal x705=((1.0)*r02);
IkReal x706=((0.997495519808809)*gconst26);
IkReal x707=(gconst26*x701);
IkReal x708=(gconst25*x702);
IkReal x709=(gconst25*x701);
evalcond[0]=((((-0.0707296823218818)*gconst25))+x706+((r02*x702))+(((-1.0)*x701*x704)));
evalcond[1]=((((-1.0)*x702*x704))+x703+(((0.997495519808809)*gconst25))+(((-1.0)*x701*x705)));
evalcond[2]=((((-1.0)*x702*x703))+r01+(((-0.997495519808809)*x708))+(((-1.0)*x701*x706))+(((0.0707296823218818)*x709)));
evalcond[3]=(((x701*x703))+(((-1.0)*x702*x706))+(((0.997495519808809)*x709))+(((-1.0)*x705))+(((0.0707296823218818)*x708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x710=((((-1.0)*r02))+(((14.1029266223667)*r01)));
IkReal x711=((((-1.0)*r01))+(((-14.1029266223667)*r02)));
IkReal x713 = ((x710*x710)+(x711*x711));
if(IKabs(x713)==0){
continue;
}
IkReal x712=pow(x713,-0.5);
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(x710),x711,IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x714.value))));
IkReal gconst28=((1.0)*x710*x712);
IkReal gconst29=((-1.0)*x711*x712);
IkReal x715=j8;
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((((-1.0)*r02))+(((14.1029266223667)*r01)))),((((-1.0)*r01))+(((-14.1029266223667)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
IkReal x716=x718.value;
IkReal x717=x716;
if((((9.86960440108936)+((j8*x715))+((j8*x717))+((x715*x716))+(((-3.14159265358979)*x716))+(((-3.14159265358979)*x717))+(((-3.14159265358979)*x715))+(((-3.14159265358979)*j8))+((x716*x717)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j8*x715))+((j8*x717))+((x715*x716))+(((-3.14159265358979)*x716))+(((-3.14159265358979)*x717))+(((-3.14159265358979)*x715))+(((-3.14159265358979)*j8))+((x716*x717)))))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x719=((1.0)*r02);
IkReal x720=((1.0)*r01);
IkReal x721=((((-1.0)*x719))+(((14.1029266223667)*r01)));
IkReal x722=x711;
IkReal x724 = ((x721*x721)+(x722*x722));
if(IKabs(x724)==0){
continue;
}
IkReal x723=pow(x724,-0.5);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst28;
cj8=gconst29;
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(((((14.1029262584782)*r01))+(((-1.0)*x719)))),((((-1.0)*x720))+(((-14.1029262584782)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x725.value))));
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal(x721),x722,IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x726.value))));
IkReal gconst28=((1.0)*x721*x723);
IkReal gconst29=((-1.0)*x722*x723);
IkReal x727=((r01*r01)+(r02*r02));
j7eval[0]=x727;
j7eval[1]=IKsign(x727);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x728=gconst28*gconst28;
IkReal x729=gconst29*gconst29;
IkReal x730=(gconst28*gconst29);
CheckValue<IkReal> x731=IKPowWithIntegerCheck(IKsign(((((-0.997495519808809)*gconst29*r01))+(((0.0707296823218818)*gconst29*r02))+(((0.0707296823218818)*gconst28*r01))+(((0.997495519808809)*gconst28*r02)))),-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732 = IKatan2WithCheck(IkReal(((((0.141105082467155)*x730))+(((-0.00500268796135431)*x728))+(r02*r02)+(((-0.994997312038646)*x729)))),((((0.0705525412335773)*x728))+(((-0.0705525412335773)*x729))+((r01*r02))+(((-0.989994624077291)*x730))),IKFAST_ATAN2_MAGTHRESH);
if(!x732.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x731.value)))+(x732.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x733=IKsin(j7);
IkReal x734=IKcos(j7);
IkReal x735=((0.997495519808809)*gconst28);
IkReal x736=((0.997495519808809)*gconst29);
IkReal x737=((0.0707296823218818)*gconst29);
IkReal x738=((1.0)*r01);
IkReal x739=((0.0707296823218818)*gconst28);
IkReal x740=((1.0)*r02);
evalcond[0]=((((-1.0)*x733*x738))+(((-1.0)*x739))+((r02*x734))+x736);
evalcond[1]=((((-1.0)*x734*x738))+(((-1.0)*x733*x740))+x737+x735);
evalcond[2]=((((-1.0)*x734*x737))+(((-1.0)*x734*x735))+(((-1.0)*x733*x736))+((x733*x739))+r01);
evalcond[3]=(((x734*x739))+(((-1.0)*x734*x736))+((x733*x737))+((x733*x735))+(((-1.0)*x740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x741=((0.997495519808809)*r02);
IkReal x742=((0.0707296823218818)*r01);
IkReal x743=((0.0707296823218818)*r02);
IkReal x744=((0.997495519808809)*r01);
CheckValue<IkReal> x745 = IKatan2WithCheck(IkReal(((((-1.0)*gconst28*x742))+((gconst29*x744))+((gconst29*x743))+((gconst28*x741)))),(((gconst29*x742))+((gconst28*x743))+((gconst28*x744))+(((-1.0)*gconst29*x741))),IKFAST_ATAN2_MAGTHRESH);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x746.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x745.value)+(((1.5707963267949)*(x746.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x747=IKsin(j7);
IkReal x748=IKcos(j7);
IkReal x749=((0.997495519808809)*gconst28);
IkReal x750=((0.997495519808809)*gconst29);
IkReal x751=((0.0707296823218818)*gconst29);
IkReal x752=((1.0)*r01);
IkReal x753=((0.0707296823218818)*gconst28);
IkReal x754=((1.0)*r02);
evalcond[0]=(((r02*x748))+(((-1.0)*x747*x752))+x750+(((-1.0)*x753)));
evalcond[1]=((((-1.0)*x747*x754))+x751+x749+(((-1.0)*x748*x752)));
evalcond[2]=(((x747*x753))+(((-1.0)*x747*x750))+r01+(((-1.0)*x748*x751))+(((-1.0)*x748*x749)));
evalcond[3]=(((x747*x751))+((x747*x749))+(((-1.0)*x748*x750))+(((-1.0)*x754))+((x748*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x755=((((-14.1029266223667)*r01))+r02);
IkReal x756=(r01+(((14.1029266223667)*r02)));
IkReal x758 = ((x755*x755)+(x756*x756));
if(IKabs(x758)==0){
continue;
}
IkReal x757=pow(x758,-0.5);
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(x755),x756,IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal gconst30=((-1.0)*(x759.value));
IkReal gconst31=((-1.0)*x755*x757);
IkReal gconst32=(x756*x757);
IkReal x760=j8;
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(((((-14.1029266223667)*r01))+r02)),(r01+(((14.1029266223667)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
IkReal x761=x763.value;
IkReal x762=x761;
if(((((x760*x761))+((x761*x762))+((j8*x762))+((j8*x760)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x760*x761))+((x761*x762))+((j8*x762))+((j8*x760)))))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x764=((((-14.1029266223667)*r01))+r02);
IkReal x765=(r01+(((14.1029266223667)*r02)));
IkReal x766=x757;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst31;
cj8=gconst32;
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal((r02+(((-14.1029262584782)*r01)))),((((14.1029262584782)*r02))+r01),IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
j8=((-1.0)*(x767.value));
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal(x764),x765,IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
IkReal gconst30=((-1.0)*(x768.value));
IkReal gconst31=((-1.0)*x764*x766);
IkReal gconst32=(x765*x766);
IkReal x769=((r01*r01)+(r02*r02));
j7eval[0]=x769;
j7eval[1]=IKsign(x769);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x770=((((-14.1029266223667)*r01))+r02);
IkReal x771=(r01+(((14.1029266223667)*r02)));
IkReal x772=x757;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst31;
cj8=gconst32;
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal((r02+(((-14.1029262584782)*r01)))),((((14.1029262584782)*r02))+r01),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
j8=((-1.0)*(x773.value));
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(x770),x771,IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
IkReal gconst30=((-1.0)*(x774.value));
IkReal gconst31=((-1.0)*x770*x772);
IkReal gconst32=(x771*x772);
IkReal x775=r01*r01;
IkReal x776=r02*r02;
CheckValue<IkReal> x780=IKPowWithIntegerCheck((x776+x775),-1);
if(!x780.valid){
continue;
}
IkReal x777=x780.value;
IkReal x778=(r02*x777);
IkReal x779=(x775*x777);
j7eval[0]=((IKabs(((((-1.0)*x777*(x776*x776)))+(((-1.0)*x776*x779))+x779)))+(IKabs((((r01*x778*(r02*r02)))+((x778*(r01*r01*r01)))+((r01*x778))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x781=((((-14.1029266223667)*r01))+r02);
IkReal x782=(r01+(((14.1029266223667)*r02)));
IkReal x783=x757;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst31;
cj8=gconst32;
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal((r02+(((-14.1029262584782)*r01)))),((((14.1029262584782)*r02))+r01),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
j8=((-1.0)*(x784.value));
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(x781),x782,IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
IkReal gconst30=((-1.0)*(x785.value));
IkReal gconst31=((-1.0)*x781*x783);
IkReal gconst32=(x782*x783);
IkReal x786=r02*r02;
IkReal x787=r01*r01;
CheckValue<IkReal> x794=IKPowWithIntegerCheck((x786+x787),-1);
if(!x794.valid){
continue;
}
IkReal x788=x794.value;
IkReal x789=((1.0)*x788);
CheckValue<IkReal> x795=IKPowWithIntegerCheck(((((-1.0)*x786))+(((-1.0)*x787))),-1);
if(!x795.valid){
continue;
}
IkReal x790=x795.value;
IkReal x791=((1.0)*x790);
IkReal x792=(r02*x791);
IkReal x793=(r01*x791);
j7eval[0]=((IKabs((((x786*x788))+(((-1.0)*x786*x787*x789))+(((-1.0)*x789*(x787*x787))))))+(IKabs(((((-1.0)*r01*x792))+(((-1.0)*x792*(r01*r01*r01)))+(((-1.0)*r01*x792*(r02*r02)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x796=gconst32*gconst32;
IkReal x797=gconst31*gconst31;
IkReal x798=(gconst31*gconst32);
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal(((((-0.0705525412335773)*x796))+(((-0.989994624077291)*x798))+(((0.0705525412335773)*x797))+(((-1.0)*r01*r02)))),((((0.994997312038646)*x796))+(((0.00500268796135431)*x797))+(((-1.0)*(r01*r01)))+(((-0.141105082467155)*x798))),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign(((((-0.0707296823218818)*gconst32*r01))+(((-0.997495519808809)*gconst32*r02))+(((0.0707296823218818)*gconst31*r02))+(((-0.997495519808809)*gconst31*r01)))),-1);
if(!x800.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x799.value)+(((1.5707963267949)*(x800.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x801=IKsin(j7);
IkReal x802=IKcos(j7);
IkReal x803=((1.0)*r01);
IkReal x804=((1.0)*r02);
IkReal x805=(gconst31*x801);
IkReal x806=((0.0707296823218818)*x802);
IkReal x807=(gconst32*x801);
IkReal x808=((0.997495519808809)*x802);
evalcond[0]=((((-0.0707296823218818)*gconst31))+((r02*x802))+(((0.997495519808809)*gconst32))+(((-1.0)*x801*x803)));
evalcond[1]=((((0.0707296823218818)*gconst32))+(((0.997495519808809)*gconst31))+(((-1.0)*x801*x804))+(((-1.0)*x802*x803)));
evalcond[2]=((((-1.0)*gconst32*x806))+(((-1.0)*gconst31*x808))+(((-0.997495519808809)*x807))+(((0.0707296823218818)*x805))+r01);
evalcond[3]=((((-1.0)*gconst32*x808))+(((0.0707296823218818)*x807))+(((0.997495519808809)*x805))+(((-1.0)*x804))+((gconst31*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x809=gconst32*gconst32;
IkReal x810=gconst31*gconst31;
IkReal x811=(gconst31*gconst32);
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal(((((-0.0705525412335773)*x810))+((r01*r02))+(((0.989994624077291)*x811))+(((0.0705525412335773)*x809)))),((((0.00500268796135431)*x809))+(((-1.0)*(r02*r02)))+(((0.141105082467155)*x811))+(((0.994997312038646)*x810))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813=IKPowWithIntegerCheck(IKsign(((((0.997495519808809)*gconst32*r02))+(((0.0707296823218818)*gconst32*r01))+(((-0.0707296823218818)*gconst31*r02))+(((0.997495519808809)*gconst31*r01)))),-1);
if(!x813.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x812.value)+(((1.5707963267949)*(x813.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x814=IKsin(j7);
IkReal x815=IKcos(j7);
IkReal x816=((1.0)*r01);
IkReal x817=((1.0)*r02);
IkReal x818=(gconst31*x814);
IkReal x819=((0.0707296823218818)*x815);
IkReal x820=(gconst32*x814);
IkReal x821=((0.997495519808809)*x815);
evalcond[0]=((((-0.0707296823218818)*gconst31))+(((-1.0)*x814*x816))+(((0.997495519808809)*gconst32))+((r02*x815)));
evalcond[1]=((((-1.0)*x815*x816))+(((-1.0)*x814*x817))+(((0.0707296823218818)*gconst32))+(((0.997495519808809)*gconst31)));
evalcond[2]=((((-1.0)*gconst31*x821))+(((-1.0)*gconst32*x819))+r01+(((-0.997495519808809)*x820))+(((0.0707296823218818)*x818)));
evalcond[3]=((((0.997495519808809)*x818))+(((-1.0)*x817))+(((-1.0)*gconst32*x821))+((gconst31*x819))+(((0.0707296823218818)*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x822=((0.997495519808809)*gconst31);
IkReal x823=((0.0707296823218818)*gconst31);
IkReal x824=(gconst32*r02);
IkReal x825=(gconst32*r01);
CheckValue<IkReal> x826 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x823))+(((0.0707296823218818)*x824))+((r02*x822))+(((0.997495519808809)*x825)))),(((r01*x822))+(((-0.997495519808809)*x824))+(((0.0707296823218818)*x825))+((r02*x823))),IKFAST_ATAN2_MAGTHRESH);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x827.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x826.value)+(((1.5707963267949)*(x827.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x828=IKsin(j7);
IkReal x829=IKcos(j7);
IkReal x830=((1.0)*r01);
IkReal x831=((1.0)*r02);
IkReal x832=(gconst31*x828);
IkReal x833=((0.0707296823218818)*x829);
IkReal x834=(gconst32*x828);
IkReal x835=((0.997495519808809)*x829);
evalcond[0]=((((-1.0)*x828*x830))+(((-0.0707296823218818)*gconst31))+(((0.997495519808809)*gconst32))+((r02*x829)));
evalcond[1]=((((-1.0)*x828*x831))+(((0.0707296823218818)*gconst32))+(((0.997495519808809)*gconst31))+(((-1.0)*x829*x830)));
evalcond[2]=((((0.0707296823218818)*x832))+(((-1.0)*gconst31*x835))+(((-1.0)*gconst32*x833))+r01+(((-0.997495519808809)*x834)));
evalcond[3]=((((0.0707296823218818)*x834))+((gconst31*x833))+(((-1.0)*gconst32*x835))+(((-1.0)*x831))+(((0.997495519808809)*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x836=((((-14.1029266223667)*r01))+r02);
IkReal x837=(r01+(((14.1029266223667)*r02)));
IkReal x839 = ((x836*x836)+(x837*x837));
if(IKabs(x839)==0){
continue;
}
IkReal x838=pow(x839,-0.5);
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal(x836),x837,IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x840.value))));
IkReal gconst34=((1.0)*x836*x838);
IkReal gconst35=((-1.0)*x837*x838);
IkReal x841=j8;
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal(((((-14.1029266223667)*r01))+r02)),(r01+(((14.1029266223667)*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
IkReal x842=x844.value;
IkReal x843=x842;
if((((9.86960440108936)+(((-3.14159265358979)*x842))+(((-3.14159265358979)*x841))+(((-3.14159265358979)*x843))+((x842*x843))+(((-3.14159265358979)*j8))+((j8*x843))+((j8*x841))+((x841*x842)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x842))+(((-3.14159265358979)*x841))+(((-3.14159265358979)*x843))+((x842*x843))+(((-3.14159265358979)*j8))+((j8*x843))+((j8*x841))+((x841*x842)))))), 6.28318530717959)));
evalcond[1]=r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
IkReal x845=((((-14.1029266223667)*r01))+r02);
IkReal x846=(r01+(((14.1029266223667)*r02)));
IkReal x847=x838;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj8=gconst34;
cj8=gconst35;
CheckValue<IkReal> x848 = IKatan2WithCheck(IkReal((r02+(((-14.1029262584782)*r01)))),((((14.1029262584782)*r02))+r01),IKFAST_ATAN2_MAGTHRESH);
if(!x848.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x848.value))));
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(x845),x846,IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x849.value))));
IkReal gconst34=((1.0)*x845*x847);
IkReal gconst35=((-1.0)*x846*x847);
IkReal x850=((r01*r01)+(r02*r02));
j7eval[0]=x850;
j7eval[1]=IKsign(x850);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x851=gconst34*gconst34;
IkReal x852=gconst35*gconst35;
IkReal x853=(gconst34*gconst35);
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*gconst34*r01))+(((0.997495519808809)*gconst34*r02))+(((-0.997495519808809)*gconst35*r01))+(((0.0707296823218818)*gconst35*r02)))),-1);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(((((0.141105082467155)*x853))+(((-0.994997312038646)*x852))+(((-0.00500268796135431)*x851))+(r02*r02))),((((0.0705525412335773)*x851))+(((-0.989994624077291)*x853))+((r01*r02))+(((-0.0705525412335773)*x852))),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x854.value)))+(x855.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x856=IKsin(j7);
IkReal x857=IKcos(j7);
IkReal x858=((0.0707296823218818)*gconst34);
IkReal x859=((0.997495519808809)*gconst34);
IkReal x860=((0.0707296823218818)*gconst35);
IkReal x861=((0.997495519808809)*gconst35);
IkReal x862=((1.0)*r01);
IkReal x863=((1.0)*r02);
evalcond[0]=((((-1.0)*x858))+(((-1.0)*x856*x862))+((r02*x857))+x861);
evalcond[1]=((((-1.0)*x856*x863))+x859+x860+(((-1.0)*x857*x862)));
evalcond[2]=(((x856*x858))+r01+(((-1.0)*x856*x861))+(((-1.0)*x857*x859))+(((-1.0)*x857*x860)));
evalcond[3]=((((-1.0)*x863))+((x856*x860))+((x856*x859))+((x857*x858))+(((-1.0)*x857*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x864=(gconst34*r02);
IkReal x865=((0.997495519808809)*r01);
IkReal x866=(gconst35*r02);
IkReal x867=((0.0707296823218818)*r01);
CheckValue<IkReal> x868 = IKatan2WithCheck(IkReal(((((-1.0)*gconst34*x867))+(((0.997495519808809)*x864))+(((0.0707296823218818)*x866))+((gconst35*x865)))),((((-0.997495519808809)*x866))+(((0.0707296823218818)*x864))+((gconst35*x867))+((gconst34*x865))),IKFAST_ATAN2_MAGTHRESH);
if(!x868.valid){
continue;
}
CheckValue<IkReal> x869=IKPowWithIntegerCheck(IKsign(((r01*r01)+(r02*r02))),-1);
if(!x869.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x868.value)+(((1.5707963267949)*(x869.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x870=IKsin(j7);
IkReal x871=IKcos(j7);
IkReal x872=((0.0707296823218818)*gconst34);
IkReal x873=((0.997495519808809)*gconst34);
IkReal x874=((0.0707296823218818)*gconst35);
IkReal x875=((0.997495519808809)*gconst35);
IkReal x876=((1.0)*r01);
IkReal x877=((1.0)*r02);
evalcond[0]=(((r02*x871))+(((-1.0)*x870*x876))+x875+(((-1.0)*x872)));
evalcond[1]=((((-1.0)*x871*x876))+(((-1.0)*x870*x877))+x873+x874);
evalcond[2]=(((x870*x872))+(((-1.0)*x871*x874))+(((-1.0)*x871*x873))+(((-1.0)*x870*x875))+r01);
evalcond[3]=(((x871*x872))+((x870*x874))+((x870*x873))+(((-1.0)*x871*x875))+(((-1.0)*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x878=cj8*cj8;
IkReal x879=(cj8*sj8);
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(((0.0705525412335773)+(((-0.989994624077291)*x879))+(((-0.141105082467155)*x878))+(((-1.0)*r01*r02)))),((0.00500268796135431)+(((0.989994624077291)*x878))+(((-0.141105082467155)*x879))+(((-1.0)*(r01*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(IKsign(((((-0.997495519808809)*cj8*r02))+(((-0.997495519808809)*r01*sj8))+(((0.0707296823218818)*r02*sj8))+(((-0.0707296823218818)*cj8*r01)))),-1);
if(!x881.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x880.value)+(((1.5707963267949)*(x881.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x882=IKsin(j7);
IkReal x883=IKcos(j7);
IkReal x884=((1.0)*r01);
IkReal x885=((0.997495519808809)*sj8);
IkReal x886=((1.0)*r02);
IkReal x887=((0.0707296823218818)*sj8);
IkReal x888=(cj8*x883);
IkReal x889=(cj8*x882);
IkReal x890=(sj8*x883);
evalcond[0]=(((r02*x883))+(((-1.0)*x882*x884))+(((-1.0)*x887))+(((0.997495519808809)*cj8)));
evalcond[1]=((((-1.0)*x883*x884))+(((0.0707296823218818)*cj8))+(((-1.0)*x882*x886))+x885);
evalcond[2]=((((-1.0)*x883*x885))+(((-0.0707296823218818)*x888))+((x882*x887))+(((-0.997495519808809)*x889))+r01);
evalcond[3]=(((x883*x887))+((x882*x885))+(((-1.0)*x886))+(((-0.997495519808809)*x888))+(((0.0707296823218818)*x889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x891=cj8*cj8;
IkReal x892=(cj8*sj8);
CheckValue<IkReal> x893=IKPowWithIntegerCheck(IKsign(((((-0.0707296823218818)*r01*sj8))+(((-0.0707296823218818)*cj8*r02))+(((-0.997495519808809)*r02*sj8))+(((0.997495519808809)*cj8*r01)))),-1);
if(!x893.valid){
continue;
}
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal(((-0.994997312038646)+(((-0.141105082467155)*x892))+(r01*r01)+(((0.989994624077291)*x891)))),((-0.0705525412335773)+(((0.141105082467155)*x891))+(((0.989994624077291)*x892))+(((-1.0)*r01*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x893.value)))+(x894.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x895=IKsin(j7);
IkReal x896=IKcos(j7);
IkReal x897=((1.0)*r01);
IkReal x898=((0.997495519808809)*sj8);
IkReal x899=((1.0)*r02);
IkReal x900=((0.0707296823218818)*sj8);
IkReal x901=(cj8*x896);
IkReal x902=(cj8*x895);
IkReal x903=(sj8*x896);
evalcond[0]=(((r02*x896))+(((-1.0)*x895*x897))+(((-1.0)*x900))+(((0.997495519808809)*cj8)));
evalcond[1]=((((0.0707296823218818)*cj8))+(((-1.0)*x896*x897))+(((-1.0)*x895*x899))+x898);
evalcond[2]=(((x895*x900))+(((-1.0)*x896*x898))+(((-0.997495519808809)*x902))+(((-0.0707296823218818)*x901))+r01);
evalcond[3]=((((0.0707296823218818)*x902))+((x895*x898))+(((-1.0)*x899))+(((-0.997495519808809)*x901))+((x896*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x904=cj8*cj8;
IkReal x905=(cj8*sj8);
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(((-0.00500268796135431)+(((-0.989994624077291)*x904))+(((0.141105082467155)*x905))+(r02*r02))),((0.0705525412335773)+(((-0.989994624077291)*x905))+(((-0.141105082467155)*x904))+((r01*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907=IKPowWithIntegerCheck(IKsign(((((0.0707296823218818)*cj8*r02))+(((-0.997495519808809)*cj8*r01))+(((0.0707296823218818)*r01*sj8))+(((0.997495519808809)*r02*sj8)))),-1);
if(!x907.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x906.value)+(((1.5707963267949)*(x907.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x908=IKsin(j7);
IkReal x909=IKcos(j7);
IkReal x910=((1.0)*r01);
IkReal x911=((0.997495519808809)*sj8);
IkReal x912=((1.0)*r02);
IkReal x913=((0.0707296823218818)*sj8);
IkReal x914=(cj8*x909);
IkReal x915=(cj8*x908);
IkReal x916=(sj8*x909);
evalcond[0]=((((-1.0)*x908*x910))+((r02*x909))+(((-1.0)*x913))+(((0.997495519808809)*cj8)));
evalcond[1]=((((0.0707296823218818)*cj8))+(((-1.0)*x908*x912))+x911+(((-1.0)*x909*x910)));
evalcond[2]=((((-0.997495519808809)*x915))+r01+((x908*x913))+(((-0.0707296823218818)*x914))+(((-1.0)*x909*x911)));
evalcond[3]=(((x909*x913))+(((0.0707296823218818)*x915))+(((-1.0)*x912))+(((-0.997495519808809)*x914))+((x908*x911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x917=cj6*cj6;
IkReal x918=cj8*cj8;
IkReal x919=((0.141105082467155)*sj6);
IkReal x920=(cj8*sj8);
IkReal x921=(cj8*sj6);
IkReal x922=(cj6*r01);
IkReal x923=((0.989994624077291)*sj6);
IkReal x924=((0.997495519808809)*sj8);
IkReal x925=((0.0707296823218818)*cj8*r00);
CheckValue<IkReal> x926=IKPowWithIntegerCheck(IKsign(((((0.997495519808809)*r02*x921))+(((-1.0)*r00*x917*x924))+(((-1.0)*sj6*x922*x924))+(((-0.0707296823218818)*x921*x922))+(((-0.0707296823218818)*r02*sj6*sj8))+((r00*x924))+x925+(((-1.0)*x917*x925)))),-1);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927 = IKatan2WithCheck(IkReal((((x920*x923))+(((-0.0705525412335773)*sj6))+((x918*x919))+((r00*r02)))),(((x919*x920))+((sj6*(r00*r00)))+(((-0.00500268796135431)*sj6))+(((-1.0)*x918*x923))+(((-1.0)*r00*x922))),IKFAST_ATAN2_MAGTHRESH);
if(!x927.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x926.value)))+(x927.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x928=IKsin(j7);
IkReal x929=IKcos(j7);
IkReal x930=((1.0)*r01);
IkReal x931=(r00*sj6);
IkReal x932=((0.0707296823218818)*sj8);
IkReal x933=((0.997495519808809)*cj8);
IkReal x934=((0.0707296823218818)*cj8);
IkReal x935=((0.997495519808809)*sj8);
IkReal x936=(cj6*x928);
IkReal x937=(sj6*x928);
IkReal x938=(cj6*x929);
IkReal x939=(sj6*x929);
IkReal x940=((1.0)*x928);
evalcond[0]=(((r01*x936))+(((-1.0)*x931*x940))+x933+((r02*x929))+(((-1.0)*x932)));
evalcond[1]=((((-1.0)*r02*x940))+((r01*x938))+(((-1.0)*x929*x931))+x935+x934);
evalcond[2]=(((x928*x935))+((x928*x934))+(((-1.0)*r02))+(((-1.0)*x929*x933))+((x929*x932)));
evalcond[3]=((((-1.0)*x928*x933))+((x928*x932))+(((-1.0)*cj6*x930))+(((-1.0)*x929*x934))+(((-1.0)*x929*x935))+x931);
evalcond[4]=((((-1.0)*r00))+((x935*x939))+(((-1.0)*x932*x937))+((x934*x939))+((x933*x937)));
evalcond[5]=((((-1.0)*x935*x938))+(((-1.0)*x934*x938))+(((-1.0)*x933*x936))+((x932*x936))+(((-1.0)*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x941=cj8*cj8;
IkReal x942=((0.997495519808809)*sj8);
IkReal x943=(cj6*r01);
IkReal x944=(r00*sj6);
IkReal x945=((0.0707296823218818)*cj8);
IkReal x946=(cj8*sj8);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((((-1.0)*x942*x944))+((x943*x945))+((x942*x943))+(((-0.997495519808809)*cj8*r02))+(((-1.0)*x944*x945))+(((0.0707296823218818)*r02*sj8)))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((0.0705525412335773)+((r02*x943))+(((-0.141105082467155)*x941))+(((-1.0)*r02*x944))+(((-0.989994624077291)*x946)))),((-0.994997312038646)+(((-0.141105082467155)*x946))+(((0.989994624077291)*x941))+(r02*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x947.value)))+(x948.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x949=IKsin(j7);
IkReal x950=IKcos(j7);
IkReal x951=((1.0)*r01);
IkReal x952=(r00*sj6);
IkReal x953=((0.0707296823218818)*sj8);
IkReal x954=((0.997495519808809)*cj8);
IkReal x955=((0.0707296823218818)*cj8);
IkReal x956=((0.997495519808809)*sj8);
IkReal x957=(cj6*x949);
IkReal x958=(sj6*x949);
IkReal x959=(cj6*x950);
IkReal x960=(sj6*x950);
IkReal x961=((1.0)*x949);
evalcond[0]=(((r01*x957))+((r02*x950))+(((-1.0)*x952*x961))+(((-1.0)*x953))+x954);
evalcond[1]=(((r01*x959))+(((-1.0)*x950*x952))+x956+x955+(((-1.0)*r02*x961)));
evalcond[2]=((((-1.0)*r02))+((x949*x955))+((x949*x956))+(((-1.0)*x950*x954))+((x950*x953)));
evalcond[3]=((((-1.0)*cj6*x951))+((x949*x953))+(((-1.0)*x950*x955))+(((-1.0)*x950*x956))+(((-1.0)*x949*x954))+x952);
evalcond[4]=((((-1.0)*r00))+(((-1.0)*x953*x958))+((x956*x960))+((x955*x960))+((x954*x958)));
evalcond[5]=((((-1.0)*x956*x959))+(((-1.0)*x954*x957))+(((-1.0)*x951))+(((-1.0)*x955*x959))+((x953*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x962=cj8*cj8;
IkReal x963=(cj6*r01);
IkReal x964=((0.0707296823218818)*sj8);
IkReal x965=(r00*sj6);
IkReal x966=((0.997495519808809)*cj8);
IkReal x967=(cj8*sj8);
CheckValue<IkReal> x968=IKPowWithIntegerCheck(IKsign(((((-1.0)*x965*x966))+(((-1.0)*x963*x964))+(((0.0707296823218818)*cj8*r02))+((x964*x965))+(((0.997495519808809)*r02*sj8))+((x963*x966)))),-1);
if(!x968.valid){
continue;
}
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(((-0.00500268796135431)+(((0.141105082467155)*x967))+(((-0.989994624077291)*x962))+(r02*r02))),((0.0705525412335773)+(((-0.141105082467155)*x962))+(((-0.989994624077291)*x967))+((r02*x965))+(((-1.0)*r02*x963))),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x968.value)))+(x969.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x970=IKsin(j7);
IkReal x971=IKcos(j7);
IkReal x972=((1.0)*r01);
IkReal x973=(r00*sj6);
IkReal x974=((0.0707296823218818)*sj8);
IkReal x975=((0.997495519808809)*cj8);
IkReal x976=((0.0707296823218818)*cj8);
IkReal x977=((0.997495519808809)*sj8);
IkReal x978=(cj6*x970);
IkReal x979=(sj6*x970);
IkReal x980=(cj6*x971);
IkReal x981=(sj6*x971);
IkReal x982=((1.0)*x970);
evalcond[0]=(((r01*x978))+((r02*x971))+x975+(((-1.0)*x973*x982))+(((-1.0)*x974)));
evalcond[1]=(((r01*x980))+(((-1.0)*x971*x973))+(((-1.0)*r02*x982))+x977+x976);
evalcond[2]=((((-1.0)*r02))+(((-1.0)*x971*x975))+((x971*x974))+((x970*x976))+((x970*x977)));
evalcond[3]=((((-1.0)*cj6*x972))+(((-1.0)*x971*x976))+(((-1.0)*x971*x977))+(((-1.0)*x970*x975))+((x970*x974))+x973);
evalcond[4]=(((x975*x979))+((x977*x981))+(((-1.0)*r00))+((x976*x981))+(((-1.0)*x974*x979)));
evalcond[5]=(((x974*x978))+(((-1.0)*x977*x980))+(((-1.0)*x976*x980))+(((-1.0)*x975*x978))+(((-1.0)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "3477af610a9b87850ed8c63903a7fe6e"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
