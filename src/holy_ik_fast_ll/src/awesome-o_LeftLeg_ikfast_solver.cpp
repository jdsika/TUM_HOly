/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-06-11 17:38:03.733730
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((0.03)*x6);
x13=((1.0)*x6);
x14=((1.0)*x8);
x15=((1.0)*x1);
x16=((0.045)*x2);
x17=((0.03)*x5);
x18=((0.08)*x1);
x19=((1.0)*x9);
x20=((1.0)*x7);
x21=(x10*x5);
x22=(x10*x4);
x23=(x0*x4);
x24=(x3*x4);
x25=(x2*x3);
x26=(x10*x11);
x27=(x0*x2);
x28=(x1*x10);
x29=(x0*x1);
x30=((1.0)*x24);
x31=((0.045)*x1*x3);
x32=(x13*x22);
x33=(((x1*x3))+((x2*x23)));
x34=((((-1.0)*x30))+((x1*x27)));
x35=((((-1.0)*x0*x15))+((x2*x24)));
x36=(((x1*x25))+x23);
x37=((((-1.0)*x15*x27))+x30);
x38=((((-1.0)*x15*x25))+(((-1.0)*x23)));
x39=(x34*x6);
x40=(x35*x5);
x41=(x33*x5);
x42=(x35*x6);
x43=((((-1.0)*x21*x4))+(((-1.0)*x13*x28)));
x44=(x38*x5);
x45=(x40+((x36*x6)));
x46=(((x33*x6))+((x37*x5)));
x47=((((-1.0)*x20*x43))+((x14*(((((-1.0)*x1*x21))+x32)))));
x48=(((x46*x8))+((x7*((x39+x41)))));
x49=((((-1.0)*x20*x45))+((x14*(((((-1.0)*x44))+(((-1.0)*x42)))))));
eerot[0]=(((x0*x10*x9))+((x11*x48)));
eerot[1]=(((x8*(((((-1.0)*x41))+(((-1.0)*x13*x34))))))+((x46*x7)));
eerot[2]=((((-1.0)*x0*x26))+((x48*x9)));
IkReal x50=((1.0)*x12);
IkReal x51=((1.0)*x16);
IkReal x52=((1.0)*x17);
eetrans[0]=((-0.03)+((x6*(((((-1.0)*x29*x51))+(((0.045)*x24))))))+((x7*(((((-1.0)*x34*x50))+(((-1.0)*x33*x52))))))+(((-1.0)*x18*x27))+((x5*(((((-1.0)*x31))+(((-1.0)*x23*x51))))))+(((0.08)*x24))+((x8*(((((-1.0)*x33*x50))+(((-1.0)*x37*x52)))))));
eerot[3]=(((x11*x49))+(((-1.0)*x10*x19*x3)));
eerot[4]=(((x7*(((((-1.0)*x44))+(((-1.0)*x42))))))+((x45*x8)));
eerot[5]=(((x49*x9))+((x26*x3)));
eetrans[1]=(((x18*x25))+((x6*((((x1*x16*x3))+(((0.045)*x23))))))+(((0.08)*x23))+((x7*((((x17*x35))+((x12*x36))))))+((x8*((((x17*x38))+((x12*x35))))))+((x5*(((((-0.045)*x29))+((x16*x24)))))));
eerot[6]=((((-1.0)*x19*x2))+((x11*x47)));
eerot[7]=(((x43*x8))+((x7*(((((-1.0)*x15*x21))+x32)))));
eerot[8]=(((x47*x9))+((x11*x2)));
IkReal x53=((1.0)*x12);
eetrans[2]=((-0.06)+((x7*(((((-1.0)*x17*x22))+(((-1.0)*x28*x53))))))+((x8*((((x17*x28))+(((-1.0)*x22*x53))))))+(((-0.045)*x28*x6))+(((-0.045)*x21*x4))+(((-1.0)*x10*x18)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r02;
new_r02=((-1.0)*r01);
new_px=((0.03)+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((-1.0)*py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.06)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
{
IkReal j5eval[1];
j5eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j4, j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(((-1.0)*npx)),npy,IKFAST_ATAN2_MAGTHRESH);
if(!x58.valid){
continue;
}
IkReal x57=x58.value;
j5array[0]=((-1.0)*x57);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x57)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.04513888888889)+(((8.33333333333333)*cj5*npy))+(((8.33333333333333)*npx*sj5))+(((138.888888888889)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j4eval[3];
IkReal x59=((75.0)*npz);
IkReal x60=((1250.0)*pp);
j4eval[0]=((1.17013888888889)+cj3);
j4eval[1]=((IKabs(((((11.65625)*sj3))+(((-42.1875)*npz))+(((9.0)*cj3*sj3))+(((-1.0)*sj3*x60))+(((-1.0)*cj3*x59)))))+(IKabs(((-6.556640625)+(((-16.71875)*cj3))+(((703.125)*pp))+(((-1.0)*sj3*x59))+(((-9.0)*(cj3*cj3)))+((cj3*x60))))));
j4eval[2]=IKsign(((7.8984375)+(((6.75)*cj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x61=((50.0)*sj3);
IkReal x62=(npx*sj5);
IkReal x63=(cj5*npy);
IkReal x64=((50.0)*cj3);
j4eval[0]=((1.17013888888889)+cj3);
j4eval[1]=IKsign(((5.265625)+(((4.5)*cj3))));
j4eval[2]=((IKabs((((x61*x62))+((x61*x63))+(((-1.0)*npz*x64))+(((1.5)*sj3))+(((-28.125)*npz)))))+(IKabs(((-0.84375)+(((-28.125)*x63))+(((-28.125)*x62))+(((-1.0)*npz*x61))+(((-1.5)*cj3))+(((-1.0)*x63*x64))+(((-1.0)*x62*x64))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x65=(npx*sj5);
IkReal x66=((2.0)*cj3);
IkReal x67=(cj5*npy);
IkReal x68=((59.2592592592593)*cj3);
IkReal x69=(npz*sj3);
IkReal x70=((25.0)*npz);
j4eval[0]=((1.0)+(((33.3333333333333)*x65))+(((33.3333333333333)*x67))+(((1.77777777777778)*cj3))+((x67*x68))+(((-59.2592592592593)*x69))+((x65*x68)));
j4eval[1]=IKsign(((0.03375)+(((-2.0)*x69))+(((1.125)*x65))+(((1.125)*x67))+((x66*x67))+(((0.06)*cj3))+((x65*x66))));
j4eval[2]=((IKabs(((((0.09)*sj3))+(((-1.0)*x67*x70))+(((-0.75)*npz))+(((0.16)*cj3*sj3))+(((-1.0)*x65*x70)))))+(IKabs(((-0.050625)+(((-0.16)*(cj3*cj3)))+((npz*x70))+(((-0.18)*cj3))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x71=((2.0)*cj3);
IkReal x72=(npx*sj5);
IkReal x73=(cj5*npy);
IkReal x74=((25.0)*npz);
CheckValue<IkReal> x75=IKPowWithIntegerCheck(IKsign(((0.03375)+(((1.125)*x73))+(((1.125)*x72))+(((-2.0)*npz*sj3))+(((0.06)*cj3))+((x71*x72))+((x71*x73)))),-1);
if(!x75.valid){
continue;
}
CheckValue<IkReal> x76 = IKatan2WithCheck(IkReal(((((0.09)*sj3))+(((-1.0)*x72*x74))+(((-1.0)*x73*x74))+(((-0.75)*npz))+(((0.16)*cj3*sj3)))),((-0.050625)+(((-0.16)*(cj3*cj3)))+((npz*x74))+(((-0.18)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x76.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x75.value)))+(x76.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x77=IKsin(j4);
IkReal x78=IKcos(j4);
IkReal x79=((0.08)*cj3);
IkReal x80=(npx*sj5);
IkReal x81=((0.08)*sj3);
IkReal x82=(cj5*npy);
IkReal x83=((1.0)*x77);
IkReal x84=(sj3*x77);
IkReal x85=((1.0)*x78);
evalcond[0]=((((-0.045)*x77))+(((-1.0)*npz))+(((-1.0)*x78*x81))+(((-1.0)*x77*x79)));
evalcond[1]=((-0.009325)+(((0.0048)*x84))+(((-0.0027)*x78))+pp+(((-0.0048)*cj3*x78))+(((-0.0072)*cj3)));
evalcond[2]=((-0.03)+((x77*x81))+(((-0.045)*x78))+(((-1.0)*x78*x79))+(((-1.0)*x82))+(((-1.0)*x80)));
evalcond[3]=((((-1.0)*x82*x83))+(((-1.0)*x80*x83))+x81+((npz*x78))+(((-0.03)*x77)));
evalcond[4]=((-0.045)+(((-1.0)*x82*x85))+(((-1.0)*x80*x85))+(((-1.0)*x79))+(((-0.03)*x78))+(((-1.0)*npz*x83)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x970=((50.0)*sj3);
IkReal x971=(npx*sj5);
IkReal x972=(cj5*npy);
IkReal x973=((50.0)*cj3);
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign(((5.265625)+(((4.5)*cj3)))),-1);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(((((-1.0)*npz*x973))+(((1.5)*sj3))+(((-28.125)*npz))+((x970*x972))+((x970*x971)))),((-0.84375)+(((-1.0)*x971*x973))+(((-1.0)*npz*x970))+(((-1.0)*x972*x973))+(((-1.5)*cj3))+(((-28.125)*x972))+(((-28.125)*x971))),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x974.value)))+(x975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x976=IKsin(j4);
IkReal x977=IKcos(j4);
IkReal x978=((0.08)*cj3);
IkReal x979=(npx*sj5);
IkReal x980=((0.08)*sj3);
IkReal x981=(cj5*npy);
IkReal x982=((1.0)*x976);
IkReal x983=(sj3*x976);
IkReal x984=((1.0)*x977);
evalcond[0]=((((-0.045)*x976))+(((-1.0)*npz))+(((-1.0)*x976*x978))+(((-1.0)*x977*x980)));
evalcond[1]=((-0.009325)+(((-0.0027)*x977))+pp+(((-0.0048)*cj3*x977))+(((-0.0072)*cj3))+(((0.0048)*x983)));
evalcond[2]=((-0.03)+(((-1.0)*x981))+(((-1.0)*x979))+(((-0.045)*x977))+((x976*x980))+(((-1.0)*x977*x978)));
evalcond[3]=(((npz*x977))+(((-1.0)*x981*x982))+(((-1.0)*x979*x982))+x980+(((-0.03)*x976)));
evalcond[4]=((-0.045)+(((-1.0)*npz*x982))+(((-1.0)*x981*x984))+(((-1.0)*x979*x984))+(((-0.03)*x977))+(((-1.0)*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x985=((1250.0)*pp);
IkReal x986=((75.0)*npz);
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(((((11.65625)*sj3))+(((-42.1875)*npz))+(((-1.0)*cj3*x986))+(((9.0)*cj3*sj3))+(((-1.0)*sj3*x985)))),((-6.556640625)+(((-16.71875)*cj3))+(((703.125)*pp))+(((-1.0)*sj3*x986))+((cj3*x985))+(((-9.0)*(cj3*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
CheckValue<IkReal> x988=IKPowWithIntegerCheck(IKsign(((7.8984375)+(((6.75)*cj3)))),-1);
if(!x988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x987.value)+(((1.5707963267949)*(x988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x989=IKsin(j4);
IkReal x990=IKcos(j4);
IkReal x991=((0.08)*cj3);
IkReal x992=(npx*sj5);
IkReal x993=((0.08)*sj3);
IkReal x994=(cj5*npy);
IkReal x995=((1.0)*x989);
IkReal x996=(sj3*x989);
IkReal x997=((1.0)*x990);
evalcond[0]=((((-0.045)*x989))+(((-1.0)*npz))+(((-1.0)*x990*x993))+(((-1.0)*x989*x991)));
evalcond[1]=((-0.009325)+(((-0.0048)*cj3*x990))+(((0.0048)*x996))+pp+(((-0.0072)*cj3))+(((-0.0027)*x990)));
evalcond[2]=((-0.03)+(((-1.0)*x992))+(((-1.0)*x994))+((x989*x993))+(((-1.0)*x990*x991))+(((-0.045)*x990)));
evalcond[3]=((((-1.0)*x994*x995))+(((-1.0)*x992*x995))+((npz*x990))+x993+(((-0.03)*x989)));
evalcond[4]=((-0.045)+(((-0.03)*x990))+(((-1.0)*x994*x997))+(((-1.0)*x992*x997))+(((-1.0)*x991))+(((-1.0)*npz*x995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x86=((1.0)*cj3);
IkReal x87=((1.0)*sj5);
IkReal x88=((1.0)*cj4);
IkReal x89=(((r00*sj5))+((cj5*r01)));
IkReal x90=(((cj5*r11))+((r10*sj5)));
IkReal x91=(((cj5*r21))+((r20*sj5)));
IkReal x92=((((-1.0)*r02*x88))+((sj4*x89)));
IkReal x93=(((r02*sj4))+((cj4*x89)));
IkReal x94=(((r12*sj4))+((cj4*x90)));
IkReal x95=((((-1.0)*r12*x88))+((sj4*x90)));
IkReal x96=(((r22*sj4))+((cj4*x91)));
IkReal x97=((((-1.0)*r22*x88))+((sj4*x91)));
new_r00=(((sj3*x92))+(((-1.0)*x86*x93)));
new_r01=(((sj3*x93))+((cj3*x92)));
new_r02=((((-1.0)*r01*x87))+((cj5*r00)));
new_r10=(((sj3*x95))+(((-1.0)*x86*x94)));
new_r11=(((sj3*x94))+((cj3*x95)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x87)));
new_r20=(((sj3*x97))+(((-1.0)*x86*x96)));
new_r21=(((sj3*x96))+((cj3*x97)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x87)));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=new_r22;
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x98=((1.0)*cj3);
IkReal x99=((1.0)*sj5);
IkReal x100=((1.0)*cj4);
IkReal x101=x89;
IkReal x102=x90;
IkReal x103=x91;
IkReal x104=(((sj4*x101))+(((-1.0)*r02*x100)));
IkReal x105=(((r02*sj4))+((cj4*x101)));
IkReal x106=(((r12*sj4))+((cj4*x102)));
IkReal x107=((((-1.0)*r12*x100))+((sj4*x102)));
IkReal x108=(((r22*sj4))+((cj4*x103)));
IkReal x109=(((sj4*x103))+(((-1.0)*r22*x100)));
new_r00=(((sj3*x104))+(((-1.0)*x105*x98)));
new_r01=(((cj3*x104))+((sj3*x105)));
new_r02=((((-1.0)*r01*x99))+((cj5*r00)));
new_r10=(((sj3*x107))+(((-1.0)*x106*x98)));
new_r11=(((cj3*x107))+((sj3*x106)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x99)));
new_r20=(((sj3*x109))+(((-1.0)*x108*x98)));
new_r21=(((cj3*x109))+((sj3*x108)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x99)));
IkReal x110=((1.0)*sj5);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x110))+((cj5*r00)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*x110))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x111=((1.0)*cj3);
IkReal x112=((1.0)*sj5);
IkReal x113=((1.0)*cj4);
IkReal x114=x89;
IkReal x115=x90;
IkReal x116=x91;
IkReal x117=(((sj4*x114))+(((-1.0)*r02*x113)));
IkReal x118=(((r02*sj4))+((cj4*x114)));
IkReal x119=(((r12*sj4))+((cj4*x115)));
IkReal x120=((((-1.0)*r12*x113))+((sj4*x115)));
IkReal x121=(((r22*sj4))+((cj4*x116)));
IkReal x122=(((sj4*x116))+(((-1.0)*r22*x113)));
new_r00=((((-1.0)*x111*x118))+((sj3*x117)));
new_r01=(((cj3*x117))+((sj3*x118)));
new_r02=((((-1.0)*r01*x112))+((cj5*r00)));
new_r10=((((-1.0)*x111*x119))+((sj3*x120)));
new_r11=(((sj3*x119))+((cj3*x120)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x112)));
new_r20=((((-1.0)*x111*x121))+((sj3*x122)));
new_r21=(((cj3*x122))+((sj3*x121)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x112)));
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x123=((1.0)*cj3);
IkReal x124=((1.0)*sj5);
IkReal x125=((1.0)*cj4);
IkReal x126=x89;
IkReal x127=x90;
IkReal x128=x91;
IkReal x129=((((-1.0)*r02*x125))+((sj4*x126)));
IkReal x130=(((r02*sj4))+((cj4*x126)));
IkReal x131=(((r12*sj4))+((cj4*x127)));
IkReal x132=((((-1.0)*r12*x125))+((sj4*x127)));
IkReal x133=(((r22*sj4))+((cj4*x128)));
IkReal x134=((((-1.0)*r22*x125))+((sj4*x128)));
new_r00=((((-1.0)*x123*x130))+((sj3*x129)));
new_r01=(((sj3*x130))+((cj3*x129)));
new_r02=(((cj5*r00))+(((-1.0)*r01*x124)));
new_r10=((((-1.0)*x123*x131))+((sj3*x132)));
new_r11=(((cj3*x132))+((sj3*x131)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x124)));
new_r20=((((-1.0)*x123*x133))+((sj3*x134)));
new_r21=(((cj3*x134))+((sj3*x133)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x124)));
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x135=((1.0)*cj3);
IkReal x136=((1.0)*sj5);
IkReal x137=((1.0)*cj4);
IkReal x138=x89;
IkReal x139=x90;
IkReal x140=x91;
IkReal x141=((((-1.0)*r02*x137))+((sj4*x138)));
IkReal x142=(((r02*sj4))+((cj4*x138)));
IkReal x143=(((r12*sj4))+((cj4*x139)));
IkReal x144=((((-1.0)*r12*x137))+((sj4*x139)));
IkReal x145=(((r22*sj4))+((cj4*x140)));
IkReal x146=(((sj4*x140))+(((-1.0)*r22*x137)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj3*x141))+(((-1.0)*x135*x142)));
new_r01=(((cj3*x141))+((sj3*x142)));
new_r02=((((-1.0)*r01*x136))+((cj5*r00)));
new_r10=(((sj3*x144))+(((-1.0)*x135*x143)));
new_r11=(((cj3*x144))+((sj3*x143)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x136)));
new_r20=(((sj3*x146))+(((-1.0)*x135*x145)));
new_r21=(((cj3*x146))+((sj3*x145)));
new_r22=((((-1.0)*r21*x136))+((cj5*r20)));
IkReal x147=((1.0)*sj5);
j0eval[0]=((IKabs(((((-1.0)*r01*x147))+((cj5*r00)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*x147))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x148=((1.0)*cj3);
IkReal x149=((1.0)*sj5);
IkReal x150=((1.0)*cj4);
IkReal x151=x89;
IkReal x152=x90;
IkReal x153=x91;
IkReal x154=(((sj4*x151))+(((-1.0)*r02*x150)));
IkReal x155=(((cj4*x151))+((r02*sj4)));
IkReal x156=(((cj4*x152))+((r12*sj4)));
IkReal x157=(((sj4*x152))+(((-1.0)*r12*x150)));
IkReal x158=(((cj4*x153))+((r22*sj4)));
IkReal x159=(((sj4*x153))+(((-1.0)*r22*x150)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=((((-1.0)*x148*x155))+((sj3*x154)));
new_r01=(((cj3*x154))+((sj3*x155)));
new_r02=((((-1.0)*r01*x149))+((cj5*r00)));
new_r10=((((-1.0)*x148*x156))+((sj3*x157)));
new_r11=(((cj3*x157))+((sj3*x156)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x149)));
new_r20=((((-1.0)*x148*x158))+((sj3*x159)));
new_r21=(((cj3*x159))+((sj3*x158)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x149)));
j0eval[0]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x161.valid){
continue;
}
IkReal x160=x161.value;
j0array[0]=((-1.0)*x160);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x160)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j0))))+((new_r12*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x162=((1.0)*cj0);
if( IKabs((((new_r00*sj0))+(((-1.0)*new_r10*x162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x162))+(((-1.0)*new_r10*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj0))+(((-1.0)*new_r10*x162))))+IKsqr(((((-1.0)*new_r00*x162))+(((-1.0)*new_r10*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r00*sj0))+(((-1.0)*new_r10*x162))), ((((-1.0)*new_r00*x162))+(((-1.0)*new_r10*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x163=IKcos(j2);
IkReal x164=IKsin(j2);
IkReal x165=((1.0)*sj0);
IkReal x166=(cj0*x163);
IkReal x167=(cj0*x164);
IkReal x168=(x164*x165);
evalcond[0]=(((new_r10*sj0))+x163+((cj0*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x165))+x164+((cj0*new_r10)));
evalcond[2]=(x163+((cj0*new_r11))+(((-1.0)*new_r01*x165)));
evalcond[3]=(((sj0*x163))+x167+new_r10);
evalcond[4]=(((new_r11*sj0))+(((-1.0)*x164))+((cj0*new_r01)));
evalcond[5]=((((-1.0)*x168))+x166+new_r00);
evalcond[6]=((((-1.0)*x168))+x166+new_r11);
evalcond[7]=((((-1.0)*x163*x165))+(((-1.0)*x167))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
IkReal x169=x170.value;
j0array[0]=((-1.0)*x169);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x169)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j0))))+((new_r12*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x171=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r10*x171))+((new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*sj0))+(((-1.0)*new_r00*x171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x171))+((new_r00*sj0))))+IKsqr(((((-1.0)*new_r10*sj0))+(((-1.0)*new_r00*x171))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r10*x171))+((new_r00*sj0))), ((((-1.0)*new_r10*sj0))+(((-1.0)*new_r00*x171))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x172=IKcos(j2);
IkReal x173=IKsin(j2);
IkReal x174=((1.0)*sj0);
IkReal x175=(cj0*x172);
IkReal x176=(cj0*x173);
IkReal x177=(x173*x174);
evalcond[0]=(((new_r10*sj0))+x172+((cj0*new_r00)));
evalcond[1]=(x173+((cj0*new_r10))+(((-1.0)*new_r00*x174)));
evalcond[2]=(x172+(((-1.0)*new_r01*x174))+((cj0*new_r11)));
evalcond[3]=(((sj0*x172))+x176+new_r10);
evalcond[4]=(((new_r11*sj0))+(((-1.0)*x173))+((cj0*new_r01)));
evalcond[5]=((((-1.0)*x177))+x175+new_r00);
evalcond[6]=((((-1.0)*x177))+x175+new_r11);
evalcond[7]=((((-1.0)*x176))+new_r01+(((-1.0)*x172*x174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x178=((1.0)*cj3);
IkReal x179=((1.0)*sj5);
IkReal x180=((1.0)*cj4);
IkReal x181=x89;
IkReal x182=x90;
IkReal x183=x91;
IkReal x184=((((-1.0)*r02*x180))+((sj4*x181)));
IkReal x185=(((r02*sj4))+((cj4*x181)));
IkReal x186=(((r12*sj4))+((cj4*x182)));
IkReal x187=((((-1.0)*r12*x180))+((sj4*x182)));
IkReal x188=(((r22*sj4))+((cj4*x183)));
IkReal x189=((((-1.0)*r22*x180))+((sj4*x183)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=((((-1.0)*x178*x185))+((sj3*x184)));
new_r01=(((sj3*x185))+((cj3*x184)));
new_r02=((((-1.0)*r01*x179))+((cj5*r00)));
new_r10=((((-1.0)*x178*x186))+((sj3*x187)));
new_r11=(((sj3*x186))+((cj3*x187)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x179)));
new_r20=((((-1.0)*x178*x188))+((sj3*x189)));
new_r21=(((sj3*x188))+((cj3*x189)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x179)));
IkReal x190=((1.0)*sj5);
j0eval[0]=((IKabs((((cj5*r10))+(((-1.0)*r11*x190)))))+(IKabs(((((-1.0)*r01*x190))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x191=((1.0)*cj3);
IkReal x192=((1.0)*sj5);
IkReal x193=((1.0)*cj4);
IkReal x194=x89;
IkReal x195=x90;
IkReal x196=x91;
IkReal x197=((((-1.0)*r02*x193))+((sj4*x194)));
IkReal x198=(((cj4*x194))+((r02*sj4)));
IkReal x199=(((cj4*x195))+((r12*sj4)));
IkReal x200=((((-1.0)*r12*x193))+((sj4*x195)));
IkReal x201=(((cj4*x196))+((r22*sj4)));
IkReal x202=((((-1.0)*r22*x193))+((sj4*x196)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj3*x197))+(((-1.0)*x191*x198)));
new_r01=(((sj3*x198))+((cj3*x197)));
new_r02=((((-1.0)*r01*x192))+((cj5*r00)));
new_r10=(((sj3*x200))+(((-1.0)*x191*x199)));
new_r11=(((sj3*x199))+((cj3*x200)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x192)));
new_r20=(((sj3*x202))+(((-1.0)*x191*x201)));
new_r21=(((sj3*x201))+((cj3*x202)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x192)));
j0eval[0]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
IkReal x203=x204.value;
j0array[0]=((-1.0)*x203);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x203)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j0))))+((new_r12*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x205=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r11*sj0))+(((-1.0)*new_r10*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj0))+(((-1.0)*new_r11*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj0))+(((-1.0)*new_r10*x205))))+IKsqr((((new_r10*sj0))+(((-1.0)*new_r11*x205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r11*sj0))+(((-1.0)*new_r10*x205))), (((new_r10*sj0))+(((-1.0)*new_r11*x205))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x206=IKsin(j2);
IkReal x207=IKcos(j2);
IkReal x208=((1.0)*sj0);
IkReal x209=(cj0*x206);
IkReal x210=((1.0)*x207);
IkReal x211=(x207*x208);
evalcond[0]=(((new_r11*sj0))+x206+((cj0*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x208))+x206+((cj0*new_r10)));
evalcond[2]=(x207+((cj0*new_r11))+(((-1.0)*new_r01*x208)));
evalcond[3]=(((new_r10*sj0))+((cj0*new_r00))+(((-1.0)*x210)));
evalcond[4]=(((sj0*x206))+((cj0*x207))+new_r11);
evalcond[5]=(x209+new_r10+(((-1.0)*x211)));
evalcond[6]=(x209+new_r01+(((-1.0)*x211)));
evalcond[7]=((((-1.0)*x206*x208))+(((-1.0)*cj0*x210))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x213 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x213.valid){
continue;
}
IkReal x212=x213.value;
j0array[0]=((-1.0)*x212);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x212)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j0))))+((new_r12*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x214=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r10*x214))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj0))+(((-1.0)*new_r11*x214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x214))+(((-1.0)*new_r11*sj0))))+IKsqr((((new_r10*sj0))+(((-1.0)*new_r11*x214))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r10*x214))+(((-1.0)*new_r11*sj0))), (((new_r10*sj0))+(((-1.0)*new_r11*x214))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x215=IKsin(j2);
IkReal x216=IKcos(j2);
IkReal x217=((1.0)*sj0);
IkReal x218=(cj0*x215);
IkReal x219=((1.0)*x216);
IkReal x220=(x216*x217);
evalcond[0]=(((new_r11*sj0))+x215+((cj0*new_r01)));
evalcond[1]=(x215+(((-1.0)*new_r00*x217))+((cj0*new_r10)));
evalcond[2]=(x216+(((-1.0)*new_r01*x217))+((cj0*new_r11)));
evalcond[3]=(((new_r10*sj0))+((cj0*new_r00))+(((-1.0)*x219)));
evalcond[4]=(((cj0*x216))+((sj0*x215))+new_r11);
evalcond[5]=(x218+new_r10+(((-1.0)*x220)));
evalcond[6]=(x218+new_r01+(((-1.0)*x220)));
evalcond[7]=((((-1.0)*cj0*x219))+new_r00+(((-1.0)*x215*x217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x222=IKPowWithIntegerCheck(cj1,-1);
if(!x222.valid){
continue;
}
IkReal x221=x222.value;
CheckValue<IkReal> x223=IKPowWithIntegerCheck(new_r12,-1);
if(!x223.valid){
continue;
}
CheckValue<IkReal> x224=IKPowWithIntegerCheck(x221,-2);
if(!x224.valid){
continue;
}
if( IKabs((x221*(x223.value)*(((((-1.0)*(new_r02*new_r02)))+(x224.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x221)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x221*(x223.value)*(((((-1.0)*(new_r02*new_r02)))+(x224.value)))))+IKsqr((new_r02*x221))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x221*(x223.value)*(((((-1.0)*(new_r02*new_r02)))+(x224.value)))), (new_r02*x221));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x225=IKcos(j0);
IkReal x226=IKsin(j0);
IkReal x227=(cj1*x225);
IkReal x228=(cj1*x226);
IkReal x229=((1.0)*x226);
IkReal x230=(new_r02*x225);
evalcond[0]=(new_r02+(((-1.0)*x227)));
evalcond[1]=(new_r12+(((-1.0)*x228)));
evalcond[2]=(((new_r12*x225))+(((-1.0)*new_r02*x229)));
evalcond[3]=(x230+((new_r12*x226))+(((-1.0)*cj1)));
evalcond[4]=(((new_r00*x227))+((new_r20*sj1))+((new_r10*x228)));
evalcond[5]=(((new_r01*x227))+((new_r11*x228))+((new_r21*sj1)));
evalcond[6]=((-1.0)+((new_r02*x227))+((new_r22*sj1))+((new_r12*x228)));
evalcond[7]=(((cj1*new_r22))+(((-1.0)*sj1*x230))+(((-1.0)*new_r12*sj1*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x231=((1.0)*cj3);
IkReal x232=((1.0)*sj5);
IkReal x233=((1.0)*cj4);
IkReal x234=x89;
IkReal x235=x90;
IkReal x236=x91;
IkReal x237=((((-1.0)*r02*x233))+((sj4*x234)));
IkReal x238=(((r02*sj4))+((cj4*x234)));
IkReal x239=(((cj4*x235))+((r12*sj4)));
IkReal x240=((((-1.0)*r12*x233))+((sj4*x235)));
IkReal x241=(((r22*sj4))+((cj4*x236)));
IkReal x242=((((-1.0)*r22*x233))+((sj4*x236)));
new_r00=((((-1.0)*x231*x238))+((sj3*x237)));
new_r01=(((cj3*x237))+((sj3*x238)));
new_r02=((((-1.0)*r01*x232))+((cj5*r00)));
new_r10=(((sj3*x240))+(((-1.0)*x231*x239)));
new_r11=(((cj3*x240))+((sj3*x239)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x232)));
new_r20=((((-1.0)*x231*x241))+((sj3*x242)));
new_r21=(((sj3*x241))+((cj3*x242)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x232)));
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x243=((1.0)*cj3);
IkReal x244=((1.0)*sj5);
IkReal x245=((1.0)*cj4);
IkReal x246=x89;
IkReal x247=x90;
IkReal x248=x91;
IkReal x249=((((-1.0)*r02*x245))+((sj4*x246)));
IkReal x250=(((cj4*x246))+((r02*sj4)));
IkReal x251=(((cj4*x247))+((r12*sj4)));
IkReal x252=((((-1.0)*r12*x245))+((sj4*x247)));
IkReal x253=(((cj4*x248))+((r22*sj4)));
IkReal x254=((((-1.0)*r22*x245))+((sj4*x248)));
new_r00=(((sj3*x249))+(((-1.0)*x243*x250)));
new_r01=(((sj3*x250))+((cj3*x249)));
new_r02=((((-1.0)*r01*x244))+((cj5*r00)));
new_r10=(((sj3*x252))+(((-1.0)*x243*x251)));
new_r11=(((cj3*x252))+((sj3*x251)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x244)));
new_r20=(((sj3*x254))+(((-1.0)*x243*x253)));
new_r21=(((cj3*x254))+((sj3*x253)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x244)));
j2eval[0]=cj1;
j2eval[1]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x255=((1.0)*cj3);
IkReal x256=((1.0)*sj5);
IkReal x257=((1.0)*cj4);
IkReal x258=x89;
IkReal x259=x90;
IkReal x260=x91;
IkReal x261=(((sj4*x258))+(((-1.0)*r02*x257)));
IkReal x262=(((r02*sj4))+((cj4*x258)));
IkReal x263=(((r12*sj4))+((cj4*x259)));
IkReal x264=(((sj4*x259))+(((-1.0)*r12*x257)));
IkReal x265=(((r22*sj4))+((cj4*x260)));
IkReal x266=((((-1.0)*r22*x257))+((sj4*x260)));
new_r00=((((-1.0)*x255*x262))+((sj3*x261)));
new_r01=(((sj3*x262))+((cj3*x261)));
new_r02=((((-1.0)*r01*x256))+((cj5*r00)));
new_r10=((((-1.0)*x255*x263))+((sj3*x264)));
new_r11=(((sj3*x263))+((cj3*x264)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x256)));
new_r20=((((-1.0)*x255*x265))+((sj3*x266)));
new_r21=(((sj3*x265))+((cj3*x266)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x256)));
j2eval[0]=cj1;
j2eval[1]=sj0;
j2eval[2]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x267=(new_r12*sj0);
IkReal x268=(new_r02*sj0);
IkReal x269=((1.0)*cj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
evalcond[6]=((((-1.0)*x268))+((cj0*new_r12)));
evalcond[7]=((((-1.0)*new_r12*x269))+x268);
evalcond[8]=(x267+((cj0*new_r02)));
evalcond[9]=((((-1.0)*x267))+(((-1.0)*new_r02*x269)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x270=((1.0)*cj0);
if( IKabs((((new_r00*sj0))+(((-1.0)*new_r10*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x270))+(((-1.0)*new_r10*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj0))+(((-1.0)*new_r10*x270))))+IKsqr(((((-1.0)*new_r00*x270))+(((-1.0)*new_r10*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r00*sj0))+(((-1.0)*new_r10*x270))), ((((-1.0)*new_r00*x270))+(((-1.0)*new_r10*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x271=IKcos(j2);
IkReal x272=IKsin(j2);
IkReal x273=((1.0)*sj0);
IkReal x274=(cj0*x271);
IkReal x275=(cj0*x272);
IkReal x276=(x272*x273);
evalcond[0]=(((new_r10*sj0))+x271+((cj0*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x273))+x272+((cj0*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x273))+x271+((cj0*new_r11)));
evalcond[3]=(x275+new_r10+((sj0*x271)));
evalcond[4]=((((-1.0)*x272))+((new_r11*sj0))+((cj0*new_r01)));
evalcond[5]=(x274+(((-1.0)*x276))+new_r00);
evalcond[6]=(x274+(((-1.0)*x276))+new_r11);
evalcond[7]=((((-1.0)*x275))+(((-1.0)*x271*x273))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x277=(new_r02*sj0);
IkReal x278=(cj0*new_r12);
IkReal x279=(((new_r12*sj0))+((cj0*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
evalcond[6]=((((-1.0)*x277))+x278);
evalcond[7]=((((-1.0)*x278))+x277);
evalcond[8]=x279;
evalcond[9]=x279;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x280=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r10*x280))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj0))+(((-1.0)*new_r11*x280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x280))+(((-1.0)*new_r11*sj0))))+IKsqr((((new_r10*sj0))+(((-1.0)*new_r11*x280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r10*x280))+(((-1.0)*new_r11*sj0))), (((new_r10*sj0))+(((-1.0)*new_r11*x280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x281=IKsin(j2);
IkReal x282=IKcos(j2);
IkReal x283=((1.0)*sj0);
IkReal x284=(cj0*x281);
IkReal x285=((1.0)*x282);
IkReal x286=(x282*x283);
evalcond[0]=(((new_r11*sj0))+x281+((cj0*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x283))+x281+((cj0*new_r10)));
evalcond[2]=(x282+(((-1.0)*new_r01*x283))+((cj0*new_r11)));
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x285))+((cj0*new_r00)));
evalcond[4]=(((cj0*x282))+((sj0*x281))+new_r11);
evalcond[5]=(x284+(((-1.0)*x286))+new_r10);
evalcond[6]=(x284+(((-1.0)*x286))+new_r01);
evalcond[7]=((((-1.0)*cj0*x285))+(((-1.0)*x281*x283))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x287=((((-1.0)*sj1))+new_r22);
IkReal x288=(new_r02+(((-1.0)*cj1)));
IkReal x289=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=x287;
evalcond[2]=x287;
evalcond[3]=x288;
evalcond[4]=new_r12;
evalcond[5]=x288;
evalcond[6]=(((new_r20*sj1))+((cj1*new_r00)));
evalcond[7]=(((cj1*new_r01))+((new_r21*sj1)));
evalcond[8]=((-1.0)+((cj1*new_r02))+((new_r22*sj1)));
evalcond[9]=(((cj1*new_r22))+(((-1.0)*new_r02*x289)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x290=IKsin(j2);
IkReal x291=IKcos(j2);
IkReal x292=((1.0)*new_r22);
IkReal x293=((1.0)*x291);
evalcond[0]=(x290+new_r10);
evalcond[1]=(x291+new_r11);
evalcond[2]=(((new_r02*x290))+new_r21);
evalcond[3]=(((new_r22*x291))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*new_r02*x293)));
evalcond[5]=((((-1.0)*x290*x292))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x292))+x290+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x293))+((new_r02*new_r20))+(((-1.0)*new_r00*x292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x294=((((-1.0)*sj1))+new_r22);
IkReal x295=((1.0)*new_r02);
IkReal x296=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=x294;
evalcond[2]=x294;
evalcond[3]=(cj1+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x295))+(((-1.0)*x296)));
evalcond[6]=(((new_r20*sj1))+(((-1.0)*new_r00*x296)));
evalcond[7]=((((-1.0)*new_r01*x296))+((new_r21*sj1)));
evalcond[8]=((-1.0)+(((-1.0)*cj1*x295))+((new_r22*sj1)));
evalcond[9]=(((new_r02*sj1))+((cj1*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r10, new_r11);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x297=IKcos(j2);
IkReal x298=IKsin(j2);
IkReal x299=((1.0)*new_r02);
IkReal x300=((1.0)*x298);
evalcond[0]=(((new_r02*x297))+new_r20);
evalcond[1]=(x298+(((-1.0)*new_r10)));
evalcond[2]=(x297+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x298*x299))+new_r21);
evalcond[4]=(((new_r22*x297))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r22*x300))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x299))+((new_r01*new_r22))+x298);
evalcond[7]=((((-1.0)*x297))+(((-1.0)*new_r20*x299))+((new_r00*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x301=((1.0)*sj0);
IkReal x302=(cj0*new_r12);
IkReal x303=(((new_r10*sj0))+((cj0*new_r00)));
IkReal x304=(((new_r11*sj0))+((cj0*new_r01)));
IkReal x305=((-1.0)+((new_r12*sj0))+((cj0*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*cj0)));
evalcond[3]=(new_r12+(((-1.0)*x301)));
evalcond[4]=((((-1.0)*new_r02*x301))+x302);
evalcond[5]=(((new_r02*sj0))+(((-1.0)*x302)));
evalcond[6]=x305;
evalcond[7]=x303;
evalcond[8]=x304;
evalcond[9]=x303;
evalcond[10]=x304;
evalcond[11]=x305;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x306=IKsin(j2);
IkReal x307=IKcos(j2);
IkReal x308=((1.0)*new_r12);
evalcond[0]=(x306+new_r21);
evalcond[1]=((((-1.0)*x307))+new_r20);
evalcond[2]=(((new_r02*x306))+new_r10);
evalcond[3]=(((new_r02*x307))+new_r11);
evalcond[4]=((((-1.0)*x306*x308))+new_r00);
evalcond[5]=((((-1.0)*x307*x308))+new_r01);
evalcond[6]=(x306+((new_r02*new_r10))+(((-1.0)*new_r00*x308)));
evalcond[7]=(x307+(((-1.0)*new_r01*x308))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x309=(new_r12*sj0);
IkReal x310=(cj0*new_r01);
IkReal x311=(new_r02*sj0);
IkReal x312=((1.0)*cj0);
IkReal x313=(new_r11*sj0);
IkReal x314=(new_r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj0+new_r02);
evalcond[3]=(sj0+new_r12);
evalcond[4]=((((-1.0)*x311))+((cj0*new_r12)));
evalcond[5]=((((-1.0)*new_r12*x312))+x311);
evalcond[6]=((1.0)+x309+((cj0*new_r02)));
evalcond[7]=(x314+((cj0*new_r00)));
evalcond[8]=(x310+x313);
evalcond[9]=((((-1.0)*new_r00*x312))+(((-1.0)*x314)));
evalcond[10]=((((-1.0)*x310))+(((-1.0)*x313)));
evalcond[11]=((-1.0)+(((-1.0)*new_r02*x312))+(((-1.0)*x309)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x315=IKsin(j2);
IkReal x316=IKcos(j2);
IkReal x317=((1.0)*new_r02);
evalcond[0]=(x316+new_r20);
evalcond[1]=((((-1.0)*x315))+new_r21);
evalcond[2]=(((new_r12*x315))+new_r00);
evalcond[3]=(((new_r12*x316))+new_r01);
evalcond[4]=((((-1.0)*x315*x317))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x316*x317)));
evalcond[6]=(((new_r00*new_r12))+x315+(((-1.0)*new_r10*x317)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x317))+x316);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x318=((((-1.0)*sj1))+new_r22);
IkReal x319=(new_r12+(((-1.0)*cj1)));
IkReal x320=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x318;
evalcond[2]=x318;
evalcond[3]=new_r02;
evalcond[4]=x319;
evalcond[5]=x319;
evalcond[6]=(((new_r20*sj1))+((cj1*new_r10)));
evalcond[7]=(((cj1*new_r11))+((new_r21*sj1)));
evalcond[8]=((-1.0)+((cj1*new_r12))+((new_r22*sj1)));
evalcond[9]=((((-1.0)*new_r12*x320))+((cj1*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x321=IKsin(j2);
IkReal x322=IKcos(j2);
IkReal x323=((1.0)*new_r22);
IkReal x324=((1.0)*x322);
evalcond[0]=(((new_r12*x321))+new_r21);
evalcond[1]=(x321+(((-1.0)*new_r00)));
evalcond[2]=(x322+(((-1.0)*new_r01)));
evalcond[3]=(((new_r22*x322))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x324))+new_r20);
evalcond[5]=((((-1.0)*x321*x323))+new_r11);
evalcond[6]=(x321+((new_r12*new_r21))+(((-1.0)*new_r11*x323)));
evalcond[7]=((((-1.0)*x324))+((new_r12*new_r20))+(((-1.0)*new_r10*x323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x325=((((-1.0)*sj1))+new_r22);
IkReal x326=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x325;
evalcond[2]=x325;
evalcond[3]=new_r02;
evalcond[4]=(cj1+new_r12);
evalcond[5]=((((-1.0)*x326))+(((-1.0)*new_r12)));
evalcond[6]=(((new_r20*sj1))+(((-1.0)*new_r10*x326)));
evalcond[7]=(((new_r21*sj1))+(((-1.0)*new_r11*x326)));
evalcond[8]=((-1.0)+(((-1.0)*new_r12*x326))+((new_r22*sj1)));
evalcond[9]=(((new_r12*sj1))+((cj1*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x327=IKcos(j2);
IkReal x328=IKsin(j2);
IkReal x329=((1.0)*new_r12);
IkReal x330=((1.0)*x328);
evalcond[0]=(x328+new_r00);
evalcond[1]=(x327+new_r01);
evalcond[2]=(((new_r12*x327))+new_r20);
evalcond[3]=(new_r21+(((-1.0)*x328*x329)));
evalcond[4]=(((new_r22*x327))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*new_r22*x330))+(((-1.0)*new_r11)));
evalcond[6]=(x328+((new_r11*new_r22))+(((-1.0)*new_r21*x329)));
evalcond[7]=((((-1.0)*x327))+((new_r10*new_r22))+(((-1.0)*new_r20*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(cj1,-1);
if(!x332.valid){
continue;
}
IkReal x331=x332.value;
CheckValue<IkReal> x333=IKPowWithIntegerCheck(sj0,-1);
if(!x333.valid){
continue;
}
CheckValue<IkReal> x334=IKPowWithIntegerCheck(sj1,-1);
if(!x334.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x331)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x331*(x333.value)*(x334.value)*((((cj0*new_r21))+(((-1.0)*cj1*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x331))+IKsqr((x331*(x333.value)*(x334.value)*((((cj0*new_r21))+(((-1.0)*cj1*new_r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*x331), (x331*(x333.value)*(x334.value)*((((cj0*new_r21))+(((-1.0)*cj1*new_r10))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x335=IKsin(j2);
IkReal x336=IKcos(j2);
IkReal x337=((1.0)*sj0);
IkReal x338=(cj0*new_r00);
IkReal x339=((1.0)*cj0);
IkReal x340=((1.0)*x336);
IkReal x341=(sj1*x335);
IkReal x342=(sj1*x336);
evalcond[0]=(((cj1*x335))+new_r21);
evalcond[1]=((((-1.0)*cj1*x340))+new_r20);
evalcond[2]=(x335+(((-1.0)*new_r00*x337))+((cj0*new_r10)));
evalcond[3]=(x336+((cj0*new_r11))+(((-1.0)*new_r01*x337)));
evalcond[4]=(((new_r10*sj0))+x338+x342);
evalcond[5]=(((sj0*x342))+((cj0*x335))+new_r10);
evalcond[6]=(((new_r11*sj0))+((cj0*new_r01))+(((-1.0)*x341)));
evalcond[7]=(((cj0*x342))+new_r00+(((-1.0)*x335*x337)));
evalcond[8]=((((-1.0)*x337*x341))+((cj0*x336))+new_r11);
evalcond[9]=(new_r01+(((-1.0)*x339*x341))+(((-1.0)*x336*x337)));
evalcond[10]=(((cj1*new_r21))+x335+(((-1.0)*new_r01*sj1*x339))+(((-1.0)*new_r11*sj1*x337)));
evalcond[11]=((((-1.0)*new_r10*sj1*x337))+(((-1.0)*sj1*x338))+((cj1*new_r20))+(((-1.0)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x344=IKPowWithIntegerCheck(cj1,-1);
if(!x344.valid){
continue;
}
IkReal x343=x344.value;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(cj0,-1);
if(!x345.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x343)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x343*(x345.value)*(((((-1.0)*new_r21*sj0*sj1))+(((-1.0)*cj1*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x343))+IKsqr((x343*(x345.value)*(((((-1.0)*new_r21*sj0*sj1))+(((-1.0)*cj1*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*x343), (x343*(x345.value)*(((((-1.0)*new_r21*sj0*sj1))+(((-1.0)*cj1*new_r11))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x346=IKsin(j2);
IkReal x347=IKcos(j2);
IkReal x348=((1.0)*sj0);
IkReal x349=(cj0*new_r00);
IkReal x350=((1.0)*cj0);
IkReal x351=((1.0)*x347);
IkReal x352=(sj1*x346);
IkReal x353=(sj1*x347);
evalcond[0]=(((cj1*x346))+new_r21);
evalcond[1]=((((-1.0)*cj1*x351))+new_r20);
evalcond[2]=(x346+(((-1.0)*new_r00*x348))+((cj0*new_r10)));
evalcond[3]=(x347+(((-1.0)*new_r01*x348))+((cj0*new_r11)));
evalcond[4]=(((new_r10*sj0))+x353+x349);
evalcond[5]=(((sj0*x353))+((cj0*x346))+new_r10);
evalcond[6]=(((new_r11*sj0))+(((-1.0)*x352))+((cj0*new_r01)));
evalcond[7]=(((cj0*x353))+(((-1.0)*x346*x348))+new_r00);
evalcond[8]=((((-1.0)*x348*x352))+((cj0*x347))+new_r11);
evalcond[9]=((((-1.0)*x347*x348))+new_r01+(((-1.0)*x350*x352)));
evalcond[10]=((((-1.0)*new_r11*sj1*x348))+((cj1*new_r21))+x346+(((-1.0)*new_r01*sj1*x350)));
evalcond[11]=((((-1.0)*sj1*x349))+((cj1*new_r20))+(((-1.0)*x351))+(((-1.0)*new_r10*sj1*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x355.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x354.value)))+(x355.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x356=IKsin(j2);
IkReal x357=IKcos(j2);
IkReal x358=((1.0)*sj0);
IkReal x359=(cj0*new_r00);
IkReal x360=((1.0)*cj0);
IkReal x361=((1.0)*x357);
IkReal x362=(sj1*x356);
IkReal x363=(sj1*x357);
evalcond[0]=(((cj1*x356))+new_r21);
evalcond[1]=((((-1.0)*cj1*x361))+new_r20);
evalcond[2]=(x356+(((-1.0)*new_r00*x358))+((cj0*new_r10)));
evalcond[3]=(x357+(((-1.0)*new_r01*x358))+((cj0*new_r11)));
evalcond[4]=(((new_r10*sj0))+x359+x363);
evalcond[5]=(((sj0*x363))+((cj0*x356))+new_r10);
evalcond[6]=((((-1.0)*x362))+((new_r11*sj0))+((cj0*new_r01)));
evalcond[7]=((((-1.0)*x356*x358))+new_r00+((cj0*x363)));
evalcond[8]=((((-1.0)*x358*x362))+((cj0*x357))+new_r11);
evalcond[9]=((((-1.0)*x357*x358))+(((-1.0)*x360*x362))+new_r01);
evalcond[10]=(((cj1*new_r21))+(((-1.0)*new_r01*sj1*x360))+(((-1.0)*new_r11*sj1*x358))+x356);
evalcond[11]=((((-1.0)*x361))+((cj1*new_r20))+(((-1.0)*new_r10*sj1*x358))+(((-1.0)*sj1*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=(new_r21+((cj1*(IKsin(j2)))));
evalcond[1]=((((-1.0)*cj1*(IKcos(j2))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x366=((1.0)*cj3);
IkReal x367=((1.0)*sj5);
IkReal x368=((1.0)*cj4);
IkReal x369=x89;
IkReal x370=x90;
IkReal x371=x91;
IkReal x372=(((sj4*x369))+(((-1.0)*r02*x368)));
IkReal x373=(((cj4*x369))+((r02*sj4)));
IkReal x374=(((cj4*x370))+((r12*sj4)));
IkReal x375=(((sj4*x370))+(((-1.0)*r12*x368)));
IkReal x376=(((r22*sj4))+((cj4*x371)));
IkReal x377=(((sj4*x371))+(((-1.0)*r22*x368)));
new_r00=((((-1.0)*x366*x373))+((sj3*x372)));
new_r01=(((sj3*x373))+((cj3*x372)));
new_r02=((((-1.0)*r01*x367))+((cj5*r00)));
new_r10=((((-1.0)*x366*x374))+((sj3*x375)));
new_r11=(((sj3*x374))+((cj3*x375)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x367)));
new_r20=((((-1.0)*x366*x376))+((sj3*x377)));
new_r21=(((sj3*x376))+((cj3*x377)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x367)));
IkReal x378=((1.0)*sj5);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*x378)))))+(IKabs(((((-1.0)*r01*x378))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x379=((1.0)*cj3);
IkReal x380=((1.0)*sj5);
IkReal x381=((1.0)*cj4);
IkReal x382=x89;
IkReal x383=x90;
IkReal x384=x91;
IkReal x385=(((sj4*x382))+(((-1.0)*r02*x381)));
IkReal x386=(((r02*sj4))+((cj4*x382)));
IkReal x387=(((r12*sj4))+((cj4*x383)));
IkReal x388=(((sj4*x383))+(((-1.0)*r12*x381)));
IkReal x389=(((r22*sj4))+((cj4*x384)));
IkReal x390=((((-1.0)*r22*x381))+((sj4*x384)));
new_r00=((((-1.0)*x379*x386))+((sj3*x385)));
new_r01=(((cj3*x385))+((sj3*x386)));
new_r02=((((-1.0)*r01*x380))+((cj5*r00)));
new_r10=((((-1.0)*x379*x387))+((sj3*x388)));
new_r11=(((cj3*x388))+((sj3*x387)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x380)));
new_r20=((((-1.0)*x379*x389))+((sj3*x390)));
new_r21=(((cj3*x390))+((sj3*x389)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x380)));
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x391=((1.0)*cj3);
IkReal x392=((1.0)*sj5);
IkReal x393=((1.0)*cj4);
IkReal x394=x89;
IkReal x395=x90;
IkReal x396=x91;
IkReal x397=((((-1.0)*r02*x393))+((sj4*x394)));
IkReal x398=(((cj4*x394))+((r02*sj4)));
IkReal x399=(((cj4*x395))+((r12*sj4)));
IkReal x400=((((-1.0)*r12*x393))+((sj4*x395)));
IkReal x401=(((r22*sj4))+((cj4*x396)));
IkReal x402=((((-1.0)*r22*x393))+((sj4*x396)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=((((-1.0)*x391*x398))+((sj3*x397)));
new_r01=(((sj3*x398))+((cj3*x397)));
new_r02=((((-1.0)*r01*x392))+((cj5*r00)));
new_r10=(((sj3*x400))+(((-1.0)*x391*x399)));
new_r11=(((sj3*x399))+((cj3*x400)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x392)));
new_r20=(((sj3*x402))+(((-1.0)*x391*x401)));
new_r21=(((sj3*x401))+((cj3*x402)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x392)));
IkReal x403=(cj5*sj2);
IkReal x404=((1.0)*sj2*sj5);
j0eval[0]=((IKabs((((r00*x403))+(((-1.0)*r01*x404)))))+(IKabs((((r10*x403))+(((-1.0)*r11*x404))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x405=((1.0)*cj3);
IkReal x406=((1.0)*sj5);
IkReal x407=((1.0)*cj4);
IkReal x408=x89;
IkReal x409=x90;
IkReal x410=x91;
IkReal x411=((((-1.0)*r02*x407))+((sj4*x408)));
IkReal x412=(((cj4*x408))+((r02*sj4)));
IkReal x413=(((cj4*x409))+((r12*sj4)));
IkReal x414=(((sj4*x409))+(((-1.0)*r12*x407)));
IkReal x415=(((r22*sj4))+((cj4*x410)));
IkReal x416=(((sj4*x410))+(((-1.0)*r22*x407)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj3*x411))+(((-1.0)*x405*x412)));
new_r01=(((sj3*x412))+((cj3*x411)));
new_r02=((((-1.0)*r01*x406))+((cj5*r00)));
new_r10=(((sj3*x414))+(((-1.0)*x405*x413)));
new_r11=(((sj3*x413))+((cj3*x414)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x406)));
new_r20=(((sj3*x416))+(((-1.0)*x405*x415)));
new_r21=(((sj3*x415))+((cj3*x416)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x406)));
IkReal x417=(cj2*cj5);
IkReal x418=((1.0)*cj2*sj5);
j0eval[0]=((IKabs((((r10*x417))+(((-1.0)*r11*x418)))))+(IKabs((((r00*x417))+(((-1.0)*r01*x418))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x419=((1.0)*cj3);
IkReal x420=((1.0)*sj5);
IkReal x421=((1.0)*cj4);
IkReal x422=x89;
IkReal x423=x90;
IkReal x424=x91;
IkReal x425=(((sj4*x422))+(((-1.0)*r02*x421)));
IkReal x426=(((cj4*x422))+((r02*sj4)));
IkReal x427=(((cj4*x423))+((r12*sj4)));
IkReal x428=(((sj4*x423))+(((-1.0)*r12*x421)));
IkReal x429=(((r22*sj4))+((cj4*x424)));
IkReal x430=(((sj4*x424))+(((-1.0)*r22*x421)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj3*x425))+(((-1.0)*x419*x426)));
new_r01=(((sj3*x426))+((cj3*x425)));
new_r02=((((-1.0)*r01*x420))+((cj5*r00)));
new_r10=(((sj3*x428))+(((-1.0)*x419*x427)));
new_r11=(((sj3*x427))+((cj3*x428)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x420)));
new_r20=(((sj3*x430))+(((-1.0)*x419*x429)));
new_r21=(((cj3*x430))+((sj3*x429)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x420)));
IkReal x431=(cj2*cj5);
IkReal x432=((1.0)*cj2*sj5);
j0eval[0]=((IKabs(((((-1.0)*r11*x432))+((r10*x431)))))+(IKabs((((r00*x431))+(((-1.0)*r01*x432))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x433=IKcos(j0);
IkReal x434=IKsin(j0);
IkReal x435=((1.0)*x434);
evalcond[0]=(x433+new_r10);
evalcond[1]=((((-1.0)*x435))+new_r00);
evalcond[2]=((((-1.0)*x435))+new_r11);
evalcond[3]=((((-1.0)*x433))+new_r01);
evalcond[4]=(((new_r12*x434))+((new_r02*x433)));
evalcond[5]=(((new_r00*x433))+((new_r10*x434)));
evalcond[6]=(((new_r12*x433))+(((-1.0)*new_r02*x435)));
evalcond[7]=((((-1.0)*new_r01*x435))+((new_r11*x433)));
evalcond[8]=((-1.0)+((new_r01*x433))+((new_r11*x434)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x435))+((new_r10*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x436=IKsin(j0);
IkReal x437=IKcos(j0);
IkReal x438=((1.0)*x436);
evalcond[0]=(x436+new_r00);
evalcond[1]=(x436+new_r11);
evalcond[2]=(x437+new_r01);
evalcond[3]=((((-1.0)*x437))+new_r10);
evalcond[4]=(((new_r12*x436))+((new_r02*x437)));
evalcond[5]=(((new_r00*x437))+((new_r10*x436)));
evalcond[6]=(((new_r12*x437))+(((-1.0)*new_r02*x438)));
evalcond[7]=((((-1.0)*new_r01*x438))+((new_r11*x437)));
evalcond[8]=((1.0)+((new_r01*x437))+((new_r11*x436)));
evalcond[9]=((-1.0)+(((-1.0)*new_r00*x438))+((new_r10*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x439=IKcos(j0);
IkReal x440=IKsin(j0);
IkReal x441=((1.0)*x440);
evalcond[0]=(x440+new_r10);
evalcond[1]=(x439+new_r00);
evalcond[2]=(x439+new_r11);
evalcond[3]=((((-1.0)*x441))+new_r01);
evalcond[4]=(((new_r12*x440))+((new_r02*x439)));
evalcond[5]=(((new_r01*x439))+((new_r11*x440)));
evalcond[6]=(((new_r12*x439))+(((-1.0)*new_r02*x441)));
evalcond[7]=((((-1.0)*new_r00*x441))+((new_r10*x439)));
evalcond[8]=((1.0)+((new_r00*x439))+((new_r10*x440)));
evalcond[9]=((1.0)+(((-1.0)*new_r01*x441))+((new_r11*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x442=IKsin(j0);
IkReal x443=IKcos(j0);
IkReal x444=((1.0)*x443);
IkReal x445=((1.0)*x442);
evalcond[0]=(x442+new_r01);
evalcond[1]=((((-1.0)*x445))+new_r10);
evalcond[2]=((((-1.0)*x444))+new_r00);
evalcond[3]=((((-1.0)*x444))+new_r11);
evalcond[4]=(((new_r12*x442))+((new_r02*x443)));
evalcond[5]=(((new_r01*x443))+((new_r11*x442)));
evalcond[6]=(((new_r12*x443))+(((-1.0)*new_r02*x445)));
evalcond[7]=((((-1.0)*new_r00*x445))+((new_r10*x443)));
evalcond[8]=((-1.0)+((new_r00*x443))+((new_r10*x442)));
evalcond[9]=((-1.0)+(((-1.0)*new_r01*x445))+((new_r11*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*new_r11);
evalcond[4]=new_r01;
evalcond[5]=new_r20;
evalcond[6]=sj2;
evalcond[7]=((-1.0)*sj2);
evalcond[8]=cj2;
evalcond[9]=((-1.0)*cj2);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x447 = IKatan2WithCheck(IkReal(new_r01),new_r11,IKFAST_ATAN2_MAGTHRESH);
if(!x447.valid){
continue;
}
IkReal x446=x447.value;
j0array[0]=((-1.0)*x446);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x446)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j0))))+(((-1.0)*new_r01*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r00)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=0;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x448=((1.0)*cj3);
IkReal x449=((1.0)*sj5);
IkReal x450=((1.0)*cj4);
IkReal x451=x89;
IkReal x452=x90;
IkReal x453=x91;
IkReal x454=(((sj4*x451))+(((-1.0)*r02*x450)));
IkReal x455=(((cj4*x451))+((r02*sj4)));
IkReal x456=(((cj4*x452))+((r12*sj4)));
IkReal x457=(((sj4*x452))+(((-1.0)*r12*x450)));
IkReal x458=(((cj4*x453))+((r22*sj4)));
IkReal x459=(((sj4*x453))+(((-1.0)*r22*x450)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj3*x454))+(((-1.0)*x448*x455)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x449)));
new_r01=(((sj3*x455))+((cj3*x454)));
new_r02=((((-1.0)*r01*x449))+((cj5*r00)));
new_r10=(((sj3*x457))+(((-1.0)*x448*x456)));
new_r11=(((sj3*x456))+((cj3*x457)));
new_r20=(((sj3*x459))+(((-1.0)*x448*x458)));
new_r21=(((sj3*x458))+((cj3*x459)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x449)));
j0eval[0]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x460=((1.0)*cj3);
IkReal x461=((1.0)*sj5);
IkReal x462=((1.0)*cj4);
IkReal x463=x89;
IkReal x464=x90;
IkReal x465=x91;
IkReal x466=(((sj4*x463))+(((-1.0)*r02*x462)));
IkReal x467=(((cj4*x463))+((r02*sj4)));
IkReal x468=(((cj4*x464))+((r12*sj4)));
IkReal x469=(((sj4*x464))+(((-1.0)*r12*x462)));
IkReal x470=(((cj4*x465))+((r22*sj4)));
IkReal x471=(((sj4*x465))+(((-1.0)*r22*x462)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj3*x466))+(((-1.0)*x460*x467)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x461)));
new_r01=(((sj3*x467))+((cj3*x466)));
new_r02=((((-1.0)*r01*x461))+((cj5*r00)));
new_r10=(((sj3*x469))+(((-1.0)*x460*x468)));
new_r11=(((sj3*x468))+((cj3*x469)));
new_r20=((((-1.0)*x460*x470))+((sj3*x471)));
new_r21=(((cj3*x471))+((sj3*x470)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x461)));
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x472=((1.0)*cj3);
IkReal x473=((1.0)*sj5);
IkReal x474=((1.0)*cj4);
IkReal x475=x89;
IkReal x476=x90;
IkReal x477=x91;
IkReal x478=(((sj4*x475))+(((-1.0)*r02*x474)));
IkReal x479=(((cj4*x475))+((r02*sj4)));
IkReal x480=(((cj4*x476))+((r12*sj4)));
IkReal x481=(((sj4*x476))+(((-1.0)*r12*x474)));
IkReal x482=(((cj4*x477))+((r22*sj4)));
IkReal x483=(((sj4*x477))+(((-1.0)*r22*x474)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=((((-1.0)*x472*x479))+((sj3*x478)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x473)));
new_r01=(((cj3*x478))+((sj3*x479)));
new_r02=((((-1.0)*r01*x473))+((cj5*r00)));
new_r10=(((sj3*x481))+(((-1.0)*x472*x480)));
new_r11=(((cj3*x481))+((sj3*x480)));
new_r20=(((sj3*x483))+(((-1.0)*x472*x482)));
new_r21=(((cj3*x483))+((sj3*x482)));
new_r22=((((-1.0)*r21*x473))+((cj5*r20)));
j0eval[0]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=0;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r11, new_r01);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x484=IKcos(j0);
IkReal x485=IKsin(j0);
IkReal x486=((1.0)*x485);
IkReal x487=((-1.0)*x485);
evalcond[0]=(new_r02*x484);
evalcond[1]=(new_r10*x485);
evalcond[2]=(x484+new_r10);
evalcond[3]=x487;
evalcond[4]=(new_r02*x487);
evalcond[5]=((1.0)+((new_r10*x484)));
evalcond[6]=((((-1.0)*x486))+new_r11);
evalcond[7]=((((-1.0)*x484))+new_r01);
evalcond[8]=((((-1.0)*new_r01*x486))+((new_r11*x484)));
evalcond[9]=((-1.0)+((new_r11*x485))+((new_r01*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=0;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x488=IKsin(j0);
IkReal x489=IKcos(j0);
evalcond[0]=x488;
evalcond[1]=(new_r02*x489);
evalcond[2]=(new_r10*x488);
evalcond[3]=(x488+new_r11);
evalcond[4]=(x489+new_r01);
evalcond[5]=((-1.0)*new_r02*x488);
evalcond[6]=((-1.0)+((new_r10*x489)));
evalcond[7]=((((-1.0)*x489))+new_r10);
evalcond[8]=((((-1.0)*new_r01*x488))+((new_r11*x489)));
evalcond[9]=((1.0)+((new_r11*x488))+((new_r01*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=0;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x490=IKcos(j0);
IkReal x491=IKsin(j0);
IkReal x492=((1.0)*x491);
evalcond[0]=x490;
evalcond[1]=(new_r10*x490);
evalcond[2]=(new_r02*x490);
evalcond[3]=(x491+new_r10);
evalcond[4]=(x490+new_r11);
evalcond[5]=((-1.0)*new_r02*x491);
evalcond[6]=((1.0)+((new_r10*x491)));
evalcond[7]=((((-1.0)*x492))+new_r01);
evalcond[8]=(((new_r11*x491))+((new_r01*x490)));
evalcond[9]=((1.0)+(((-1.0)*new_r01*x492))+((new_r11*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=0;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x493=IKcos(j0);
IkReal x494=IKsin(j0);
IkReal x495=((1.0)*x494);
evalcond[0]=(new_r10*x493);
evalcond[1]=(new_r02*x493);
evalcond[2]=((-1.0)*x493);
evalcond[3]=(x494+new_r01);
evalcond[4]=((-1.0)*new_r02*x494);
evalcond[5]=((-1.0)+((new_r10*x494)));
evalcond[6]=((((-1.0)*x495))+new_r10);
evalcond[7]=((((-1.0)*x493))+new_r11);
evalcond[8]=(((new_r11*x494))+((new_r01*x493)));
evalcond[9]=((-1.0)+(((-1.0)*new_r01*x495))+((new_r11*x493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x497=IKPowWithIntegerCheck(new_r10,-1);
if(!x497.valid){
continue;
}
IkReal x496=x497.value;
CheckValue<IkReal> x498=IKPowWithIntegerCheck(cj2,-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499=IKPowWithIntegerCheck(x496,-2);
if(!x499.valid){
continue;
}
if( IKabs((x496*(x498.value)*(((1.0)+(((-1.0)*(cj2*cj2)))+(((-1.0)*(x499.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj2*x496)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x496*(x498.value)*(((1.0)+(((-1.0)*(cj2*cj2)))+(((-1.0)*(x499.value)))))))+IKsqr(((-1.0)*sj2*x496))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x496*(x498.value)*(((1.0)+(((-1.0)*(cj2*cj2)))+(((-1.0)*(x499.value)))))), ((-1.0)*sj2*x496));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x500=IKcos(j0);
IkReal x501=IKsin(j0);
IkReal x502=((1.0)*sj2);
IkReal x503=(cj2*x500);
IkReal x504=(cj2*x501);
IkReal x505=(x501*x502);
evalcond[0]=(new_r02*x500);
evalcond[1]=((-1.0)*new_r02*x501);
evalcond[2]=(sj2+((new_r10*x500)));
evalcond[3]=(cj2+((new_r10*x501)));
evalcond[4]=(((sj2*x500))+x504+new_r10);
evalcond[5]=((((-1.0)*x505))+x503);
evalcond[6]=(cj2+(((-1.0)*new_r01*x501))+((new_r11*x500)));
evalcond[7]=((((-1.0)*x505))+x503+new_r11);
evalcond[8]=((((-1.0)*x502))+((new_r11*x501))+((new_r01*x500)));
evalcond[9]=(new_r01+(((-1.0)*x504))+(((-1.0)*x500*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x507=IKPowWithIntegerCheck(new_r10,-1);
if(!x507.valid){
continue;
}
IkReal x506=x507.value;
CheckValue<IkReal> x508=IKPowWithIntegerCheck(sj2,-1);
if(!x508.valid){
continue;
}
CheckValue<IkReal> x509=IKPowWithIntegerCheck(x506,-2);
if(!x509.valid){
continue;
}
if( IKabs(((-1.0)*cj2*x506)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x506*(x508.value)*(((cj2*cj2)+(((-1.0)*(x509.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj2*x506))+IKsqr((x506*(x508.value)*(((cj2*cj2)+(((-1.0)*(x509.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*cj2*x506), (x506*(x508.value)*(((cj2*cj2)+(((-1.0)*(x509.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x510=IKcos(j0);
IkReal x511=IKsin(j0);
IkReal x512=((1.0)*sj2);
IkReal x513=(cj2*x510);
IkReal x514=(cj2*x511);
IkReal x515=(x511*x512);
evalcond[0]=(new_r02*x510);
evalcond[1]=((-1.0)*new_r02*x511);
evalcond[2]=(((new_r10*x510))+sj2);
evalcond[3]=(((new_r10*x511))+cj2);
evalcond[4]=(x514+((sj2*x510))+new_r10);
evalcond[5]=(x513+(((-1.0)*x515)));
evalcond[6]=(((new_r11*x510))+cj2+(((-1.0)*new_r01*x511)));
evalcond[7]=(x513+new_r11+(((-1.0)*x515)));
evalcond[8]=(((new_r01*x510))+((new_r11*x511))+(((-1.0)*x512)));
evalcond[9]=((((-1.0)*x514))+new_r01+(((-1.0)*x510*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x516=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x516.valid){
continue;
}
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(((-1.0)*cj2)),((-1.0)*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x516.value)))+(x517.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x518=IKcos(j0);
IkReal x519=IKsin(j0);
IkReal x520=((1.0)*sj2);
IkReal x521=(cj2*x518);
IkReal x522=(cj2*x519);
IkReal x523=(x519*x520);
evalcond[0]=(new_r02*x518);
evalcond[1]=((-1.0)*new_r02*x519);
evalcond[2]=(((new_r10*x518))+sj2);
evalcond[3]=(((new_r10*x519))+cj2);
evalcond[4]=(x522+((sj2*x518))+new_r10);
evalcond[5]=((((-1.0)*x523))+x521);
evalcond[6]=(((new_r11*x518))+cj2+(((-1.0)*new_r01*x519)));
evalcond[7]=((((-1.0)*x523))+x521+new_r11);
evalcond[8]=(((new_r01*x518))+((new_r11*x519))+(((-1.0)*x520)));
evalcond[9]=((((-1.0)*x522))+(((-1.0)*x518*x520))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r02)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=0;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x524=((1.0)*cj3);
IkReal x525=((1.0)*sj5);
IkReal x526=((1.0)*cj4);
IkReal x527=x90;
IkReal x528=x89;
IkReal x529=x91;
IkReal x530=((((-1.0)*r02*x526))+((sj4*x528)));
IkReal x531=(((cj4*x528))+((r02*sj4)));
IkReal x532=(((cj4*x527))+((r12*sj4)));
IkReal x533=(((sj4*x527))+(((-1.0)*r12*x526)));
IkReal x534=(((cj4*x529))+((r22*sj4)));
IkReal x535=(((sj4*x529))+(((-1.0)*r22*x526)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r10=((((-1.0)*x524*x532))+((sj3*x533)));
new_r02=((((-1.0)*r01*x525))+((cj5*r00)));
new_r00=((((-1.0)*x524*x531))+((sj3*x530)));
new_r01=(((sj3*x531))+((cj3*x530)));
new_r11=(((sj3*x532))+((cj3*x533)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x525)));
new_r20=((((-1.0)*x524*x534))+((sj3*x535)));
new_r21=(((sj3*x534))+((cj3*x535)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x525)));
j0eval[0]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x537=IKPowWithIntegerCheck(new_r00,-1);
if(!x537.valid){
continue;
}
IkReal x536=x537.value;
CheckValue<IkReal> x538=IKPowWithIntegerCheck(new_r01,-1);
if(!x538.valid){
continue;
}
if( IKabs((x536*(x538.value)*((((cj2*new_r00))+(((-1.0)*cj2*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj2*x536)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x536*(x538.value)*((((cj2*new_r00))+(((-1.0)*cj2*new_r11))))))+IKsqr(((-1.0)*cj2*x536))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x536*(x538.value)*((((cj2*new_r00))+(((-1.0)*cj2*new_r11))))), ((-1.0)*cj2*x536));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x539=IKcos(j0);
IkReal x540=IKsin(j0);
IkReal x541=((1.0)*sj2);
IkReal x542=(cj2*x539);
IkReal x543=(cj2*x540);
IkReal x544=((1.0)*x540);
IkReal x545=(x540*x541);
evalcond[0]=(new_r12*x539);
evalcond[1]=(new_r12*x540);
evalcond[2]=(cj2+((new_r00*x539)));
evalcond[3]=(sj2+(((-1.0)*new_r00*x544)));
evalcond[4]=(((sj2*x539))+x543);
evalcond[5]=(cj2+((new_r11*x539))+(((-1.0)*new_r01*x544)));
evalcond[6]=((((-1.0)*x545))+x542+new_r00);
evalcond[7]=((((-1.0)*x545))+x542+new_r11);
evalcond[8]=(((new_r01*x539))+((new_r11*x540))+(((-1.0)*x541)));
evalcond[9]=((((-1.0)*x543))+(((-1.0)*x539*x541))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(sj2),((-1.0)*cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x547.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x546.value)+(((1.5707963267949)*(x547.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x548=IKcos(j0);
IkReal x549=IKsin(j0);
IkReal x550=((1.0)*sj2);
IkReal x551=(cj2*x548);
IkReal x552=(cj2*x549);
IkReal x553=((1.0)*x549);
IkReal x554=(x549*x550);
evalcond[0]=(new_r12*x548);
evalcond[1]=(new_r12*x549);
evalcond[2]=(((new_r00*x548))+cj2);
evalcond[3]=(sj2+(((-1.0)*new_r00*x553)));
evalcond[4]=(((sj2*x548))+x552);
evalcond[5]=(cj2+(((-1.0)*new_r01*x553))+((new_r11*x548)));
evalcond[6]=((((-1.0)*x554))+x551+new_r00);
evalcond[7]=((((-1.0)*x554))+x551+new_r11);
evalcond[8]=(((new_r11*x549))+(((-1.0)*x550))+((new_r01*x548)));
evalcond[9]=((((-1.0)*x552))+(((-1.0)*x548*x550))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x555=((1.0)*sj5);
IkReal x556=((1.0)*cj3);
IkReal x557=((1.0)*cj4);
IkReal x558=x91;
IkReal x559=x89;
IkReal x560=x90;
IkReal x561=(((cj4*x558))+((r22*sj4)));
IkReal x562=(((sj4*x558))+(((-1.0)*r22*x557)));
IkReal x563=(((sj4*x559))+(((-1.0)*r02*x557)));
IkReal x564=(((cj4*x559))+((r02*sj4)));
IkReal x565=((((-1.0)*r12*x557))+((sj4*x560)));
IkReal x566=(((r12*sj4))+((cj4*x560)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r02=((((-1.0)*r01*x555))+((cj5*r00)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x555)));
new_r20=(((sj3*x562))+(((-1.0)*x556*x561)));
new_r21=(((sj3*x561))+((cj3*x562)));
new_r01=(((sj3*x564))+((cj3*x563)));
new_r11=(((sj3*x566))+((cj3*x565)));
new_r00=(((sj3*x563))+(((-1.0)*x556*x564)));
new_r10=(((sj3*x565))+(((-1.0)*x556*x566)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x555)));
j0eval[0]=1.0;
j0eval[1]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x567=((1.0)*new_r10);
CheckValue<IkReal> x568=IKPowWithIntegerCheck(IKsign((((cj2*new_r00))+(((-1.0)*sj2*x567)))),-1);
if(!x568.valid){
continue;
}
CheckValue<IkReal> x569 = IKatan2WithCheck(IkReal((((cj2*sj2))+(((-1.0)*new_r00*x567)))),((((-1.0)*(cj2*cj2)))+(new_r10*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x569.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x568.value)))+(x569.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x570=IKcos(j0);
IkReal x571=IKsin(j0);
IkReal x572=((1.0)*x571);
evalcond[0]=(((new_r00*x570))+cj2+((new_r10*x571)));
evalcond[1]=(((cj2*x571))+((sj2*x570))+new_r10);
evalcond[2]=(sj2+((new_r10*x570))+(((-1.0)*new_r00*x572)));
evalcond[3]=((((-1.0)*sj2*x572))+((cj2*x570))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x573=((1.0)*cj2);
CheckValue<IkReal> x574=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575 = IKatan2WithCheck(IkReal((((new_r00*sj2))+(((-1.0)*new_r10*x573)))),((((-1.0)*new_r00*x573))+(((-1.0)*new_r10*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x574.value)))+(x575.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x576=IKcos(j0);
IkReal x577=IKsin(j0);
IkReal x578=((1.0)*x577);
evalcond[0]=(((new_r00*x576))+cj2+((new_r10*x577)));
evalcond[1]=(((cj2*x577))+((sj2*x576))+new_r10);
evalcond[2]=(sj2+((new_r10*x576))+(((-1.0)*new_r00*x578)));
evalcond[3]=((((-1.0)*sj2*x578))+((cj2*x576))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x579=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x579.valid){
continue;
}
CheckValue<IkReal> x580 = IKatan2WithCheck(IkReal((cj2*new_r02)),((-1.0)*cj2*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x580.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x579.value)))+(x580.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x581=IKcos(j0);
IkReal x582=IKsin(j0);
IkReal x583=((1.0)*sj2);
IkReal x584=(cj2*x581);
IkReal x585=(sj2*x581);
IkReal x586=((1.0)*x582);
IkReal x587=(x582*x583);
evalcond[0]=(((new_r12*x582))+((new_r02*x581)));
evalcond[1]=(((new_r12*x581))+(((-1.0)*new_r02*x586)));
evalcond[2]=(cj2+((new_r00*x581))+((new_r10*x582)));
evalcond[3]=(x585+new_r10+((cj2*x582)));
evalcond[4]=(sj2+(((-1.0)*new_r00*x586))+((new_r10*x581)));
evalcond[5]=((((-1.0)*new_r01*x586))+cj2+((new_r11*x581)));
evalcond[6]=(x584+new_r00+(((-1.0)*x587)));
evalcond[7]=(x584+new_r11+(((-1.0)*x587)));
evalcond[8]=(((new_r01*x581))+(((-1.0)*x583))+((new_r11*x582)));
evalcond[9]=(new_r01+(((-1.0)*cj2*x586))+(((-1.0)*x581*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x588=IKPowWithIntegerCheck(IKsign((((new_r11*new_r12))+((new_r01*new_r02)))),-1);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal((cj2*new_r02)),((-1.0)*cj2*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x588.value)))+(x589.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x590=IKcos(j0);
IkReal x591=IKsin(j0);
IkReal x592=((1.0)*sj2);
IkReal x593=(cj2*x590);
IkReal x594=(sj2*x590);
IkReal x595=((1.0)*x591);
IkReal x596=(x591*x592);
evalcond[0]=(((new_r12*x591))+((new_r02*x590)));
evalcond[1]=(((new_r12*x590))+(((-1.0)*new_r02*x595)));
evalcond[2]=(cj2+((new_r10*x591))+((new_r00*x590)));
evalcond[3]=(((cj2*x591))+x594+new_r10);
evalcond[4]=(sj2+(((-1.0)*new_r00*x595))+((new_r10*x590)));
evalcond[5]=(cj2+((new_r11*x590))+(((-1.0)*new_r01*x595)));
evalcond[6]=((((-1.0)*x596))+x593+new_r00);
evalcond[7]=((((-1.0)*x596))+x593+new_r11);
evalcond[8]=(((new_r11*x591))+((new_r01*x590))+(((-1.0)*x592)));
evalcond[9]=((((-1.0)*cj2*x595))+(((-1.0)*x590*x592))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(IKsign((((new_r10*new_r12))+((new_r00*new_r02)))),-1);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598 = IKatan2WithCheck(IkReal((new_r02*sj2)),((-1.0)*new_r12*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x598.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x597.value)))+(x598.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x599=IKcos(j0);
IkReal x600=IKsin(j0);
IkReal x601=((1.0)*sj2);
IkReal x602=(cj2*x599);
IkReal x603=(sj2*x599);
IkReal x604=((1.0)*x600);
IkReal x605=(x600*x601);
evalcond[0]=(((new_r02*x599))+((new_r12*x600)));
evalcond[1]=(((new_r12*x599))+(((-1.0)*new_r02*x604)));
evalcond[2]=(cj2+((new_r00*x599))+((new_r10*x600)));
evalcond[3]=(((cj2*x600))+x603+new_r10);
evalcond[4]=(sj2+((new_r10*x599))+(((-1.0)*new_r00*x604)));
evalcond[5]=(cj2+((new_r11*x599))+(((-1.0)*new_r01*x604)));
evalcond[6]=(x602+(((-1.0)*x605))+new_r00);
evalcond[7]=(x602+(((-1.0)*x605))+new_r11);
evalcond[8]=(((new_r11*x600))+((new_r01*x599))+(((-1.0)*x601)));
evalcond[9]=((((-1.0)*cj2*x604))+(((-1.0)*x599*x601))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x606=((1.0)*cj3);
IkReal x607=((1.0)*sj5);
IkReal x608=((1.0)*cj4);
IkReal x609=x89;
IkReal x610=x90;
IkReal x611=x91;
IkReal x612=(((sj4*x609))+(((-1.0)*r02*x608)));
IkReal x613=(((r02*sj4))+((cj4*x609)));
IkReal x614=(((r12*sj4))+((cj4*x610)));
IkReal x615=(((sj4*x610))+(((-1.0)*r12*x608)));
IkReal x616=(((r22*sj4))+((cj4*x611)));
IkReal x617=(((sj4*x611))+(((-1.0)*r22*x608)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=((((-1.0)*x606*x613))+((sj3*x612)));
new_r01=(((cj3*x612))+((sj3*x613)));
new_r02=((((-1.0)*r01*x607))+((cj5*r00)));
new_r10=((((-1.0)*x606*x614))+((sj3*x615)));
new_r11=(((cj3*x615))+((sj3*x614)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x607)));
new_r20=((((-1.0)*x606*x616))+((sj3*x617)));
new_r21=(((cj3*x617))+((sj3*x616)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x607)));
IkReal x618=(cj5*sj2);
IkReal x619=((1.0)*sj2*sj5);
j0eval[0]=((IKabs((((r00*x618))+(((-1.0)*r01*x619)))))+(IKabs(((((-1.0)*r11*x619))+((r10*x618))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x620=((1.0)*cj3);
IkReal x621=((1.0)*sj5);
IkReal x622=((1.0)*cj4);
IkReal x623=x89;
IkReal x624=x90;
IkReal x625=x91;
IkReal x626=(((sj4*x623))+(((-1.0)*r02*x622)));
IkReal x627=(((cj4*x623))+((r02*sj4)));
IkReal x628=(((cj4*x624))+((r12*sj4)));
IkReal x629=(((sj4*x624))+(((-1.0)*r12*x622)));
IkReal x630=(((r22*sj4))+((cj4*x625)));
IkReal x631=(((sj4*x625))+(((-1.0)*r22*x622)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=((((-1.0)*x620*x627))+((sj3*x626)));
new_r01=(((cj3*x626))+((sj3*x627)));
new_r02=((((-1.0)*r01*x621))+((cj5*r00)));
new_r10=((((-1.0)*x620*x628))+((sj3*x629)));
new_r11=(((cj3*x629))+((sj3*x628)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x621)));
new_r20=((((-1.0)*x620*x630))+((sj3*x631)));
new_r21=(((cj3*x631))+((sj3*x630)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x621)));
IkReal x632=(cj2*cj5);
IkReal x633=((1.0)*cj2*sj5);
j0eval[0]=((IKabs(((((-1.0)*r01*x633))+((r00*x632)))))+(IKabs(((((-1.0)*r11*x633))+((r10*x632))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x634=((1.0)*cj3);
IkReal x635=((1.0)*sj5);
IkReal x636=((1.0)*cj4);
IkReal x637=x89;
IkReal x638=x90;
IkReal x639=x91;
IkReal x640=(((sj4*x637))+(((-1.0)*r02*x636)));
IkReal x641=(((cj4*x637))+((r02*sj4)));
IkReal x642=(((cj4*x638))+((r12*sj4)));
IkReal x643=(((sj4*x638))+(((-1.0)*r12*x636)));
IkReal x644=(((r22*sj4))+((cj4*x639)));
IkReal x645=(((sj4*x639))+(((-1.0)*r22*x636)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj3*x640))+(((-1.0)*x634*x641)));
new_r01=(((cj3*x640))+((sj3*x641)));
new_r02=((((-1.0)*r01*x635))+((cj5*r00)));
new_r10=(((sj3*x643))+(((-1.0)*x634*x642)));
new_r11=(((cj3*x643))+((sj3*x642)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x635)));
new_r20=(((sj3*x645))+(((-1.0)*x634*x644)));
new_r21=(((cj3*x645))+((sj3*x644)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x635)));
IkReal x646=(cj5*sj2);
IkReal x647=((1.0)*sj2*sj5);
j0eval[0]=((IKabs(((((-1.0)*r01*x647))+((r00*x646)))))+(IKabs(((((-1.0)*r11*x647))+((r10*x646))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r10, ((-1.0)*new_r11));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x648=IKcos(j0);
IkReal x649=IKsin(j0);
IkReal x650=((1.0)*x649);
evalcond[0]=(x648+new_r11);
evalcond[1]=((((-1.0)*x650))+new_r10);
evalcond[2]=((((-1.0)*x648))+new_r00);
evalcond[3]=((((-1.0)*x650))+new_r01);
evalcond[4]=(((new_r12*x649))+((new_r02*x648)));
evalcond[5]=(((new_r11*x649))+((new_r01*x648)));
evalcond[6]=((((-1.0)*new_r02*x650))+((new_r12*x648)));
evalcond[7]=((((-1.0)*new_r00*x650))+((new_r10*x648)));
evalcond[8]=((-1.0)+((new_r10*x649))+((new_r00*x648)));
evalcond[9]=((1.0)+((new_r11*x648))+(((-1.0)*new_r01*x650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x651=IKsin(j0);
IkReal x652=IKcos(j0);
IkReal x653=((1.0)*x651);
evalcond[0]=(x651+new_r10);
evalcond[1]=(x652+new_r00);
evalcond[2]=(x651+new_r01);
evalcond[3]=((((-1.0)*x652))+new_r11);
evalcond[4]=(((new_r12*x651))+((new_r02*x652)));
evalcond[5]=(((new_r01*x652))+((new_r11*x651)));
evalcond[6]=(((new_r12*x652))+(((-1.0)*new_r02*x653)));
evalcond[7]=((((-1.0)*new_r00*x653))+((new_r10*x652)));
evalcond[8]=((1.0)+((new_r10*x651))+((new_r00*x652)));
evalcond[9]=((-1.0)+(((-1.0)*new_r01*x653))+((new_r11*x652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r10));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x654=IKcos(j0);
IkReal x655=IKsin(j0);
IkReal x656=((1.0)*x655);
evalcond[0]=(x654+new_r10);
evalcond[1]=(x655+new_r11);
evalcond[2]=(x654+new_r01);
evalcond[3]=((((-1.0)*x656))+new_r00);
evalcond[4]=(((new_r12*x655))+((new_r02*x654)));
evalcond[5]=(((new_r10*x655))+((new_r00*x654)));
evalcond[6]=(((new_r12*x654))+(((-1.0)*new_r02*x656)));
evalcond[7]=((((-1.0)*new_r01*x656))+((new_r11*x654)));
evalcond[8]=((1.0)+((new_r01*x654))+((new_r11*x655)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x656))+((new_r10*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x657=IKsin(j0);
IkReal x658=IKcos(j0);
IkReal x659=((1.0)*x658);
IkReal x660=((1.0)*x657);
evalcond[0]=(x657+new_r00);
evalcond[1]=((((-1.0)*x659))+new_r10);
evalcond[2]=((((-1.0)*x660))+new_r11);
evalcond[3]=((((-1.0)*x659))+new_r01);
evalcond[4]=(((new_r12*x657))+((new_r02*x658)));
evalcond[5]=(((new_r10*x657))+((new_r00*x658)));
evalcond[6]=((((-1.0)*new_r02*x660))+((new_r12*x658)));
evalcond[7]=(((new_r11*x658))+(((-1.0)*new_r01*x660)));
evalcond[8]=((-1.0)+((new_r01*x658))+((new_r11*x657)));
evalcond[9]=((-1.0)+((new_r10*x658))+(((-1.0)*new_r00*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x661=((-1.0)*cj2);
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*new_r11);
evalcond[4]=new_r01;
evalcond[5]=new_r20;
evalcond[6]=sj2;
evalcond[7]=((-1.0)*sj2);
evalcond[8]=x661;
evalcond[9]=x661;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(new_r01),new_r11,IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
IkReal x662=x663.value;
j0array[0]=((-1.0)*x662);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x662)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j0))))+(((-1.0)*new_r01*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r00)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=0;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x664=((1.0)*cj3);
IkReal x665=((1.0)*sj5);
IkReal x666=((1.0)*cj4);
IkReal x667=x89;
IkReal x668=x90;
IkReal x669=x91;
IkReal x670=(((sj4*x667))+(((-1.0)*r02*x666)));
IkReal x671=(((r02*sj4))+((cj4*x667)));
IkReal x672=(((r12*sj4))+((cj4*x668)));
IkReal x673=(((sj4*x668))+(((-1.0)*r12*x666)));
IkReal x674=(((r22*sj4))+((cj4*x669)));
IkReal x675=((((-1.0)*r22*x666))+((sj4*x669)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj3*x670))+(((-1.0)*x664*x671)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x665)));
new_r01=(((cj3*x670))+((sj3*x671)));
new_r02=((((-1.0)*r01*x665))+((cj5*r00)));
new_r10=(((sj3*x673))+(((-1.0)*x664*x672)));
new_r11=(((cj3*x673))+((sj3*x672)));
new_r20=(((sj3*x675))+(((-1.0)*x664*x674)));
new_r21=(((cj3*x675))+((sj3*x674)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x665)));
j0eval[0]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x677=IKPowWithIntegerCheck(new_r10,-1);
if(!x677.valid){
continue;
}
IkReal x676=x677.value;
CheckValue<IkReal> x678=IKPowWithIntegerCheck(new_r11,-1);
if(!x678.valid){
continue;
}
if( IKabs((x676*(x678.value)*((((new_r01*sj2))+(((-1.0)*new_r10*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj2*x676)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x676*(x678.value)*((((new_r01*sj2))+(((-1.0)*new_r10*sj2))))))+IKsqr(((-1.0)*sj2*x676))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x676*(x678.value)*((((new_r01*sj2))+(((-1.0)*new_r10*sj2))))), ((-1.0)*sj2*x676));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x679=IKcos(j0);
IkReal x680=IKsin(j0);
IkReal x681=((1.0)*cj2);
IkReal x682=(sj2*x679);
IkReal x683=(sj2*x680);
IkReal x684=((1.0)*x680);
IkReal x685=(x680*x681);
evalcond[0]=(new_r02*x679);
evalcond[1]=((-1.0)*new_r02*x680);
evalcond[2]=(((new_r10*x679))+sj2);
evalcond[3]=((((-1.0)*x681))+((new_r10*x680)));
evalcond[4]=(((new_r01*x679))+sj2+((new_r11*x680)));
evalcond[5]=(((cj2*x679))+x683+new_r11);
evalcond[6]=(((new_r11*x679))+cj2+(((-1.0)*new_r01*x684)));
evalcond[7]=((((-1.0)*x685))+x682+new_r10);
evalcond[8]=((((-1.0)*x679*x681))+(((-1.0)*x683)));
evalcond[9]=((((-1.0)*x685))+x682+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal(cj2),((-1.0)*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x686.value)))+(x687.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x688=IKcos(j0);
IkReal x689=IKsin(j0);
IkReal x690=((1.0)*cj2);
IkReal x691=(sj2*x688);
IkReal x692=(sj2*x689);
IkReal x693=((1.0)*x689);
IkReal x694=(x689*x690);
evalcond[0]=(new_r02*x688);
evalcond[1]=((-1.0)*new_r02*x689);
evalcond[2]=(sj2+((new_r10*x688)));
evalcond[3]=((((-1.0)*x690))+((new_r10*x689)));
evalcond[4]=(sj2+((new_r01*x688))+((new_r11*x689)));
evalcond[5]=(x692+new_r11+((cj2*x688)));
evalcond[6]=(cj2+(((-1.0)*new_r01*x693))+((new_r11*x688)));
evalcond[7]=(x691+(((-1.0)*x694))+new_r10);
evalcond[8]=((((-1.0)*x688*x690))+(((-1.0)*x692)));
evalcond[9]=(x691+(((-1.0)*x694))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r02)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=0;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x695=((1.0)*cj3);
IkReal x696=((1.0)*sj5);
IkReal x697=((1.0)*cj4);
IkReal x698=x90;
IkReal x699=x89;
IkReal x700=x91;
IkReal x701=(((sj4*x699))+(((-1.0)*r02*x697)));
IkReal x702=(((cj4*x699))+((r02*sj4)));
IkReal x703=(((cj4*x698))+((r12*sj4)));
IkReal x704=(((sj4*x698))+(((-1.0)*r12*x697)));
IkReal x705=(((cj4*x700))+((r22*sj4)));
IkReal x706=((((-1.0)*r22*x697))+((sj4*x700)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r10=((((-1.0)*x695*x703))+((sj3*x704)));
new_r02=((((-1.0)*r01*x696))+((cj5*r00)));
new_r00=((((-1.0)*x695*x702))+((sj3*x701)));
new_r01=(((sj3*x702))+((cj3*x701)));
new_r11=(((sj3*x703))+((cj3*x704)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x696)));
new_r20=((((-1.0)*x695*x705))+((sj3*x706)));
new_r21=(((sj3*x705))+((cj3*x706)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x696)));
j0eval[0]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x709=IKPowWithIntegerCheck(new_r00,-1);
if(!x709.valid){
continue;
}
IkReal x707=x709.value;
IkReal x708=((1.0)*sj2);
CheckValue<IkReal> x710=IKPowWithIntegerCheck(new_r01,-1);
if(!x710.valid){
continue;
}
if( IKabs((sj2*x707)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x707*(x710.value)*(((((-1.0)*new_r11*x708))+(((-1.0)*new_r00*x708)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj2*x707))+IKsqr((x707*(x710.value)*(((((-1.0)*new_r11*x708))+(((-1.0)*new_r00*x708))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((sj2*x707), (x707*(x710.value)*(((((-1.0)*new_r11*x708))+(((-1.0)*new_r00*x708))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x711=IKsin(j0);
IkReal x712=IKcos(j0);
IkReal x713=((1.0)*cj2);
IkReal x714=(sj2*x712);
IkReal x715=(sj2*x711);
IkReal x716=((1.0)*x711);
IkReal x717=(x711*x713);
evalcond[0]=(new_r12*x712);
evalcond[1]=(new_r12*x711);
evalcond[2]=(sj2+(((-1.0)*new_r00*x716)));
evalcond[3]=(((new_r00*x712))+(((-1.0)*x713)));
evalcond[4]=((((-1.0)*x717))+x714);
evalcond[5]=(sj2+((new_r01*x712))+((new_r11*x711)));
evalcond[6]=(x715+new_r11+((cj2*x712)));
evalcond[7]=(cj2+((new_r11*x712))+(((-1.0)*new_r01*x716)));
evalcond[8]=((((-1.0)*x717))+x714+new_r01);
evalcond[9]=((((-1.0)*x715))+(((-1.0)*x712*x713))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal(sj2),cj2,IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x718.value)))+(x719.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x720=IKsin(j0);
IkReal x721=IKcos(j0);
IkReal x722=((1.0)*cj2);
IkReal x723=(sj2*x721);
IkReal x724=(sj2*x720);
IkReal x725=((1.0)*x720);
IkReal x726=(x720*x722);
evalcond[0]=(new_r12*x721);
evalcond[1]=(new_r12*x720);
evalcond[2]=(sj2+(((-1.0)*new_r00*x725)));
evalcond[3]=(((new_r00*x721))+(((-1.0)*x722)));
evalcond[4]=((((-1.0)*x726))+x723);
evalcond[5]=(sj2+((new_r01*x721))+((new_r11*x720)));
evalcond[6]=(((cj2*x721))+x724+new_r11);
evalcond[7]=(cj2+((new_r11*x721))+(((-1.0)*new_r01*x725)));
evalcond[8]=((((-1.0)*x726))+x723+new_r01);
evalcond[9]=((((-1.0)*x724))+(((-1.0)*x721*x722))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x727=((1.0)*sj5);
IkReal x728=((1.0)*cj3);
IkReal x729=((1.0)*cj4);
IkReal x730=x91;
IkReal x731=x89;
IkReal x732=x90;
IkReal x733=(((cj4*x730))+((r22*sj4)));
IkReal x734=(((sj4*x730))+(((-1.0)*r22*x729)));
IkReal x735=((((-1.0)*r02*x729))+((sj4*x731)));
IkReal x736=(((cj4*x731))+((r02*sj4)));
IkReal x737=((((-1.0)*r12*x729))+((sj4*x732)));
IkReal x738=(((cj4*x732))+((r12*sj4)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r02=((((-1.0)*r01*x727))+((cj5*r00)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x727)));
new_r20=(((sj3*x734))+(((-1.0)*x728*x733)));
new_r21=(((sj3*x733))+((cj3*x734)));
new_r01=(((sj3*x736))+((cj3*x735)));
new_r11=(((sj3*x738))+((cj3*x737)));
new_r00=(((sj3*x735))+(((-1.0)*x728*x736)));
new_r10=(((sj3*x737))+(((-1.0)*x728*x738)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x727)));
j0eval[0]=1.0;
j0eval[1]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x739=((1.0)*new_r00);
CheckValue<IkReal> x740=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*x739))+((cj2*new_r10)))),-1);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(((((-1.0)*(cj2*cj2)))+(new_r00*new_r00))),(((cj2*sj2))+(((-1.0)*new_r10*x739))),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x740.value)))+(x741.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x742=IKcos(j0);
IkReal x743=IKsin(j0);
IkReal x744=((1.0)*cj2);
IkReal x745=(new_r00*x742);
IkReal x746=(new_r10*x743);
IkReal x747=(sj2*x742);
IkReal x748=(sj2*x743);
IkReal x749=((1.0)*x742);
IkReal x750=(new_r00*x743);
IkReal x751=(x743*x744);
IkReal x752=(x746+x745);
evalcond[0]=(cj2+x752);
evalcond[1]=(((cj2*x742))+x748+new_r00);
evalcond[2]=(sj2+((new_r10*x742))+(((-1.0)*x750)));
evalcond[3]=(x747+new_r10+(((-1.0)*x751)));
evalcond[4]=(sj2+(((-1.0)*new_r10*x749))+x750);
evalcond[5]=(x752+(((-1.0)*x744)));
evalcond[6]=((((-1.0)*x742*x744))+(((-1.0)*x748))+new_r00);
evalcond[7]=((((-1.0)*new_r10))+x747+(((-1.0)*x751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x753=((1.0)*cj2);
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x754.valid){
continue;
}
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal((((new_r00*sj2))+(((-1.0)*new_r10*x753)))),((((-1.0)*new_r00*x753))+(((-1.0)*new_r10*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x754.value)))+(x755.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x756=IKcos(j0);
IkReal x757=IKsin(j0);
IkReal x758=((1.0)*cj2);
IkReal x759=(new_r00*x756);
IkReal x760=(new_r10*x757);
IkReal x761=(sj2*x756);
IkReal x762=(sj2*x757);
IkReal x763=((1.0)*x756);
IkReal x764=(new_r00*x757);
IkReal x765=(x757*x758);
IkReal x766=(x759+x760);
evalcond[0]=(cj2+x766);
evalcond[1]=(((cj2*x756))+x762+new_r00);
evalcond[2]=(sj2+((new_r10*x756))+(((-1.0)*x764)));
evalcond[3]=((((-1.0)*x765))+x761+new_r10);
evalcond[4]=(sj2+(((-1.0)*new_r10*x763))+x764);
evalcond[5]=(x766+(((-1.0)*x758)));
evalcond[6]=((((-1.0)*x762))+(((-1.0)*x756*x758))+new_r00);
evalcond[7]=((((-1.0)*x765))+(((-1.0)*new_r10))+x761);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal((new_r02*sj2)),((-1.0)*new_r12*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x767.value)))+(x768.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x769=IKcos(j0);
IkReal x770=IKsin(j0);
IkReal x771=((1.0)*cj2);
IkReal x772=(sj2*x769);
IkReal x773=(sj2*x770);
IkReal x774=((1.0)*x770);
IkReal x775=(x770*x771);
evalcond[0]=(((new_r02*x769))+((new_r12*x770)));
evalcond[1]=(((new_r12*x769))+(((-1.0)*new_r02*x774)));
evalcond[2]=(sj2+((new_r01*x769))+((new_r11*x770)));
evalcond[3]=(((cj2*x769))+x773+new_r11);
evalcond[4]=(((new_r10*x769))+sj2+(((-1.0)*new_r00*x774)));
evalcond[5]=(((new_r11*x769))+cj2+(((-1.0)*new_r01*x774)));
evalcond[6]=(x772+(((-1.0)*x775))+new_r10);
evalcond[7]=(x772+(((-1.0)*x775))+new_r01);
evalcond[8]=(((new_r00*x769))+((new_r10*x770))+(((-1.0)*x771)));
evalcond[9]=((((-1.0)*x769*x771))+new_r00+(((-1.0)*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x776=IKPowWithIntegerCheck(IKsign((((new_r11*new_r12))+((new_r01*new_r02)))),-1);
if(!x776.valid){
continue;
}
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal((cj2*new_r02)),((-1.0)*cj2*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x776.value)))+(x777.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x778=IKcos(j0);
IkReal x779=IKsin(j0);
IkReal x780=((1.0)*cj2);
IkReal x781=(sj2*x778);
IkReal x782=(sj2*x779);
IkReal x783=((1.0)*x779);
IkReal x784=(x779*x780);
evalcond[0]=(((new_r12*x779))+((new_r02*x778)));
evalcond[1]=(((new_r12*x778))+(((-1.0)*new_r02*x783)));
evalcond[2]=(sj2+((new_r11*x779))+((new_r01*x778)));
evalcond[3]=(((cj2*x778))+x782+new_r11);
evalcond[4]=(sj2+((new_r10*x778))+(((-1.0)*new_r00*x783)));
evalcond[5]=((((-1.0)*new_r01*x783))+cj2+((new_r11*x778)));
evalcond[6]=((((-1.0)*x784))+x781+new_r10);
evalcond[7]=((((-1.0)*x784))+x781+new_r01);
evalcond[8]=((((-1.0)*x780))+((new_r00*x778))+((new_r10*x779)));
evalcond[9]=((((-1.0)*x782))+new_r00+(((-1.0)*x778*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x785=IKPowWithIntegerCheck(IKsign((((new_r10*new_r12))+((new_r00*new_r02)))),-1);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786 = IKatan2WithCheck(IkReal((new_r02*sj2)),((-1.0)*new_r12*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x786.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x785.value)))+(x786.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x787=IKcos(j0);
IkReal x788=IKsin(j0);
IkReal x789=((1.0)*cj2);
IkReal x790=(sj2*x787);
IkReal x791=(sj2*x788);
IkReal x792=((1.0)*x788);
IkReal x793=(x788*x789);
evalcond[0]=(((new_r12*x788))+((new_r02*x787)));
evalcond[1]=(((new_r12*x787))+(((-1.0)*new_r02*x792)));
evalcond[2]=(sj2+((new_r11*x788))+((new_r01*x787)));
evalcond[3]=(x791+new_r11+((cj2*x787)));
evalcond[4]=(sj2+((new_r10*x787))+(((-1.0)*new_r00*x792)));
evalcond[5]=((((-1.0)*new_r01*x792))+cj2+((new_r11*x787)));
evalcond[6]=((((-1.0)*x793))+x790+new_r10);
evalcond[7]=((((-1.0)*x793))+x790+new_r01);
evalcond[8]=(((new_r10*x788))+(((-1.0)*x789))+((new_r00*x787)));
evalcond[9]=((((-1.0)*x787*x789))+(((-1.0)*x791))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(cj1,-1);
if(!x795.valid){
continue;
}
IkReal x794=x795.value;
CheckValue<IkReal> x796=IKPowWithIntegerCheck(new_r00,-1);
if(!x796.valid){
continue;
}
if( IKabs((x794*(x796.value)*((((cj1*sj2))+((new_r02*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x794)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x794*(x796.value)*((((cj1*sj2))+((new_r02*new_r10))))))+IKsqr((new_r02*x794))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x794*(x796.value)*((((cj1*sj2))+((new_r02*new_r10))))), (new_r02*x794));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[18];
IkReal x797=IKcos(j0);
IkReal x798=IKsin(j0);
IkReal x799=((1.0)*sj1);
IkReal x800=(cj2*sj1);
IkReal x801=((1.0)*cj1);
IkReal x802=(new_r10*x798);
IkReal x803=(new_r01*x797);
IkReal x804=(sj2*x798);
IkReal x805=(new_r00*x797);
IkReal x806=(cj2*x797);
IkReal x807=((1.0)*x798);
IkReal x808=(new_r11*x798);
IkReal x809=(new_r12*x798);
IkReal x810=(new_r02*x797);
IkReal x811=(sj2*x797);
evalcond[0]=((((-1.0)*x797*x801))+new_r02);
evalcond[1]=((((-1.0)*x798*x801))+new_r12);
evalcond[2]=(((new_r12*x797))+(((-1.0)*new_r02*x807)));
evalcond[3]=(sj2+((new_r10*x797))+(((-1.0)*new_r00*x807)));
evalcond[4]=((((-1.0)*new_r01*x807))+cj2+((new_r11*x797)));
evalcond[5]=(((x798*x800))+new_r10+x811);
evalcond[6]=(x810+x809+(((-1.0)*x801)));
evalcond[7]=(x805+x800+x802);
evalcond[8]=((((-1.0)*x804))+((x797*x800))+new_r00);
evalcond[9]=((((-1.0)*x799*x804))+new_r11+x806);
evalcond[10]=(x808+x803+(((-1.0)*sj2*x799)));
evalcond[11]=((((-1.0)*cj2*x807))+(((-1.0)*x799*x811))+new_r01);
evalcond[12]=(((new_r20*sj1))+((cj1*x805))+((cj1*x802)));
evalcond[13]=(((cj1*x808))+((cj1*x803))+((new_r21*sj1)));
evalcond[14]=((-1.0)+((cj1*x809))+((new_r22*sj1))+((cj1*x810)));
evalcond[15]=(((cj1*new_r22))+(((-1.0)*x799*x809))+(((-1.0)*x799*x810)));
evalcond[16]=(sj2+((cj1*new_r21))+(((-1.0)*x799*x803))+(((-1.0)*x799*x808)));
evalcond[17]=(((cj1*new_r20))+(((-1.0)*x799*x802))+(((-1.0)*x799*x805))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x812=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x812.value)))+(x813.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[18];
IkReal x814=IKcos(j0);
IkReal x815=IKsin(j0);
IkReal x816=((1.0)*sj1);
IkReal x817=(cj2*sj1);
IkReal x818=((1.0)*cj1);
IkReal x819=(new_r10*x815);
IkReal x820=(new_r01*x814);
IkReal x821=(sj2*x815);
IkReal x822=(new_r00*x814);
IkReal x823=(cj2*x814);
IkReal x824=((1.0)*x815);
IkReal x825=(new_r11*x815);
IkReal x826=(new_r12*x815);
IkReal x827=(new_r02*x814);
IkReal x828=(sj2*x814);
evalcond[0]=((((-1.0)*x814*x818))+new_r02);
evalcond[1]=((((-1.0)*x815*x818))+new_r12);
evalcond[2]=(((new_r12*x814))+(((-1.0)*new_r02*x824)));
evalcond[3]=(sj2+((new_r10*x814))+(((-1.0)*new_r00*x824)));
evalcond[4]=(cj2+((new_r11*x814))+(((-1.0)*new_r01*x824)));
evalcond[5]=(((x815*x817))+new_r10+x828);
evalcond[6]=((((-1.0)*x818))+x827+x826);
evalcond[7]=(x819+x817+x822);
evalcond[8]=(((x814*x817))+(((-1.0)*x821))+new_r00);
evalcond[9]=((((-1.0)*x816*x821))+new_r11+x823);
evalcond[10]=(x820+x825+(((-1.0)*sj2*x816)));
evalcond[11]=((((-1.0)*x816*x828))+new_r01+(((-1.0)*cj2*x824)));
evalcond[12]=(((new_r20*sj1))+((cj1*x819))+((cj1*x822)));
evalcond[13]=(((new_r21*sj1))+((cj1*x820))+((cj1*x825)));
evalcond[14]=((-1.0)+((new_r22*sj1))+((cj1*x827))+((cj1*x826)));
evalcond[15]=((((-1.0)*x816*x827))+(((-1.0)*x816*x826))+((cj1*new_r22)));
evalcond[16]=((((-1.0)*x816*x820))+(((-1.0)*x816*x825))+sj2+((cj1*new_r21)));
evalcond[17]=((((-1.0)*x816*x822))+(((-1.0)*x816*x819))+((cj1*new_r20))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x830.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x829.value)))+(x830.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x831=IKcos(j0);
IkReal x832=IKsin(j0);
IkReal x833=(cj1*x831);
IkReal x834=(cj1*x832);
IkReal x835=((1.0)*x832);
IkReal x836=(new_r02*x831);
evalcond[0]=((((-1.0)*x833))+new_r02);
evalcond[1]=((((-1.0)*x834))+new_r12);
evalcond[2]=(((new_r12*x831))+(((-1.0)*new_r02*x835)));
evalcond[3]=(((new_r12*x832))+x836+(((-1.0)*cj1)));
evalcond[4]=(((new_r20*sj1))+((new_r00*x833))+((new_r10*x834)));
evalcond[5]=(((new_r11*x834))+((new_r01*x833))+((new_r21*sj1)));
evalcond[6]=((-1.0)+((new_r12*x834))+((new_r02*x833))+((new_r22*sj1)));
evalcond[7]=(((cj1*new_r22))+(((-1.0)*new_r12*sj1*x835))+(((-1.0)*sj1*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x837=((1.0)*cj3);
IkReal x838=((1.0)*sj5);
IkReal x839=((1.0)*cj4);
IkReal x840=x89;
IkReal x841=x90;
IkReal x842=x91;
IkReal x843=((((-1.0)*r02*x839))+((sj4*x840)));
IkReal x844=(((cj4*x840))+((r02*sj4)));
IkReal x845=(((cj4*x841))+((r12*sj4)));
IkReal x846=(((sj4*x841))+(((-1.0)*r12*x839)));
IkReal x847=(((r22*sj4))+((cj4*x842)));
IkReal x848=(((sj4*x842))+(((-1.0)*r22*x839)));
new_r00=((((-1.0)*x837*x844))+((sj3*x843)));
new_r01=(((cj3*x843))+((sj3*x844)));
new_r02=((((-1.0)*r01*x838))+((cj5*r00)));
new_r10=((((-1.0)*x837*x845))+((sj3*x846)));
new_r11=(((cj3*x846))+((sj3*x845)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x838)));
new_r20=((((-1.0)*x837*x847))+((sj3*x848)));
new_r21=(((cj3*x848))+((sj3*x847)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x838)));
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x849=((1.0)*cj3);
IkReal x850=((1.0)*sj5);
IkReal x851=((1.0)*cj4);
IkReal x852=x89;
IkReal x853=x90;
IkReal x854=x91;
IkReal x855=((((-1.0)*r02*x851))+((sj4*x852)));
IkReal x856=(((r02*sj4))+((cj4*x852)));
IkReal x857=(((r12*sj4))+((cj4*x853)));
IkReal x858=((((-1.0)*r12*x851))+((sj4*x853)));
IkReal x859=(((r22*sj4))+((cj4*x854)));
IkReal x860=((((-1.0)*r22*x851))+((sj4*x854)));
new_r00=(((sj3*x855))+(((-1.0)*x849*x856)));
new_r01=(((sj3*x856))+((cj3*x855)));
new_r02=((((-1.0)*r01*x850))+((cj5*r00)));
new_r10=(((sj3*x858))+(((-1.0)*x849*x857)));
new_r11=(((sj3*x857))+((cj3*x858)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x850)));
new_r20=(((sj3*x860))+(((-1.0)*x849*x859)));
new_r21=(((cj3*x860))+((sj3*x859)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x850)));
j2eval[0]=cj1;
j2eval[1]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x861=((1.0)*cj3);
IkReal x862=((1.0)*sj5);
IkReal x863=((1.0)*cj4);
IkReal x864=x89;
IkReal x865=x90;
IkReal x866=x91;
IkReal x867=(((sj4*x864))+(((-1.0)*r02*x863)));
IkReal x868=(((r02*sj4))+((cj4*x864)));
IkReal x869=(((r12*sj4))+((cj4*x865)));
IkReal x870=(((sj4*x865))+(((-1.0)*r12*x863)));
IkReal x871=(((r22*sj4))+((cj4*x866)));
IkReal x872=(((sj4*x866))+(((-1.0)*r22*x863)));
new_r00=(((sj3*x867))+(((-1.0)*x861*x868)));
new_r01=(((sj3*x868))+((cj3*x867)));
new_r02=((((-1.0)*r01*x862))+((cj5*r00)));
new_r10=(((sj3*x870))+(((-1.0)*x861*x869)));
new_r11=(((sj3*x869))+((cj3*x870)));
new_r12=(((cj5*r10))+(((-1.0)*r11*x862)));
new_r20=(((sj3*x872))+(((-1.0)*x861*x871)));
new_r21=(((sj3*x871))+((cj3*x872)));
new_r22=(((cj5*r20))+(((-1.0)*r21*x862)));
j2eval[0]=cj1;
j2eval[1]=sj0;
j2eval[2]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x873=(new_r12*sj0);
IkReal x874=(new_r02*sj0);
IkReal x875=((1.0)*cj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
evalcond[6]=((((-1.0)*x874))+((cj0*new_r12)));
evalcond[7]=((((-1.0)*new_r12*x875))+x874);
evalcond[8]=(((cj0*new_r02))+x873);
evalcond[9]=((((-1.0)*x873))+(((-1.0)*new_r02*x875)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x876=((1.0)*cj0);
if( IKabs((((new_r00*sj0))+(((-1.0)*new_r10*x876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x876))+(((-1.0)*new_r10*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj0))+(((-1.0)*new_r10*x876))))+IKsqr(((((-1.0)*new_r00*x876))+(((-1.0)*new_r10*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r00*sj0))+(((-1.0)*new_r10*x876))), ((((-1.0)*new_r00*x876))+(((-1.0)*new_r10*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x877=IKcos(j2);
IkReal x878=IKsin(j2);
IkReal x879=((1.0)*sj0);
IkReal x880=(cj0*x877);
IkReal x881=(cj0*x878);
IkReal x882=(x878*x879);
evalcond[0]=(((new_r10*sj0))+((cj0*new_r00))+x877);
evalcond[1]=((((-1.0)*new_r00*x879))+x878+((cj0*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x879))+x877+((cj0*new_r11)));
evalcond[3]=(((sj0*x877))+new_r10+x881);
evalcond[4]=(((new_r11*sj0))+(((-1.0)*x878))+((cj0*new_r01)));
evalcond[5]=((((-1.0)*x882))+new_r00+x880);
evalcond[6]=((((-1.0)*x882))+new_r11+x880);
evalcond[7]=((((-1.0)*x877*x879))+(((-1.0)*x881))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x883=(new_r02*sj0);
IkReal x884=(cj0*new_r12);
IkReal x885=(((new_r12*sj0))+((cj0*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r20;
evalcond[6]=((((-1.0)*x883))+x884);
evalcond[7]=((((-1.0)*x884))+x883);
evalcond[8]=x885;
evalcond[9]=x885;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x886=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r10*x886))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj0))+(((-1.0)*new_r11*x886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x886))+(((-1.0)*new_r11*sj0))))+IKsqr((((new_r10*sj0))+(((-1.0)*new_r11*x886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r10*x886))+(((-1.0)*new_r11*sj0))), (((new_r10*sj0))+(((-1.0)*new_r11*x886))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x887=IKsin(j2);
IkReal x888=IKcos(j2);
IkReal x889=((1.0)*sj0);
IkReal x890=(cj0*x887);
IkReal x891=((1.0)*x888);
IkReal x892=(x888*x889);
evalcond[0]=(((new_r11*sj0))+((cj0*new_r01))+x887);
evalcond[1]=((((-1.0)*new_r00*x889))+x887+((cj0*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x889))+x888+((cj0*new_r11)));
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x891))+((cj0*new_r00)));
evalcond[4]=(((sj0*x887))+((cj0*x888))+new_r11);
evalcond[5]=((((-1.0)*x892))+new_r10+x890);
evalcond[6]=((((-1.0)*x892))+new_r01+x890);
evalcond[7]=((((-1.0)*x887*x889))+(((-1.0)*cj0*x891))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x893=((((-1.0)*sj1))+new_r22);
IkReal x894=(new_r02+(((-1.0)*cj1)));
IkReal x895=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=x893;
evalcond[2]=x893;
evalcond[3]=x894;
evalcond[4]=new_r12;
evalcond[5]=x894;
evalcond[6]=(((new_r20*sj1))+((cj1*new_r00)));
evalcond[7]=(((cj1*new_r01))+((new_r21*sj1)));
evalcond[8]=((-1.0)+((cj1*new_r02))+((new_r22*sj1)));
evalcond[9]=(((cj1*new_r22))+(((-1.0)*new_r02*x895)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x896=IKsin(j2);
IkReal x897=IKcos(j2);
IkReal x898=((1.0)*new_r22);
IkReal x899=((1.0)*x897);
evalcond[0]=(new_r10+x896);
evalcond[1]=(new_r11+x897);
evalcond[2]=(((new_r02*x896))+new_r21);
evalcond[3]=(((new_r22*x897))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x899))+new_r20);
evalcond[5]=((((-1.0)*x896*x898))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x898))+((new_r02*new_r21))+x896);
evalcond[7]=((((-1.0)*x899))+(((-1.0)*new_r00*x898))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x900=((((-1.0)*sj1))+new_r22);
IkReal x901=((1.0)*new_r02);
IkReal x902=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=x900;
evalcond[2]=x900;
evalcond[3]=(cj1+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x902))+(((-1.0)*x901)));
evalcond[6]=(((new_r20*sj1))+(((-1.0)*new_r00*x902)));
evalcond[7]=(((new_r21*sj1))+(((-1.0)*new_r01*x902)));
evalcond[8]=((-1.0)+((new_r22*sj1))+(((-1.0)*cj1*x901)));
evalcond[9]=(((new_r02*sj1))+((cj1*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r10, new_r11);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x903=IKcos(j2);
IkReal x904=IKsin(j2);
IkReal x905=((1.0)*new_r02);
IkReal x906=((1.0)*x904);
evalcond[0]=(new_r20+((new_r02*x903)));
evalcond[1]=((((-1.0)*new_r10))+x904);
evalcond[2]=((((-1.0)*new_r11))+x903);
evalcond[3]=(new_r21+(((-1.0)*x904*x905)));
evalcond[4]=(((new_r22*x903))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*new_r22*x906)));
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x905))+x904);
evalcond[7]=((((-1.0)*new_r20*x905))+((new_r00*new_r22))+(((-1.0)*x903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x907=((1.0)*sj0);
IkReal x908=(cj0*new_r12);
IkReal x909=(((new_r10*sj0))+((cj0*new_r00)));
IkReal x910=(((new_r11*sj0))+((cj0*new_r01)));
IkReal x911=((-1.0)+((new_r12*sj0))+((cj0*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x907))+new_r12);
evalcond[4]=((((-1.0)*new_r02*x907))+x908);
evalcond[5]=(((new_r02*sj0))+(((-1.0)*x908)));
evalcond[6]=x911;
evalcond[7]=x909;
evalcond[8]=x910;
evalcond[9]=x909;
evalcond[10]=x910;
evalcond[11]=x911;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x912=IKsin(j2);
IkReal x913=IKcos(j2);
IkReal x914=((1.0)*new_r12);
evalcond[0]=(new_r21+x912);
evalcond[1]=((((-1.0)*x913))+new_r20);
evalcond[2]=(new_r10+((new_r02*x912)));
evalcond[3]=(new_r11+((new_r02*x913)));
evalcond[4]=((((-1.0)*x912*x914))+new_r00);
evalcond[5]=((((-1.0)*x913*x914))+new_r01);
evalcond[6]=(((new_r02*new_r10))+(((-1.0)*new_r00*x914))+x912);
evalcond[7]=(((new_r02*new_r11))+(((-1.0)*new_r01*x914))+x913);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x915=(new_r12*sj0);
IkReal x916=(cj0*new_r01);
IkReal x917=(new_r02*sj0);
IkReal x918=((1.0)*cj0);
IkReal x919=(new_r11*sj0);
IkReal x920=(new_r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj0+new_r02);
evalcond[3]=(sj0+new_r12);
evalcond[4]=((((-1.0)*x917))+((cj0*new_r12)));
evalcond[5]=((((-1.0)*new_r12*x918))+x917);
evalcond[6]=((1.0)+((cj0*new_r02))+x915);
evalcond[7]=(((cj0*new_r00))+x920);
evalcond[8]=(x919+x916);
evalcond[9]=((((-1.0)*x920))+(((-1.0)*new_r00*x918)));
evalcond[10]=((((-1.0)*x916))+(((-1.0)*x919)));
evalcond[11]=((-1.0)+(((-1.0)*new_r02*x918))+(((-1.0)*x915)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x921=IKsin(j2);
IkReal x922=IKcos(j2);
IkReal x923=((1.0)*new_r02);
evalcond[0]=(new_r20+x922);
evalcond[1]=((((-1.0)*x921))+new_r21);
evalcond[2]=(((new_r12*x921))+new_r00);
evalcond[3]=(((new_r12*x922))+new_r01);
evalcond[4]=((((-1.0)*x921*x923))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x922*x923)));
evalcond[6]=((((-1.0)*new_r10*x923))+((new_r00*new_r12))+x921);
evalcond[7]=((((-1.0)*new_r11*x923))+((new_r01*new_r12))+x922);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x924=((((-1.0)*sj1))+new_r22);
IkReal x925=(new_r12+(((-1.0)*cj1)));
IkReal x926=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x924;
evalcond[2]=x924;
evalcond[3]=new_r02;
evalcond[4]=x925;
evalcond[5]=x925;
evalcond[6]=(((new_r20*sj1))+((cj1*new_r10)));
evalcond[7]=(((cj1*new_r11))+((new_r21*sj1)));
evalcond[8]=((-1.0)+((cj1*new_r12))+((new_r22*sj1)));
evalcond[9]=(((cj1*new_r22))+(((-1.0)*new_r12*x926)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x927=IKsin(j2);
IkReal x928=IKcos(j2);
IkReal x929=((1.0)*new_r22);
IkReal x930=((1.0)*x928);
evalcond[0]=(((new_r12*x927))+new_r21);
evalcond[1]=((((-1.0)*new_r00))+x927);
evalcond[2]=((((-1.0)*new_r01))+x928);
evalcond[3]=(((new_r22*x928))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x930))+new_r20);
evalcond[5]=((((-1.0)*x927*x929))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x929))+((new_r12*new_r21))+x927);
evalcond[7]=((((-1.0)*new_r10*x929))+((new_r12*new_r20))+(((-1.0)*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x931=((((-1.0)*sj1))+new_r22);
IkReal x932=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x931;
evalcond[2]=x931;
evalcond[3]=new_r02;
evalcond[4]=(cj1+new_r12);
evalcond[5]=((((-1.0)*new_r12))+(((-1.0)*x932)));
evalcond[6]=(((new_r20*sj1))+(((-1.0)*new_r10*x932)));
evalcond[7]=((((-1.0)*new_r11*x932))+((new_r21*sj1)));
evalcond[8]=((-1.0)+((new_r22*sj1))+(((-1.0)*new_r12*x932)));
evalcond[9]=(((new_r12*sj1))+((cj1*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x933=IKcos(j2);
IkReal x934=IKsin(j2);
IkReal x935=((1.0)*new_r12);
IkReal x936=((1.0)*x934);
evalcond[0]=(new_r00+x934);
evalcond[1]=(new_r01+x933);
evalcond[2]=(((new_r12*x933))+new_r20);
evalcond[3]=((((-1.0)*x934*x935))+new_r21);
evalcond[4]=(((new_r22*x933))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*new_r22*x936))+(((-1.0)*new_r11)));
evalcond[6]=((((-1.0)*new_r21*x935))+((new_r11*new_r22))+x934);
evalcond[7]=((((-1.0)*x933))+((new_r10*new_r22))+(((-1.0)*new_r20*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x938=IKPowWithIntegerCheck(cj1,-1);
if(!x938.valid){
continue;
}
IkReal x937=x938.value;
CheckValue<IkReal> x939=IKPowWithIntegerCheck(sj0,-1);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940=IKPowWithIntegerCheck(sj1,-1);
if(!x940.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x937)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x937*(x939.value)*(x940.value)*((((cj0*new_r21))+(((-1.0)*cj1*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x937))+IKsqr((x937*(x939.value)*(x940.value)*((((cj0*new_r21))+(((-1.0)*cj1*new_r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*x937), (x937*(x939.value)*(x940.value)*((((cj0*new_r21))+(((-1.0)*cj1*new_r10))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x941=IKsin(j2);
IkReal x942=IKcos(j2);
IkReal x943=((1.0)*sj0);
IkReal x944=(cj0*new_r00);
IkReal x945=((1.0)*cj0);
IkReal x946=((1.0)*x942);
IkReal x947=(sj1*x941);
IkReal x948=(sj1*x942);
evalcond[0]=(((cj1*x941))+new_r21);
evalcond[1]=((((-1.0)*cj1*x946))+new_r20);
evalcond[2]=(((cj0*new_r10))+(((-1.0)*new_r00*x943))+x941);
evalcond[3]=((((-1.0)*new_r01*x943))+((cj0*new_r11))+x942);
evalcond[4]=(((new_r10*sj0))+x948+x944);
evalcond[5]=(((cj0*x941))+((sj0*x948))+new_r10);
evalcond[6]=(((new_r11*sj0))+(((-1.0)*x947))+((cj0*new_r01)));
evalcond[7]=(((cj0*x948))+(((-1.0)*x941*x943))+new_r00);
evalcond[8]=(((cj0*x942))+(((-1.0)*x943*x947))+new_r11);
evalcond[9]=((((-1.0)*x945*x947))+(((-1.0)*x942*x943))+new_r01);
evalcond[10]=(((cj1*new_r21))+(((-1.0)*new_r11*sj1*x943))+(((-1.0)*new_r01*sj1*x945))+x941);
evalcond[11]=((((-1.0)*x946))+((cj1*new_r20))+(((-1.0)*sj1*x944))+(((-1.0)*new_r10*sj1*x943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x950=IKPowWithIntegerCheck(cj1,-1);
if(!x950.valid){
continue;
}
IkReal x949=x950.value;
CheckValue<IkReal> x951=IKPowWithIntegerCheck(cj0,-1);
if(!x951.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x949)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x949*(x951.value)*(((((-1.0)*new_r21*sj0*sj1))+(((-1.0)*cj1*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x949))+IKsqr((x949*(x951.value)*(((((-1.0)*new_r21*sj0*sj1))+(((-1.0)*cj1*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*x949), (x949*(x951.value)*(((((-1.0)*new_r21*sj0*sj1))+(((-1.0)*cj1*new_r11))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x952=IKsin(j2);
IkReal x953=IKcos(j2);
IkReal x954=((1.0)*sj0);
IkReal x955=(cj0*new_r00);
IkReal x956=((1.0)*cj0);
IkReal x957=((1.0)*x953);
IkReal x958=(sj1*x952);
IkReal x959=(sj1*x953);
evalcond[0]=(((cj1*x952))+new_r21);
evalcond[1]=((((-1.0)*cj1*x957))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x954))+((cj0*new_r10))+x952);
evalcond[3]=((((-1.0)*new_r01*x954))+((cj0*new_r11))+x953);
evalcond[4]=(((new_r10*sj0))+x959+x955);
evalcond[5]=(((sj0*x959))+new_r10+((cj0*x952)));
evalcond[6]=(((new_r11*sj0))+(((-1.0)*x958))+((cj0*new_r01)));
evalcond[7]=(new_r00+(((-1.0)*x952*x954))+((cj0*x959)));
evalcond[8]=(new_r11+(((-1.0)*x954*x958))+((cj0*x953)));
evalcond[9]=((((-1.0)*x956*x958))+(((-1.0)*x953*x954))+new_r01);
evalcond[10]=((((-1.0)*new_r11*sj1*x954))+((cj1*new_r21))+x952+(((-1.0)*new_r01*sj1*x956)));
evalcond[11]=(((cj1*new_r20))+(((-1.0)*new_r10*sj1*x954))+(((-1.0)*x957))+(((-1.0)*sj1*x955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x960.value)))+(x961.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x962=IKsin(j2);
IkReal x963=IKcos(j2);
IkReal x964=((1.0)*sj0);
IkReal x965=(cj0*new_r00);
IkReal x966=((1.0)*cj0);
IkReal x967=((1.0)*x963);
IkReal x968=(sj1*x962);
IkReal x969=(sj1*x963);
evalcond[0]=(((cj1*x962))+new_r21);
evalcond[1]=((((-1.0)*cj1*x967))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x964))+((cj0*new_r10))+x962);
evalcond[3]=((((-1.0)*new_r01*x964))+((cj0*new_r11))+x963);
evalcond[4]=(((new_r10*sj0))+x965+x969);
evalcond[5]=(((cj0*x962))+((sj0*x969))+new_r10);
evalcond[6]=(((new_r11*sj0))+(((-1.0)*x968))+((cj0*new_r01)));
evalcond[7]=(((cj0*x969))+(((-1.0)*x962*x964))+new_r00);
evalcond[8]=(((cj0*x963))+(((-1.0)*x964*x968))+new_r11);
evalcond[9]=((((-1.0)*x963*x964))+(((-1.0)*x966*x968))+new_r01);
evalcond[10]=((((-1.0)*new_r11*sj1*x964))+((cj1*new_r21))+(((-1.0)*new_r01*sj1*x966))+x962);
evalcond[11]=((((-1.0)*sj1*x965))+((cj1*new_r20))+(((-1.0)*new_r10*sj1*x964))+(((-1.0)*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ebbb9684069c8dd8824433c81f6cf4c4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
