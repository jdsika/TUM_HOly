/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-06-12 10:39:45.434188
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((1.0)*x7);
x13=((1.0)*x5);
x14=((0.03)*x5);
x15=((1.0)*x6);
x16=((1.0)*x3);
x17=((0.03)*x6);
x18=((0.045)*x4);
x19=((1.0)*x8);
x20=((0.08)*x3);
x21=((1.0)*x4);
x22=(x10*x2);
x23=(x10*x3);
x24=(x1*x2);
x25=(x0*x2);
x26=((-1.0)*x5);
x27=((-1.0)*x6);
x28=(x1*x4);
x29=(x10*x11);
x30=(x0*x4);
x31=(x0*x3);
x32=(x10*x9);
x33=((1.0)*x25);
x34=((0.045)*x1*x3);
x35=(x16*x28);
x36=((((-1.0)*x21*x25))+((x1*x3)));
x37=((((-1.0)*x35))+x25);
x38=((((-1.0)*x33))+x35);
x39=(((x16*x30))+(((1.0)*x24)));
x40=((-1.0)*x39);
x41=((((-1.0)*x21*x24))+(((-1.0)*x0*x16)));
x42=(x37*x5);
x43=((((-1.0)*x13*x22))+((x15*x23)));
x44=(x38*x6);
x45=(x41*x6);
x46=((((-1.0)*x12*x43))+((x19*((((x13*x23))+((x15*x22)))))));
x47=(((x8*((((x27*x36))+((x26*x40))))))+((x7*(((((-1.0)*x13*x36))+(((-1.0)*x15*x39)))))));
x48=(((x12*((((x15*x38))+((x13*x41))))))+((x19*(((((-1.0)*x27*x41))+(((-1.0)*x26*x37)))))));
eerot[0]=(((x11*x47))+((x0*x32)));
eerot[1]=(((x7*(((((-1.0)*x13*x40))+(((-1.0)*x15*x36))))))+((x8*((((x39*x6))+((x36*x5)))))));
eerot[2]=(((x47*x9))+(((-1.0)*x0*x29)));
IkReal x49=((1.0)*x18);
eetrans[0]=((0.03)+((x6*((x34+(((-1.0)*x25*x49))))))+(((-0.08)*x24))+(((-1.0)*x20*x30))+((x8*((((x17*x36))+((x14*x40))))))+((x5*(((((-1.0)*x31*x49))+(((-0.045)*x24))))))+((x7*((((x17*x39))+((x14*x36)))))));
eerot[3]=((((-1.0)*x1*x32))+((x11*x48)));
eerot[4]=(((x8*((((x27*x38))+((x26*x41))))))+((x7*((x45+x42)))));
eerot[5]=(((x1*x29))+((x48*x9)));
eetrans[1]=((((-0.08)*x25))+((x8*(((((-0.03)*x42))+(((-0.03)*x45))))))+((x7*(((((-1.0)*x17*x38))+(((-1.0)*x14*x41))))))+((x5*(((((-0.045)*x25))+((x1*x18*x3))))))+((x20*x28))+((x6*((((x18*x24))+(((0.045)*x31)))))));
eerot[6]=((((-1.0)*x21*x9))+((x11*x46)));
eerot[7]=(((x43*x8))+((x7*((((x22*x6))+((x23*x5)))))));
eerot[8]=(((x11*x4))+((x46*x9)));
IkReal x50=((1.0)*x22);
eetrans[2]=((-0.06)+((x8*(((((-1.0)*x17*x50))+(((-1.0)*x14*x23))))))+(((-1.0)*x10*x20))+(((-0.045)*x23*x5))+(((-0.045)*x22*x6))+((x7*(((((-1.0)*x14*x50))+((x17*x23)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r02;
new_r02=((-1.0)*r01);
new_px=((-0.03)+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((-1.0)*py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.06)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
{
IkReal j14eval[1];
j14eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x55 = IKatan2WithCheck(IkReal(((-1.0)*npx)),npy,IKFAST_ATAN2_MAGTHRESH);
if(!x55.valid){
continue;
}
IkReal x54=x55.value;
j14array[0]=((-1.0)*x54);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+(((-1.0)*x54)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=((-1.04513888888889)+(((8.33333333333333)*npx*sj14))+(((8.33333333333333)*cj14*npy))+(((138.888888888889)*pp)));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[3];
IkReal x56=((75.0)*npz);
IkReal x57=((1250.0)*pp);
j13eval[0]=((-1.17013888888889)+(((-1.0)*cj12)));
j13eval[1]=IKsign(((-7.8984375)+(((-6.75)*cj12))));
j13eval[2]=((IKabs(((6.556640625)+(((16.71875)*cj12))+(((-1.0)*sj12*x56))+(((-703.125)*pp))+(((9.0)*(cj12*cj12)))+(((-1.0)*cj12*x57)))))+(IKabs((((sj12*x57))+(((-42.1875)*npz))+(((-11.65625)*sj12))+(((-9.0)*cj12*sj12))+(((-1.0)*cj12*x56))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x58=(cj14*npy);
IkReal x59=(npz*sj12);
IkReal x60=((25.0)*npz);
IkReal x61=((2.0)*cj12);
IkReal x62=((59.2592592592593)*cj12);
IkReal x63=(npx*sj14);
j13eval[0]=((1.0)+(((33.3333333333333)*x58))+(((33.3333333333333)*x63))+(((1.77777777777778)*cj12))+((x58*x62))+((x62*x63))+(((59.2592592592593)*x59)));
j13eval[1]=((IKabs(((-0.050625)+((npz*x60))+(((-0.16)*(cj12*cj12)))+(((-0.18)*cj12)))))+(IKabs(((((0.16)*cj12*sj12))+((x60*x63))+((x58*x60))+(((0.75)*npz))+(((0.09)*sj12))))));
j13eval[2]=IKsign(((0.03375)+(((0.06)*cj12))+((x58*x61))+((x61*x63))+(((2.0)*x59))+(((1.125)*x58))+(((1.125)*x63))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
IkReal x64=((33.3333333333333)*sj12);
j13eval[0]=((((18.75)*npz))+(((-1.0)*npx*sj14*x64))+(((-1.0)*sj12))+(((33.3333333333333)*cj12*npz))+(((-1.0)*cj14*npy*x64)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x65=(cj14*npy);
IkReal x66=((2.0)*sj12);
IkReal x67=((25.0)*npz);
IkReal x68=(npx*sj14);
IkReal x69=(cj12*npz);
IkReal x70=((50.0)*sj12);
CheckValue<IkReal> x71=IKPowWithIntegerCheck(((((-1.5)*sj12))+(((28.125)*npz))+(((50.0)*x69))+(((-1.0)*x68*x70))+(((-1.0)*x65*x70))),-1);
if(!x71.valid){
continue;
}
CheckValue<IkReal> x72=IKPowWithIntegerCheck(((((-1.0)*x66*x68))+(((-0.06)*sj12))+(((-1.0)*x65*x66))+(((2.0)*x69))+(((1.125)*npz))),-1);
if(!x72.valid){
continue;
}
if( IKabs(((x71.value)*(((-4.0)+(((4.0)*(cj12*cj12)))+(((625.0)*(npz*npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x72.value)*(((((0.16)*cj12*sj12))+(((-1.0)*x67*x68))+(((0.09)*sj12))+(((-0.75)*npz))+(((-1.0)*x65*x67)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x71.value)*(((-4.0)+(((4.0)*(cj12*cj12)))+(((625.0)*(npz*npz)))))))+IKsqr(((x72.value)*(((((0.16)*cj12*sj12))+(((-1.0)*x67*x68))+(((0.09)*sj12))+(((-0.75)*npz))+(((-1.0)*x65*x67))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x71.value)*(((-4.0)+(((4.0)*(cj12*cj12)))+(((625.0)*(npz*npz)))))), ((x72.value)*(((((0.16)*cj12*sj12))+(((-1.0)*x67*x68))+(((0.09)*sj12))+(((-0.75)*npz))+(((-1.0)*x65*x67))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x73=IKsin(j13);
IkReal x74=IKcos(j13);
IkReal x75=(cj14*npy);
IkReal x76=((0.08)*cj12);
IkReal x77=((0.08)*sj12);
IkReal x78=(npx*sj14);
IkReal x79=((1.0)*npz);
IkReal x80=(cj12*x74);
IkReal x81=(sj12*x73);
evalcond[0]=((((0.045)*x73))+(((-1.0)*x79))+((x73*x76))+((x74*x77)));
evalcond[1]=((-0.009325)+(((0.0048)*x81))+(((-0.0072)*cj12))+(((-0.0027)*x74))+pp+(((-0.0048)*x80)));
evalcond[2]=((((-1.0)*x77))+(((0.03)*x73))+((npz*x74))+((x73*x75))+((x73*x78)));
evalcond[3]=((-0.03)+(((-0.045)*x74))+(((-1.0)*x74*x76))+(((-1.0)*x78))+(((-1.0)*x75))+((x73*x77)));
evalcond[4]=((0.045)+(((0.03)*x74))+x76+(((-1.0)*x73*x79))+((x74*x75))+((x74*x78)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x975=(cj14*npy);
IkReal x976=((2.0)*cj12);
IkReal x977=(npx*sj14);
IkReal x978=((25.0)*npz);
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal((((x975*x978))+(((0.16)*cj12*sj12))+((x977*x978))+(((0.75)*npz))+(((0.09)*sj12)))),((-0.050625)+((npz*x978))+(((-0.16)*(cj12*cj12)))+(((-0.18)*cj12))),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign(((0.03375)+(((0.06)*cj12))+((x975*x976))+(((2.0)*npz*sj12))+((x976*x977))+(((1.125)*x977))+(((1.125)*x975)))),-1);
if(!x980.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x979.value)+(((1.5707963267949)*(x980.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x981=IKsin(j13);
IkReal x982=IKcos(j13);
IkReal x983=(cj14*npy);
IkReal x984=((0.08)*cj12);
IkReal x985=((0.08)*sj12);
IkReal x986=(npx*sj14);
IkReal x987=((1.0)*npz);
IkReal x988=(cj12*x982);
IkReal x989=(sj12*x981);
evalcond[0]=(((x981*x984))+(((-1.0)*x987))+(((0.045)*x981))+((x982*x985)));
evalcond[1]=((-0.009325)+(((-0.0072)*cj12))+(((-0.0027)*x982))+(((-0.0048)*x988))+pp+(((0.0048)*x989)));
evalcond[2]=(((x981*x983))+((x981*x986))+(((-1.0)*x985))+((npz*x982))+(((0.03)*x981)));
evalcond[3]=((-0.03)+((x981*x985))+(((-1.0)*x983))+(((-1.0)*x986))+(((-0.045)*x982))+(((-1.0)*x982*x984)));
evalcond[4]=((0.045)+((x982*x986))+((x982*x983))+(((0.03)*x982))+(((-1.0)*x981*x987))+x984);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x990=((1250.0)*pp);
IkReal x991=((75.0)*npz);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*x991))+(((-42.1875)*npz))+(((-11.65625)*sj12))+(((-9.0)*cj12*sj12))+((sj12*x990)))),((6.556640625)+(((-1.0)*cj12*x990))+(((16.71875)*cj12))+(((-1.0)*sj12*x991))+(((-703.125)*pp))+(((9.0)*(cj12*cj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign(((-7.8984375)+(((-6.75)*cj12)))),-1);
if(!x993.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x992.value)+(((1.5707963267949)*(x993.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x994=IKsin(j13);
IkReal x995=IKcos(j13);
IkReal x996=(cj14*npy);
IkReal x997=((0.08)*cj12);
IkReal x998=((0.08)*sj12);
IkReal x999=(npx*sj14);
IkReal x1000=((1.0)*npz);
IkReal x1001=(cj12*x995);
IkReal x1002=(sj12*x994);
evalcond[0]=(((x994*x997))+(((-1.0)*x1000))+(((0.045)*x994))+((x995*x998)));
evalcond[1]=((-0.009325)+(((-0.0072)*cj12))+(((-0.0048)*x1001))+pp+(((0.0048)*x1002))+(((-0.0027)*x995)));
evalcond[2]=(((x994*x999))+((x994*x996))+((npz*x995))+(((0.03)*x994))+(((-1.0)*x998)));
evalcond[3]=((-0.03)+(((-1.0)*x999))+(((-1.0)*x996))+((x994*x998))+(((-1.0)*x995*x997))+(((-0.045)*x995)));
evalcond[4]=((0.045)+(((0.03)*x995))+(((-1.0)*x1000*x994))+((x995*x996))+((x995*x999))+x997);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x82=((1.0)*cj14);
IkReal x83=((1.0)*cj12);
IkReal x84=((1.0)*sj14);
IkReal x85=(cj13*r12);
IkReal x86=((((-1.0)*r00*x84))+(((-1.0)*r01*x82)));
IkReal x87=((((-1.0)*r11*x82))+(((-1.0)*r10*x84)));
IkReal x88=((((-1.0)*r20*x84))+(((-1.0)*r21*x82)));
IkReal x89=(sj13*x87);
IkReal x90=(((r02*sj13))+((cj13*x86)));
IkReal x91=(((r12*sj13))+((cj13*x87)));
IkReal x92=(((sj13*x88))+(((-1.0)*cj13*r22)));
IkReal x93=(((r22*sj13))+((cj13*x88)));
IkReal x94=(((sj13*x86))+(((-1.0)*cj13*r02)));
new_r00=((((-1.0)*x83*x90))+((sj12*x94)));
new_r01=(((sj12*x90))+((cj12*x94)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x82)));
new_r10=((((-1.0)*x83*x91))+((sj12*((x89+(((-1.0)*x85)))))));
new_r11=(((sj12*x91))+((cj12*((x89+(((-1.0)*x85)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x82)));
new_r20=((((-1.0)*x83*x93))+((sj12*x92)));
new_r21=(((sj12*x93))+((cj12*x92)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x82)));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
sj10array[0]=((-1.0)*new_r22);
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[2];
IkReal x95=((1.0)*cj14);
IkReal x96=((1.0)*cj12);
IkReal x97=((1.0)*sj14);
IkReal x98=(cj13*r12);
IkReal x99=x86;
IkReal x100=x87;
IkReal x101=x88;
IkReal x102=(sj13*x100);
IkReal x103=(((r02*sj13))+((cj13*x99)));
IkReal x104=(((r12*sj13))+((cj13*x100)));
IkReal x105=(((sj13*x101))+(((-1.0)*cj13*r22)));
IkReal x106=(((cj13*x101))+((r22*sj13)));
IkReal x107=(((sj13*x99))+(((-1.0)*cj13*r02)));
new_r00=((((-1.0)*x103*x96))+((sj12*x107)));
new_r01=(((cj12*x107))+((sj12*x103)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x95)));
new_r10=(((sj12*((x102+(((-1.0)*x98))))))+(((-1.0)*x104*x96)));
new_r11=(((cj12*((x102+(((-1.0)*x98))))))+((sj12*x104)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x95)));
new_r20=(((sj12*x105))+(((-1.0)*x106*x96)));
new_r21=(((cj12*x105))+((sj12*x106)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x95)));
j11eval[0]=cj10;
j11eval[1]=IKsign(cj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x108=((1.0)*cj14);
IkReal x109=((1.0)*cj12);
IkReal x110=((1.0)*sj14);
IkReal x111=(cj13*r12);
IkReal x112=x86;
IkReal x113=x87;
IkReal x114=x88;
IkReal x115=(sj13*x113);
IkReal x116=(((r02*sj13))+((cj13*x112)));
IkReal x117=(((r12*sj13))+((cj13*x113)));
IkReal x118=(((sj13*x114))+(((-1.0)*cj13*r22)));
IkReal x119=(((cj13*x114))+((r22*sj13)));
IkReal x120=((((-1.0)*cj13*r02))+((sj13*x112)));
new_r00=((((-1.0)*x109*x116))+((sj12*x120)));
new_r01=(((cj12*x120))+((sj12*x116)));
new_r02=((((-1.0)*r00*x108))+((r01*sj14)));
new_r10=((((-1.0)*x109*x117))+((sj12*((x115+(((-1.0)*x111)))))));
new_r11=(((cj12*((x115+(((-1.0)*x111))))))+((sj12*x117)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x108)));
new_r20=((((-1.0)*x109*x119))+((sj12*x118)));
new_r21=(((cj12*x118))+((sj12*x119)));
new_r22=((((-1.0)*r20*x108))+((r21*sj14)));
IkReal x121=((1.0)*sj14);
j9eval[0]=cj10;
j9eval[1]=((IKabs((((cj14*r00))+(((-1.0)*r01*x121)))))+(IKabs((((cj14*r10))+(((-1.0)*r11*x121))))));
j9eval[2]=IKsign(cj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x122=((1.0)*cj14);
IkReal x123=((1.0)*cj12);
IkReal x124=((1.0)*sj14);
IkReal x125=(cj13*r12);
IkReal x126=x86;
IkReal x127=x87;
IkReal x128=x88;
IkReal x129=(sj13*x127);
IkReal x130=(((r02*sj13))+((cj13*x126)));
IkReal x131=(((r12*sj13))+((cj13*x127)));
IkReal x132=((((-1.0)*cj13*r22))+((sj13*x128)));
IkReal x133=(((cj13*x128))+((r22*sj13)));
IkReal x134=((((-1.0)*cj13*r02))+((sj13*x126)));
new_r00=((((-1.0)*x123*x130))+((sj12*x134)));
new_r01=(((cj12*x134))+((sj12*x130)));
new_r02=((((-1.0)*r00*x122))+((r01*sj14)));
new_r10=((((-1.0)*x123*x131))+((sj12*((x129+(((-1.0)*x125)))))));
new_r11=(((cj12*((x129+(((-1.0)*x125))))))+((sj12*x131)));
new_r12=((((-1.0)*r10*x122))+((r11*sj14)));
new_r20=((((-1.0)*x123*x133))+((sj12*x132)));
new_r21=(((cj12*x132))+((sj12*x133)));
new_r22=((((-1.0)*r20*x122))+((r21*sj14)));
j9eval[0]=cj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x135=((1.0)*cj14);
IkReal x136=((1.0)*cj12);
IkReal x137=((1.0)*sj14);
IkReal x138=(cj13*r12);
IkReal x139=x86;
IkReal x140=x87;
IkReal x141=x88;
IkReal x142=(sj13*x140);
IkReal x143=(((r02*sj13))+((cj13*x139)));
IkReal x144=(((cj13*x140))+((r12*sj13)));
IkReal x145=(((sj13*x141))+(((-1.0)*cj13*r22)));
IkReal x146=(((cj13*x141))+((r22*sj13)));
IkReal x147=((((-1.0)*cj13*r02))+((sj13*x139)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=(((sj12*x147))+(((-1.0)*x136*x143)));
new_r01=(((cj12*x147))+((sj12*x143)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x135)));
new_r10=(((sj12*((x142+(((-1.0)*x138))))))+(((-1.0)*x136*x144)));
new_r11=(((cj12*((x142+(((-1.0)*x138))))))+((sj12*x144)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x135)));
new_r20=(((sj12*x145))+(((-1.0)*x136*x146)));
new_r21=(((cj12*x145))+((sj12*x146)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x135)));
IkReal x148=((1.0)*cj14);
j9eval[0]=((IKabs((((r11*sj14))+(((-1.0)*r10*x148)))))+(IKabs(((((-1.0)*r00*x148))+((r01*sj14))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x149=((1.0)*cj14);
IkReal x150=((1.0)*cj12);
IkReal x151=((1.0)*sj14);
IkReal x152=(cj13*r12);
IkReal x153=x86;
IkReal x154=x87;
IkReal x155=x88;
IkReal x156=(sj13*x154);
IkReal x157=(((r02*sj13))+((cj13*x153)));
IkReal x158=(((r12*sj13))+((cj13*x154)));
IkReal x159=(((sj13*x155))+(((-1.0)*cj13*r22)));
IkReal x160=(((cj13*x155))+((r22*sj13)));
IkReal x161=(((sj13*x153))+(((-1.0)*cj13*r02)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x150*x157))+((sj12*x161)));
new_r01=(((cj12*x161))+((sj12*x157)));
new_r02=((((-1.0)*r00*x149))+((r01*sj14)));
new_r10=((((-1.0)*x150*x158))+((sj12*((x156+(((-1.0)*x152)))))));
new_r11=(((sj12*x158))+((cj12*((x156+(((-1.0)*x152)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x149)));
new_r20=((((-1.0)*x150*x160))+((sj12*x159)));
new_r21=(((cj12*x159))+((sj12*x160)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x149)));
j9eval[0]=((IKabs(((((-1.0)*r01*sj14))+((cj14*r00)))))+(IKabs((((r11*sj14))+(((-1.0)*cj14*r10))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9, j11]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
IkReal x162=x163.value;
j9array[0]=((-1.0)*x162);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x162)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKsin(j9))))+((new_r02*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x164=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x164))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x164))), (((new_r01*sj9))+(((-1.0)*new_r11*x164))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x165=IKsin(j11);
IkReal x166=IKcos(j11);
IkReal x167=((1.0)*sj9);
IkReal x168=(cj9*x165);
IkReal x169=((1.0)*x166);
IkReal x170=(x166*x167);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x165);
evalcond[1]=((((-1.0)*new_r00*x167))+((cj9*new_r10))+x165);
evalcond[2]=(((cj9*new_r11))+x166+(((-1.0)*new_r01*x167)));
evalcond[3]=(((sj9*x165))+((cj9*x166))+new_r11);
evalcond[4]=((((-1.0)*x169))+((new_r10*sj9))+((cj9*new_r00)));
evalcond[5]=((((-1.0)*x170))+x168+new_r01);
evalcond[6]=((((-1.0)*x170))+x168+new_r10);
evalcond[7]=((((-1.0)*cj9*x169))+new_r00+(((-1.0)*x165*x167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
IkReal x171=x172.value;
j9array[0]=((-1.0)*x171);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x171)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j9))))+((new_r12*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x173=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x173))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x173))), (((new_r01*sj9))+(((-1.0)*new_r11*x173))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x174=IKsin(j11);
IkReal x175=IKcos(j11);
IkReal x176=((1.0)*sj9);
IkReal x177=(cj9*x174);
IkReal x178=((1.0)*x175);
IkReal x179=(x175*x176);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x174);
evalcond[1]=(((cj9*new_r10))+x174+(((-1.0)*new_r00*x176)));
evalcond[2]=(((cj9*new_r11))+x175+(((-1.0)*new_r01*x176)));
evalcond[3]=(((sj9*x174))+((cj9*x175))+new_r11);
evalcond[4]=(((new_r10*sj9))+(((-1.0)*x178))+((cj9*new_r00)));
evalcond[5]=((((-1.0)*x179))+x177+new_r01);
evalcond[6]=((((-1.0)*x179))+x177+new_r10);
evalcond[7]=((((-1.0)*x174*x176))+(((-1.0)*cj9*x178))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x180=((1.0)*cj14);
IkReal x181=((1.0)*cj12);
IkReal x182=((1.0)*sj14);
IkReal x183=(cj13*r12);
IkReal x184=x86;
IkReal x185=x87;
IkReal x186=x88;
IkReal x187=(sj13*x185);
IkReal x188=(((r02*sj13))+((cj13*x184)));
IkReal x189=(((r12*sj13))+((cj13*x185)));
IkReal x190=(((sj13*x186))+(((-1.0)*cj13*r22)));
IkReal x191=(((r22*sj13))+((cj13*x186)));
IkReal x192=(((sj13*x184))+(((-1.0)*cj13*r02)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*x192))+(((-1.0)*x181*x188)));
new_r01=(((cj12*x192))+((sj12*x188)));
new_r02=((((-1.0)*r00*x180))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x183))+x187))))+(((-1.0)*x181*x189)));
new_r11=(((cj12*(((((-1.0)*x183))+x187))))+((sj12*x189)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x180)));
new_r20=(((sj12*x190))+(((-1.0)*x181*x191)));
new_r21=(((cj12*x190))+((sj12*x191)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x180)));
IkReal x193=((1.0)*cj14);
j9eval[0]=((IKabs(((((-1.0)*r00*x193))+((r01*sj14)))))+(IKabs((((r11*sj14))+(((-1.0)*r10*x193))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x194=((1.0)*cj14);
IkReal x195=((1.0)*cj12);
IkReal x196=((1.0)*sj14);
IkReal x197=(cj13*r12);
IkReal x198=x86;
IkReal x199=x87;
IkReal x200=x88;
IkReal x201=(sj13*x199);
IkReal x202=(((r02*sj13))+((cj13*x198)));
IkReal x203=(((r12*sj13))+((cj13*x199)));
IkReal x204=(((sj13*x200))+(((-1.0)*cj13*r22)));
IkReal x205=(((cj13*x200))+((r22*sj13)));
IkReal x206=(((sj13*x198))+(((-1.0)*cj13*r02)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x195*x202))+((sj12*x206)));
new_r01=(((sj12*x202))+((cj12*x206)));
new_r02=((((-1.0)*r00*x194))+((r01*sj14)));
new_r10=((((-1.0)*x195*x203))+((sj12*(((((-1.0)*x197))+x201)))));
new_r11=(((sj12*x203))+((cj12*(((((-1.0)*x197))+x201)))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x194)));
new_r20=((((-1.0)*x195*x205))+((sj12*x204)));
new_r21=(((sj12*x205))+((cj12*x204)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x194)));
j9eval[0]=((IKabs(((((-1.0)*r01*sj14))+((cj14*r00)))))+(IKabs((((r11*sj14))+(((-1.0)*cj14*r10))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9, j11]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x208 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x208.valid){
continue;
}
IkReal x207=x208.value;
j9array[0]=((-1.0)*x207);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x207)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKsin(j9))))+((new_r02*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x209=((1.0)*new_r10);
if( IKabs((((new_r11*sj9))+(((-1.0)*cj9*x209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj9*x209))+(((-1.0)*cj9*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj9))+(((-1.0)*cj9*x209))))+IKsqr(((((-1.0)*sj9*x209))+(((-1.0)*cj9*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((new_r11*sj9))+(((-1.0)*cj9*x209))), ((((-1.0)*sj9*x209))+(((-1.0)*cj9*new_r11))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x210=IKcos(j11);
IkReal x211=IKsin(j11);
IkReal x212=((1.0)*sj9);
IkReal x213=(cj9*x210);
IkReal x214=((1.0)*x211);
IkReal x215=(x211*x212);
evalcond[0]=(((new_r10*sj9))+((cj9*new_r00))+x210);
evalcond[1]=(((cj9*new_r10))+x211+(((-1.0)*new_r00*x212)));
evalcond[2]=(((cj9*new_r11))+x210+(((-1.0)*new_r01*x212)));
evalcond[3]=(((new_r11*sj9))+((cj9*new_r01))+(((-1.0)*x214)));
evalcond[4]=(((sj9*x210))+((cj9*x211))+new_r10);
evalcond[5]=(x213+new_r11+(((-1.0)*x215)));
evalcond[6]=(x213+new_r00+(((-1.0)*x215)));
evalcond[7]=((((-1.0)*cj9*x214))+(((-1.0)*x210*x212))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
IkReal x216=x217.value;
j9array[0]=((-1.0)*x216);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x216)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j9))))+((new_r12*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x218=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj9*x218))+((new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj9*x218))+(((-1.0)*cj9*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x218))+((new_r11*sj9))))+IKsqr(((((-1.0)*sj9*x218))+(((-1.0)*cj9*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x218))+((new_r11*sj9))), ((((-1.0)*sj9*x218))+(((-1.0)*cj9*new_r11))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x219=IKcos(j11);
IkReal x220=IKsin(j11);
IkReal x221=((1.0)*sj9);
IkReal x222=(cj9*x219);
IkReal x223=((1.0)*x220);
IkReal x224=(x220*x221);
evalcond[0]=(((new_r10*sj9))+((cj9*new_r00))+x219);
evalcond[1]=(((cj9*new_r10))+x220+(((-1.0)*new_r00*x221)));
evalcond[2]=((((-1.0)*new_r01*x221))+((cj9*new_r11))+x219);
evalcond[3]=(((new_r11*sj9))+((cj9*new_r01))+(((-1.0)*x223)));
evalcond[4]=(((sj9*x219))+((cj9*x220))+new_r10);
evalcond[5]=(x222+new_r11+(((-1.0)*x224)));
evalcond[6]=(x222+new_r00+(((-1.0)*x224)));
evalcond[7]=((((-1.0)*x219*x221))+(((-1.0)*cj9*x223))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x226=IKPowWithIntegerCheck(cj10,-1);
if(!x226.valid){
continue;
}
IkReal x225=x226.value;
CheckValue<IkReal> x227=IKPowWithIntegerCheck(new_r12,-1);
if(!x227.valid){
continue;
}
CheckValue<IkReal> x228=IKPowWithIntegerCheck(x225,-2);
if(!x228.valid){
continue;
}
if( IKabs((x225*(x227.value)*(((new_r02*new_r02)+(((-1.0)*(x228.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x225)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x225*(x227.value)*(((new_r02*new_r02)+(((-1.0)*(x228.value)))))))+IKsqr(((-1.0)*new_r02*x225))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x225*(x227.value)*(((new_r02*new_r02)+(((-1.0)*(x228.value)))))), ((-1.0)*new_r02*x225));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x229=IKcos(j9);
IkReal x230=IKsin(j9);
IkReal x231=((1.0)*sj10);
IkReal x232=(cj10*x230);
IkReal x233=(new_r12*x230);
IkReal x234=(cj10*x229);
IkReal x235=(new_r02*x229);
evalcond[0]=(x234+new_r02);
evalcond[1]=(x232+new_r12);
evalcond[2]=((((-1.0)*new_r02*x230))+((new_r12*x229)));
evalcond[3]=(cj10+x233+x235);
evalcond[4]=(((new_r10*x232))+((new_r00*x234))+((new_r20*sj10)));
evalcond[5]=(((new_r11*x232))+((new_r01*x234))+((new_r21*sj10)));
evalcond[6]=((1.0)+((new_r02*x234))+((new_r12*x232))+((new_r22*sj10)));
evalcond[7]=(((cj10*new_r22))+(((-1.0)*x231*x235))+(((-1.0)*x231*x233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x236=((1.0)*cj14);
IkReal x237=((1.0)*cj12);
IkReal x238=((1.0)*sj14);
IkReal x239=(cj13*r12);
IkReal x240=x86;
IkReal x241=x87;
IkReal x242=x88;
IkReal x243=(sj13*x241);
IkReal x244=(((r02*sj13))+((cj13*x240)));
IkReal x245=(((r12*sj13))+((cj13*x241)));
IkReal x246=(((sj13*x242))+(((-1.0)*cj13*r22)));
IkReal x247=(((r22*sj13))+((cj13*x242)));
IkReal x248=((((-1.0)*cj13*r02))+((sj13*x240)));
new_r00=((((-1.0)*x237*x244))+((sj12*x248)));
new_r01=(((sj12*x244))+((cj12*x248)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x236)));
new_r10=((((-1.0)*x237*x245))+((sj12*((x243+(((-1.0)*x239)))))));
new_r11=(((cj12*((x243+(((-1.0)*x239))))))+((sj12*x245)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x236)));
new_r20=((((-1.0)*x237*x247))+((sj12*x246)));
new_r21=(((sj12*x247))+((cj12*x246)));
new_r22=((((-1.0)*r20*x236))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=IKsign(cj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x249=((1.0)*cj14);
IkReal x250=((1.0)*cj12);
IkReal x251=((1.0)*sj14);
IkReal x252=(cj13*r12);
IkReal x253=x86;
IkReal x254=x87;
IkReal x255=x88;
IkReal x256=(sj13*x254);
IkReal x257=(((r02*sj13))+((cj13*x253)));
IkReal x258=(((r12*sj13))+((cj13*x254)));
IkReal x259=(((sj13*x255))+(((-1.0)*cj13*r22)));
IkReal x260=(((r22*sj13))+((cj13*x255)));
IkReal x261=(((sj13*x253))+(((-1.0)*cj13*r02)));
new_r00=((((-1.0)*x250*x257))+((sj12*x261)));
new_r01=(((sj12*x257))+((cj12*x261)));
new_r02=((((-1.0)*r00*x249))+((r01*sj14)));
new_r10=((((-1.0)*x250*x258))+((sj12*((x256+(((-1.0)*x252)))))));
new_r11=(((sj12*x258))+((cj12*((x256+(((-1.0)*x252)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x249)));
new_r20=(((sj12*x259))+(((-1.0)*x250*x260)));
new_r21=(((cj12*x259))+((sj12*x260)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x249)));
j11eval[0]=cj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x262=((1.0)*cj14);
IkReal x263=((1.0)*cj12);
IkReal x264=((1.0)*sj14);
IkReal x265=(cj13*r12);
IkReal x266=x86;
IkReal x267=x87;
IkReal x268=x88;
IkReal x269=(sj13*x267);
IkReal x270=(((r02*sj13))+((cj13*x266)));
IkReal x271=(((r12*sj13))+((cj13*x267)));
IkReal x272=(((sj13*x268))+(((-1.0)*cj13*r22)));
IkReal x273=(((r22*sj13))+((cj13*x268)));
IkReal x274=(((sj13*x266))+(((-1.0)*cj13*r02)));
new_r00=((((-1.0)*x263*x270))+((sj12*x274)));
new_r01=(((sj12*x270))+((cj12*x274)));
new_r02=((((-1.0)*r00*x262))+((r01*sj14)));
new_r10=((((-1.0)*x263*x271))+((sj12*(((((-1.0)*x265))+x269)))));
new_r11=(((cj12*(((((-1.0)*x265))+x269))))+((sj12*x271)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x262)));
new_r20=((((-1.0)*x263*x273))+((sj12*x272)));
new_r21=(((sj12*x273))+((cj12*x272)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x262)));
j11eval[0]=cj10;
j11eval[1]=sj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x275=(new_r12*sj9);
IkReal x276=(new_r02*sj9);
IkReal x277=(cj9*new_r12);
IkReal x278=(cj9*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=((((-1.0)*x276))+x277);
evalcond[7]=((((-1.0)*x277))+x276);
evalcond[8]=(x275+x278);
evalcond[9]=((((-1.0)*x278))+(((-1.0)*x275)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x279=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x279))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x279))+(((-1.0)*new_r11*sj9))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x279))+(((-1.0)*new_r11*sj9))), (((new_r01*sj9))+(((-1.0)*new_r11*x279))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x280=IKsin(j11);
IkReal x281=IKcos(j11);
IkReal x282=((1.0)*sj9);
IkReal x283=(cj9*x280);
IkReal x284=((1.0)*x281);
IkReal x285=(x281*x282);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x280);
evalcond[1]=(((cj9*new_r10))+(((-1.0)*new_r00*x282))+x280);
evalcond[2]=(((cj9*new_r11))+x281+(((-1.0)*new_r01*x282)));
evalcond[3]=(((sj9*x280))+((cj9*x281))+new_r11);
evalcond[4]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x284)));
evalcond[5]=(x283+(((-1.0)*x285))+new_r01);
evalcond[6]=(x283+(((-1.0)*x285))+new_r10);
evalcond[7]=((((-1.0)*x280*x282))+(((-1.0)*cj9*x284))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x286=(new_r02*sj9);
IkReal x287=(cj9*new_r12);
IkReal x288=(((new_r12*sj9))+((cj9*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=(x287+(((-1.0)*x286)));
evalcond[7]=(x286+(((-1.0)*x287)));
evalcond[8]=x288;
evalcond[9]=x288;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x289=((1.0)*new_r10);
if( IKabs((((new_r11*sj9))+(((-1.0)*cj9*x289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj9*x289))+(((-1.0)*cj9*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj9))+(((-1.0)*cj9*x289))))+IKsqr(((((-1.0)*sj9*x289))+(((-1.0)*cj9*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((new_r11*sj9))+(((-1.0)*cj9*x289))), ((((-1.0)*sj9*x289))+(((-1.0)*cj9*new_r11))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x290=IKcos(j11);
IkReal x291=IKsin(j11);
IkReal x292=((1.0)*sj9);
IkReal x293=(cj9*x290);
IkReal x294=((1.0)*x291);
IkReal x295=(x291*x292);
evalcond[0]=(((new_r10*sj9))+((cj9*new_r00))+x290);
evalcond[1]=(((cj9*new_r10))+x291+(((-1.0)*new_r00*x292)));
evalcond[2]=((((-1.0)*new_r01*x292))+((cj9*new_r11))+x290);
evalcond[3]=(((new_r11*sj9))+(((-1.0)*x294))+((cj9*new_r01)));
evalcond[4]=(((cj9*x291))+((sj9*x290))+new_r10);
evalcond[5]=((((-1.0)*x295))+x293+new_r11);
evalcond[6]=((((-1.0)*x295))+x293+new_r00);
evalcond[7]=((((-1.0)*cj9*x294))+(((-1.0)*x290*x292))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x296=(new_r02*sj9);
IkReal x297=(cj9*new_r12);
IkReal x298=(((new_r10*sj9))+((cj9*new_r00)));
IkReal x299=(((new_r11*sj9))+((cj9*new_r01)));
IkReal x300=((1.0)+((new_r12*sj9))+((cj9*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj9+new_r02);
evalcond[3]=(sj9+new_r12);
evalcond[4]=((((-1.0)*x296))+x297);
evalcond[5]=((((-1.0)*x297))+x296);
evalcond[6]=x300;
evalcond[7]=x299;
evalcond[8]=x298;
evalcond[9]=x298;
evalcond[10]=x299;
evalcond[11]=x300;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x301=IKcos(j11);
IkReal x302=IKsin(j11);
IkReal x303=((1.0)*new_r02);
evalcond[0]=(x301+new_r20);
evalcond[1]=((((-1.0)*x302))+new_r21);
evalcond[2]=(((new_r12*x301))+new_r01);
evalcond[3]=(((new_r12*x302))+new_r00);
evalcond[4]=((((-1.0)*x301*x303))+new_r11);
evalcond[5]=((((-1.0)*x302*x303))+new_r10);
evalcond[6]=(((new_r00*new_r12))+x302+(((-1.0)*new_r10*x303)));
evalcond[7]=(((new_r01*new_r12))+x301+(((-1.0)*new_r11*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x304=(new_r12*sj9);
IkReal x305=((1.0)*sj9);
IkReal x306=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*x306)));
evalcond[3]=(new_r12+(((-1.0)*x305)));
evalcond[4]=((((-1.0)*new_r02*x305))+((cj9*new_r12)));
evalcond[5]=(((new_r02*sj9))+(((-1.0)*new_r12*x306)));
evalcond[6]=((-1.0)+((cj9*new_r02))+x304);
evalcond[7]=(((new_r11*sj9))+((cj9*new_r01)));
evalcond[8]=(((new_r10*sj9))+((cj9*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x306))+(((-1.0)*new_r10*x305)));
evalcond[10]=((((-1.0)*new_r01*x306))+(((-1.0)*new_r11*x305)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x306))+(((-1.0)*x304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x307=IKcos(j11);
IkReal x308=IKsin(j11);
IkReal x309=((1.0)*new_r12);
evalcond[0]=(x308+new_r21);
evalcond[1]=((((-1.0)*x307))+new_r20);
evalcond[2]=(((new_r02*x307))+new_r11);
evalcond[3]=(((new_r02*x308))+new_r10);
evalcond[4]=((((-1.0)*x307*x309))+new_r01);
evalcond[5]=((((-1.0)*x308*x309))+new_r00);
evalcond[6]=(x308+((new_r02*new_r10))+(((-1.0)*new_r00*x309)));
evalcond[7]=(x307+(((-1.0)*new_r01*x309))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x310=(sj10+new_r22);
IkReal x311=(cj10+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=x310;
evalcond[2]=x310;
evalcond[3]=x311;
evalcond[4]=new_r12;
evalcond[5]=x311;
evalcond[6]=(((cj10*new_r00))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+((new_r21*sj10)));
evalcond[8]=((1.0)+((cj10*new_r02))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+(((-1.0)*new_r02*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x312=IKsin(j11);
IkReal x313=IKcos(j11);
IkReal x314=((1.0)*new_r02);
IkReal x315=((1.0)*x312);
evalcond[0]=(x312+new_r10);
evalcond[1]=(x313+new_r11);
evalcond[2]=(((new_r02*x312))+new_r21);
evalcond[3]=(new_r00+((new_r22*x313)));
evalcond[4]=((((-1.0)*x313*x314))+new_r20);
evalcond[5]=((((-1.0)*new_r22*x315))+new_r01);
evalcond[6]=((((-1.0)*new_r20*x314))+((new_r00*new_r22))+x313);
evalcond[7]=((((-1.0)*new_r21*x314))+((new_r01*new_r22))+(((-1.0)*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x316=(sj10+new_r22);
IkReal x317=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=x316;
evalcond[2]=x316;
evalcond[3]=((((-1.0)*x317))+new_r02);
evalcond[4]=new_r12;
evalcond[5]=(cj10+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r00*x317))+((new_r20*sj10)));
evalcond[7]=(((new_r21*sj10))+(((-1.0)*new_r01*x317)));
evalcond[8]=((1.0)+(((-1.0)*new_r02*x317))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+((new_r02*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r10, new_r11);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x318=IKcos(j11);
IkReal x319=IKsin(j11);
IkReal x320=((1.0)*new_r22);
IkReal x321=((1.0)*x319);
evalcond[0]=(((new_r02*x318))+new_r20);
evalcond[1]=(x319+(((-1.0)*new_r10)));
evalcond[2]=(x318+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r02*x321))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+((new_r22*x318)));
evalcond[5]=((((-1.0)*x319*x320))+(((-1.0)*new_r01)));
evalcond[6]=(x318+(((-1.0)*new_r00*x320))+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*x321))+(((-1.0)*new_r01*x320))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x322=(sj10+new_r22);
IkReal x323=(cj10+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x322;
evalcond[2]=x322;
evalcond[3]=new_r02;
evalcond[4]=x323;
evalcond[5]=x323;
evalcond[6]=(((cj10*new_r10))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r11))+((new_r21*sj10)));
evalcond[8]=((1.0)+((cj10*new_r12))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+(((-1.0)*new_r12*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r00, new_r01);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x324=IKsin(j11);
IkReal x325=IKcos(j11);
IkReal x326=((1.0)*new_r12);
IkReal x327=((1.0)*x324);
evalcond[0]=(((new_r12*x324))+new_r21);
evalcond[1]=(x324+(((-1.0)*new_r00)));
evalcond[2]=(x325+(((-1.0)*new_r01)));
evalcond[3]=(((new_r22*x325))+new_r10);
evalcond[4]=((((-1.0)*x325*x326))+new_r20);
evalcond[5]=((((-1.0)*new_r22*x327))+new_r11);
evalcond[6]=(x325+((new_r10*new_r22))+(((-1.0)*new_r20*x326)));
evalcond[7]=((((-1.0)*x327))+((new_r11*new_r22))+(((-1.0)*new_r21*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x328=(sj10+new_r22);
IkReal x329=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x328;
evalcond[2]=x328;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*x329))+new_r12);
evalcond[5]=(cj10+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r10*x329))+((new_r20*sj10)));
evalcond[7]=(((new_r21*sj10))+(((-1.0)*new_r11*x329)));
evalcond[8]=((1.0)+(((-1.0)*new_r12*x329))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+((new_r12*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x330=IKcos(j11);
IkReal x331=IKsin(j11);
IkReal x332=((1.0)*new_r22);
IkReal x333=((1.0)*x331);
evalcond[0]=(x331+new_r00);
evalcond[1]=(x330+new_r01);
evalcond[2]=(((new_r12*x330))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x333))+new_r21);
evalcond[4]=(((new_r22*x330))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x331*x332))+(((-1.0)*new_r11)));
evalcond[6]=((((-1.0)*new_r10*x332))+x330+((new_r12*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x332))+((new_r12*new_r21))+(((-1.0)*x333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x335=IKPowWithIntegerCheck(cj10,-1);
if(!x335.valid){
continue;
}
IkReal x334=x335.value;
CheckValue<IkReal> x336=IKPowWithIntegerCheck(sj10,-1);
if(!x336.valid){
continue;
}
CheckValue<IkReal> x337=IKPowWithIntegerCheck(sj9,-1);
if(!x337.valid){
continue;
}
if( IKabs((x334*(x336.value)*(x337.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x334)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x334*(x336.value)*(x337.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))))+IKsqr(((-1.0)*new_r20*x334))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x334*(x336.value)*(x337.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))), ((-1.0)*new_r20*x334));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x338=IKsin(j11);
IkReal x339=IKcos(j11);
IkReal x340=((1.0)*sj9);
IkReal x341=(cj9*new_r00);
IkReal x342=((1.0)*sj10);
IkReal x343=(cj9*new_r01);
IkReal x344=(sj10*x338);
IkReal x345=((1.0)*x338);
IkReal x346=(x339*x342);
evalcond[0]=(((cj10*x339))+new_r20);
evalcond[1]=((((-1.0)*cj10*x345))+new_r21);
evalcond[2]=(((cj9*new_r10))+x338+(((-1.0)*new_r00*x340)));
evalcond[3]=(((cj9*new_r11))+x339+(((-1.0)*new_r01*x340)));
evalcond[4]=(((new_r11*sj9))+x343+x344);
evalcond[5]=(((sj9*x344))+((cj9*x339))+new_r11);
evalcond[6]=(((new_r10*sj9))+x341+(((-1.0)*x346)));
evalcond[7]=(((cj9*x344))+new_r01+(((-1.0)*x339*x340)));
evalcond[8]=(((cj9*x338))+(((-1.0)*sj10*x339*x340))+new_r10);
evalcond[9]=((((-1.0)*cj9*x346))+new_r00+(((-1.0)*x338*x340)));
evalcond[10]=(((cj10*new_r20))+x339+(((-1.0)*x341*x342))+(((-1.0)*new_r10*sj10*x340)));
evalcond[11]=(((cj10*new_r21))+(((-1.0)*x345))+(((-1.0)*new_r11*sj10*x340))+(((-1.0)*x342*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x348=IKPowWithIntegerCheck(cj10,-1);
if(!x348.valid){
continue;
}
IkReal x347=x348.value;
CheckValue<IkReal> x349=IKPowWithIntegerCheck(cj9,-1);
if(!x349.valid){
continue;
}
if( IKabs((x347*(x349.value)*(((((-1.0)*cj10*new_r10))+(((-1.0)*new_r20*sj10*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x347)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x347*(x349.value)*(((((-1.0)*cj10*new_r10))+(((-1.0)*new_r20*sj10*sj9))))))+IKsqr(((-1.0)*new_r20*x347))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x347*(x349.value)*(((((-1.0)*cj10*new_r10))+(((-1.0)*new_r20*sj10*sj9))))), ((-1.0)*new_r20*x347));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x350=IKsin(j11);
IkReal x351=IKcos(j11);
IkReal x352=((1.0)*sj9);
IkReal x353=(cj9*new_r00);
IkReal x354=((1.0)*sj10);
IkReal x355=(cj9*new_r01);
IkReal x356=(sj10*x350);
IkReal x357=((1.0)*x350);
IkReal x358=(x351*x354);
evalcond[0]=(((cj10*x351))+new_r20);
evalcond[1]=((((-1.0)*cj10*x357))+new_r21);
evalcond[2]=(((cj9*new_r10))+x350+(((-1.0)*new_r00*x352)));
evalcond[3]=(((cj9*new_r11))+x351+(((-1.0)*new_r01*x352)));
evalcond[4]=(((new_r11*sj9))+x355+x356);
evalcond[5]=(((cj9*x351))+((sj9*x356))+new_r11);
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x358))+x353);
evalcond[7]=(((cj9*x356))+(((-1.0)*x351*x352))+new_r01);
evalcond[8]=(((cj9*x350))+(((-1.0)*sj10*x351*x352))+new_r10);
evalcond[9]=((((-1.0)*cj9*x358))+new_r00+(((-1.0)*x350*x352)));
evalcond[10]=(((cj10*new_r20))+(((-1.0)*new_r10*sj10*x352))+x351+(((-1.0)*x353*x354)));
evalcond[11]=(((cj10*new_r21))+(((-1.0)*new_r11*sj10*x352))+(((-1.0)*x357))+(((-1.0)*x354*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x359 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x360.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x359.value)+(((1.5707963267949)*(x360.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x361=IKsin(j11);
IkReal x362=IKcos(j11);
IkReal x363=((1.0)*sj9);
IkReal x364=(cj9*new_r00);
IkReal x365=((1.0)*sj10);
IkReal x366=(cj9*new_r01);
IkReal x367=(sj10*x361);
IkReal x368=((1.0)*x361);
IkReal x369=(x362*x365);
evalcond[0]=(((cj10*x362))+new_r20);
evalcond[1]=((((-1.0)*cj10*x368))+new_r21);
evalcond[2]=((((-1.0)*new_r00*x363))+((cj9*new_r10))+x361);
evalcond[3]=(((cj9*new_r11))+x362+(((-1.0)*new_r01*x363)));
evalcond[4]=(((new_r11*sj9))+x366+x367);
evalcond[5]=(((cj9*x362))+((sj9*x367))+new_r11);
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x369))+x364);
evalcond[7]=((((-1.0)*x362*x363))+((cj9*x367))+new_r01);
evalcond[8]=(((cj9*x361))+(((-1.0)*sj10*x362*x363))+new_r10);
evalcond[9]=((((-1.0)*x361*x363))+(((-1.0)*cj9*x369))+new_r00);
evalcond[10]=(((cj10*new_r20))+(((-1.0)*new_r10*sj10*x363))+x362+(((-1.0)*x364*x365)));
evalcond[11]=(((cj10*new_r21))+(((-1.0)*x368))+(((-1.0)*new_r11*sj10*x363))+(((-1.0)*x365*x366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x370.value)))+(x371.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x372=IKcos(j9);
IkReal x373=IKsin(j9);
IkReal x374=((1.0)*sj10);
IkReal x375=(cj10*x373);
IkReal x376=(new_r12*x373);
IkReal x377=(cj10*x372);
IkReal x378=(new_r02*x372);
evalcond[0]=(x377+new_r02);
evalcond[1]=(x375+new_r12);
evalcond[2]=(((new_r12*x372))+(((-1.0)*new_r02*x373)));
evalcond[3]=(x378+x376+cj10);
evalcond[4]=(((new_r00*x377))+((new_r10*x375))+((new_r20*sj10)));
evalcond[5]=(((new_r01*x377))+((new_r21*sj10))+((new_r11*x375)));
evalcond[6]=((1.0)+((new_r12*x375))+((new_r22*sj10))+((new_r02*x377)));
evalcond[7]=(((cj10*new_r22))+(((-1.0)*x374*x376))+(((-1.0)*x374*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x379=((1.0)*cj14);
IkReal x380=((1.0)*cj12);
IkReal x381=((1.0)*sj14);
IkReal x382=(cj13*r12);
IkReal x383=x86;
IkReal x384=x87;
IkReal x385=x88;
IkReal x386=(sj13*x384);
IkReal x387=(((r02*sj13))+((cj13*x383)));
IkReal x388=(((cj13*x384))+((r12*sj13)));
IkReal x389=(((sj13*x385))+(((-1.0)*cj13*r22)));
IkReal x390=(((cj13*x385))+((r22*sj13)));
IkReal x391=((((-1.0)*cj13*r02))+((sj13*x383)));
new_r00=((((-1.0)*x380*x387))+((sj12*x391)));
new_r01=(((cj12*x391))+((sj12*x387)));
new_r02=((((-1.0)*r00*x379))+((r01*sj14)));
new_r10=((((-1.0)*x380*x388))+((sj12*((x386+(((-1.0)*x382)))))));
new_r11=(((cj12*((x386+(((-1.0)*x382))))))+((sj12*x388)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x379)));
new_r20=((((-1.0)*x380*x390))+((sj12*x389)));
new_r21=(((sj12*x390))+((cj12*x389)));
new_r22=((((-1.0)*r20*x379))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=IKsign(cj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x392=((1.0)*cj14);
IkReal x393=((1.0)*cj12);
IkReal x394=((1.0)*sj14);
IkReal x395=(cj13*r12);
IkReal x396=x86;
IkReal x397=x87;
IkReal x398=x88;
IkReal x399=(sj13*x397);
IkReal x400=(((r02*sj13))+((cj13*x396)));
IkReal x401=(((r12*sj13))+((cj13*x397)));
IkReal x402=(((sj13*x398))+(((-1.0)*cj13*r22)));
IkReal x403=(((r22*sj13))+((cj13*x398)));
IkReal x404=(((sj13*x396))+(((-1.0)*cj13*r02)));
new_r00=((((-1.0)*x393*x400))+((sj12*x404)));
new_r01=(((sj12*x400))+((cj12*x404)));
new_r02=((((-1.0)*r00*x392))+((r01*sj14)));
new_r10=((((-1.0)*x393*x401))+((sj12*(((((-1.0)*x395))+x399)))));
new_r11=(((sj12*x401))+((cj12*(((((-1.0)*x395))+x399)))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x392)));
new_r20=((((-1.0)*x393*x403))+((sj12*x402)));
new_r21=(((sj12*x403))+((cj12*x402)));
new_r22=((((-1.0)*r20*x392))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x405=((1.0)*cj14);
IkReal x406=((1.0)*cj12);
IkReal x407=((1.0)*sj14);
IkReal x408=(cj13*r12);
IkReal x409=x86;
IkReal x410=x87;
IkReal x411=x88;
IkReal x412=(sj13*x410);
IkReal x413=(((r02*sj13))+((cj13*x409)));
IkReal x414=(((r12*sj13))+((cj13*x410)));
IkReal x415=(((sj13*x411))+(((-1.0)*cj13*r22)));
IkReal x416=(((r22*sj13))+((cj13*x411)));
IkReal x417=(((sj13*x409))+(((-1.0)*cj13*r02)));
new_r00=(((sj12*x417))+(((-1.0)*x406*x413)));
new_r01=(((sj12*x413))+((cj12*x417)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x405)));
new_r10=((((-1.0)*x406*x414))+((sj12*((x412+(((-1.0)*x408)))))));
new_r11=(((sj12*x414))+((cj12*((x412+(((-1.0)*x408)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x405)));
new_r20=(((sj12*x415))+(((-1.0)*x406*x416)));
new_r21=(((sj12*x416))+((cj12*x415)));
new_r22=((((-1.0)*r20*x405))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=sj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x418=(new_r12*sj9);
IkReal x419=(new_r02*sj9);
IkReal x420=(cj9*new_r12);
IkReal x421=(cj9*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=(x420+(((-1.0)*x419)));
evalcond[7]=((((-1.0)*x420))+x419);
evalcond[8]=(x418+x421);
evalcond[9]=((((-1.0)*x421))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x422=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x422))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x422))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x422))), (((new_r01*sj9))+(((-1.0)*new_r11*x422))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x423=IKsin(j11);
IkReal x424=IKcos(j11);
IkReal x425=((1.0)*sj9);
IkReal x426=(cj9*x423);
IkReal x427=((1.0)*x424);
IkReal x428=(x424*x425);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x423);
evalcond[1]=((((-1.0)*new_r00*x425))+((cj9*new_r10))+x423);
evalcond[2]=(((cj9*new_r11))+x424+(((-1.0)*new_r01*x425)));
evalcond[3]=(((cj9*x424))+((sj9*x423))+new_r11);
evalcond[4]=(((new_r10*sj9))+(((-1.0)*x427))+((cj9*new_r00)));
evalcond[5]=((((-1.0)*x428))+x426+new_r01);
evalcond[6]=((((-1.0)*x428))+x426+new_r10);
evalcond[7]=((((-1.0)*cj9*x427))+new_r00+(((-1.0)*x423*x425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x429=(new_r02*sj9);
IkReal x430=(cj9*new_r12);
IkReal x431=(((new_r12*sj9))+((cj9*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=((((-1.0)*x429))+x430);
evalcond[7]=((((-1.0)*x430))+x429);
evalcond[8]=x431;
evalcond[9]=x431;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x432=((1.0)*new_r10);
if( IKabs((((new_r11*sj9))+(((-1.0)*cj9*x432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj9*x432))+(((-1.0)*cj9*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj9))+(((-1.0)*cj9*x432))))+IKsqr(((((-1.0)*sj9*x432))+(((-1.0)*cj9*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((new_r11*sj9))+(((-1.0)*cj9*x432))), ((((-1.0)*sj9*x432))+(((-1.0)*cj9*new_r11))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x433=IKcos(j11);
IkReal x434=IKsin(j11);
IkReal x435=((1.0)*sj9);
IkReal x436=(cj9*x433);
IkReal x437=((1.0)*x434);
IkReal x438=(x434*x435);
evalcond[0]=(((new_r10*sj9))+((cj9*new_r00))+x433);
evalcond[1]=((((-1.0)*new_r00*x435))+((cj9*new_r10))+x434);
evalcond[2]=((((-1.0)*new_r01*x435))+((cj9*new_r11))+x433);
evalcond[3]=((((-1.0)*x437))+((new_r11*sj9))+((cj9*new_r01)));
evalcond[4]=(((cj9*x434))+((sj9*x433))+new_r10);
evalcond[5]=((((-1.0)*x438))+x436+new_r11);
evalcond[6]=((((-1.0)*x438))+x436+new_r00);
evalcond[7]=((((-1.0)*x433*x435))+(((-1.0)*cj9*x437))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x439=(new_r02*sj9);
IkReal x440=(cj9*new_r12);
IkReal x441=(((new_r10*sj9))+((cj9*new_r00)));
IkReal x442=(((new_r11*sj9))+((cj9*new_r01)));
IkReal x443=((1.0)+((new_r12*sj9))+((cj9*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj9+new_r02);
evalcond[3]=(sj9+new_r12);
evalcond[4]=((((-1.0)*x439))+x440);
evalcond[5]=((((-1.0)*x440))+x439);
evalcond[6]=x443;
evalcond[7]=x442;
evalcond[8]=x441;
evalcond[9]=x441;
evalcond[10]=x442;
evalcond[11]=x443;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x444=IKcos(j11);
IkReal x445=IKsin(j11);
IkReal x446=((1.0)*new_r02);
evalcond[0]=(x444+new_r20);
evalcond[1]=((((-1.0)*x445))+new_r21);
evalcond[2]=(((new_r12*x444))+new_r01);
evalcond[3]=(((new_r12*x445))+new_r00);
evalcond[4]=((((-1.0)*x444*x446))+new_r11);
evalcond[5]=((((-1.0)*x445*x446))+new_r10);
evalcond[6]=(((new_r00*new_r12))+x445+(((-1.0)*new_r10*x446)));
evalcond[7]=(((new_r01*new_r12))+x444+(((-1.0)*new_r11*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x447=(new_r12*sj9);
IkReal x448=((1.0)*sj9);
IkReal x449=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x449))+new_r02);
evalcond[3]=((((-1.0)*x448))+new_r12);
evalcond[4]=(((cj9*new_r12))+(((-1.0)*new_r02*x448)));
evalcond[5]=(((new_r02*sj9))+(((-1.0)*new_r12*x449)));
evalcond[6]=((-1.0)+((cj9*new_r02))+x447);
evalcond[7]=(((new_r11*sj9))+((cj9*new_r01)));
evalcond[8]=(((new_r10*sj9))+((cj9*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x449))+(((-1.0)*new_r10*x448)));
evalcond[10]=((((-1.0)*new_r01*x449))+(((-1.0)*new_r11*x448)));
evalcond[11]=((1.0)+(((-1.0)*x447))+(((-1.0)*new_r02*x449)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x450=IKcos(j11);
IkReal x451=IKsin(j11);
IkReal x452=((1.0)*new_r12);
evalcond[0]=(x451+new_r21);
evalcond[1]=((((-1.0)*x450))+new_r20);
evalcond[2]=(((new_r02*x450))+new_r11);
evalcond[3]=(((new_r02*x451))+new_r10);
evalcond[4]=((((-1.0)*x450*x452))+new_r01);
evalcond[5]=((((-1.0)*x451*x452))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x452))+x451+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x452))+x450+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x453=(sj10+new_r22);
IkReal x454=(cj10+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=x453;
evalcond[2]=x453;
evalcond[3]=x454;
evalcond[4]=new_r12;
evalcond[5]=x454;
evalcond[6]=(((cj10*new_r00))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+((new_r21*sj10)));
evalcond[8]=((1.0)+((cj10*new_r02))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+(((-1.0)*new_r02*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x455=IKsin(j11);
IkReal x456=IKcos(j11);
IkReal x457=((1.0)*new_r02);
IkReal x458=((1.0)*x455);
evalcond[0]=(x455+new_r10);
evalcond[1]=(x456+new_r11);
evalcond[2]=(((new_r02*x455))+new_r21);
evalcond[3]=(((new_r22*x456))+new_r00);
evalcond[4]=((((-1.0)*x456*x457))+new_r20);
evalcond[5]=((((-1.0)*new_r22*x458))+new_r01);
evalcond[6]=((((-1.0)*new_r20*x457))+((new_r00*new_r22))+x456);
evalcond[7]=((((-1.0)*new_r21*x457))+((new_r01*new_r22))+(((-1.0)*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x459=(sj10+new_r22);
IkReal x460=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=x459;
evalcond[2]=x459;
evalcond[3]=((((-1.0)*x460))+new_r02);
evalcond[4]=new_r12;
evalcond[5]=(cj10+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r00*x460))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r01*x460))+((new_r21*sj10)));
evalcond[8]=((1.0)+(((-1.0)*new_r02*x460))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+((new_r02*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r10, new_r11);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x461=IKcos(j11);
IkReal x462=IKsin(j11);
IkReal x463=((1.0)*new_r22);
IkReal x464=((1.0)*x462);
evalcond[0]=(((new_r02*x461))+new_r20);
evalcond[1]=(x462+(((-1.0)*new_r10)));
evalcond[2]=(x461+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r02*x464))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+((new_r22*x461)));
evalcond[5]=((((-1.0)*x462*x463))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r00*x463))+x461+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x463))+(((-1.0)*x464))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x465=(sj10+new_r22);
IkReal x466=(cj10+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x465;
evalcond[2]=x465;
evalcond[3]=new_r02;
evalcond[4]=x466;
evalcond[5]=x466;
evalcond[6]=(((cj10*new_r10))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r11))+((new_r21*sj10)));
evalcond[8]=((1.0)+((cj10*new_r12))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+(((-1.0)*new_r12*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r00, new_r01);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x467=IKsin(j11);
IkReal x468=IKcos(j11);
IkReal x469=((1.0)*new_r12);
IkReal x470=((1.0)*x467);
evalcond[0]=(((new_r12*x467))+new_r21);
evalcond[1]=(x467+(((-1.0)*new_r00)));
evalcond[2]=(x468+(((-1.0)*new_r01)));
evalcond[3]=(new_r10+((new_r22*x468)));
evalcond[4]=((((-1.0)*x468*x469))+new_r20);
evalcond[5]=((((-1.0)*new_r22*x470))+new_r11);
evalcond[6]=((((-1.0)*new_r20*x469))+x468+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*new_r21*x469))+(((-1.0)*x470))+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x471=(sj10+new_r22);
IkReal x472=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x471;
evalcond[2]=x471;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*x472))+new_r12);
evalcond[5]=(cj10+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r10*x472))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r11*x472))+((new_r21*sj10)));
evalcond[8]=((1.0)+(((-1.0)*new_r12*x472))+((new_r22*sj10)));
evalcond[9]=(((cj10*new_r22))+((new_r12*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x473=IKcos(j11);
IkReal x474=IKsin(j11);
IkReal x475=((1.0)*new_r22);
IkReal x476=((1.0)*x474);
evalcond[0]=(x474+new_r00);
evalcond[1]=(x473+new_r01);
evalcond[2]=(((new_r12*x473))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x476))+new_r21);
evalcond[4]=(((new_r22*x473))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*new_r11))+(((-1.0)*x474*x475)));
evalcond[6]=((((-1.0)*new_r10*x475))+((new_r12*new_r20))+x473);
evalcond[7]=((((-1.0)*x476))+(((-1.0)*new_r11*x475))+((new_r12*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x478=IKPowWithIntegerCheck(cj10,-1);
if(!x478.valid){
continue;
}
IkReal x477=x478.value;
CheckValue<IkReal> x479=IKPowWithIntegerCheck(sj10,-1);
if(!x479.valid){
continue;
}
CheckValue<IkReal> x480=IKPowWithIntegerCheck(sj9,-1);
if(!x480.valid){
continue;
}
if( IKabs((x477*(x479.value)*(x480.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x477)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x477*(x479.value)*(x480.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))))+IKsqr(((-1.0)*new_r20*x477))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x477*(x479.value)*(x480.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))), ((-1.0)*new_r20*x477));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x481=IKsin(j11);
IkReal x482=IKcos(j11);
IkReal x483=((1.0)*sj9);
IkReal x484=(cj9*new_r00);
IkReal x485=((1.0)*sj10);
IkReal x486=(cj9*new_r01);
IkReal x487=(sj10*x481);
IkReal x488=((1.0)*x481);
IkReal x489=(x482*x485);
evalcond[0]=(new_r20+((cj10*x482)));
evalcond[1]=(new_r21+(((-1.0)*cj10*x488)));
evalcond[2]=((((-1.0)*new_r00*x483))+((cj9*new_r10))+x481);
evalcond[3]=((((-1.0)*new_r01*x483))+((cj9*new_r11))+x482);
evalcond[4]=(((new_r11*sj9))+x487+x486);
evalcond[5]=(((cj9*x482))+((sj9*x487))+new_r11);
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x489))+x484);
evalcond[7]=(((cj9*x487))+(((-1.0)*x482*x483))+new_r01);
evalcond[8]=((((-1.0)*sj10*x482*x483))+((cj9*x481))+new_r10);
evalcond[9]=((((-1.0)*cj9*x489))+(((-1.0)*x481*x483))+new_r00);
evalcond[10]=((((-1.0)*x484*x485))+((cj10*new_r20))+x482+(((-1.0)*new_r10*sj10*x483)));
evalcond[11]=(((cj10*new_r21))+(((-1.0)*new_r11*sj10*x483))+(((-1.0)*x488))+(((-1.0)*x485*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x491=IKPowWithIntegerCheck(cj10,-1);
if(!x491.valid){
continue;
}
IkReal x490=x491.value;
CheckValue<IkReal> x492=IKPowWithIntegerCheck(cj9,-1);
if(!x492.valid){
continue;
}
if( IKabs((x490*(x492.value)*(((((-1.0)*cj10*new_r10))+(((-1.0)*new_r20*sj10*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x490)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x490*(x492.value)*(((((-1.0)*cj10*new_r10))+(((-1.0)*new_r20*sj10*sj9))))))+IKsqr(((-1.0)*new_r20*x490))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x490*(x492.value)*(((((-1.0)*cj10*new_r10))+(((-1.0)*new_r20*sj10*sj9))))), ((-1.0)*new_r20*x490));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x493=IKsin(j11);
IkReal x494=IKcos(j11);
IkReal x495=((1.0)*sj9);
IkReal x496=(cj9*new_r00);
IkReal x497=((1.0)*sj10);
IkReal x498=(cj9*new_r01);
IkReal x499=(sj10*x493);
IkReal x500=((1.0)*x493);
IkReal x501=(x494*x497);
evalcond[0]=(new_r20+((cj10*x494)));
evalcond[1]=((((-1.0)*cj10*x500))+new_r21);
evalcond[2]=((((-1.0)*new_r00*x495))+((cj9*new_r10))+x493);
evalcond[3]=((((-1.0)*new_r01*x495))+((cj9*new_r11))+x494);
evalcond[4]=(((new_r11*sj9))+x498+x499);
evalcond[5]=(new_r11+((cj9*x494))+((sj9*x499)));
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x501))+x496);
evalcond[7]=((((-1.0)*x494*x495))+new_r01+((cj9*x499)));
evalcond[8]=((((-1.0)*sj10*x494*x495))+new_r10+((cj9*x493)));
evalcond[9]=((((-1.0)*x493*x495))+new_r00+(((-1.0)*cj9*x501)));
evalcond[10]=(((cj10*new_r20))+(((-1.0)*new_r10*sj10*x495))+(((-1.0)*x496*x497))+x494);
evalcond[11]=(((cj10*new_r21))+(((-1.0)*x500))+(((-1.0)*x497*x498))+(((-1.0)*new_r11*sj10*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x502 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x502.valid){
continue;
}
CheckValue<IkReal> x503=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x503.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x502.value)+(((1.5707963267949)*(x503.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x504=IKsin(j11);
IkReal x505=IKcos(j11);
IkReal x506=((1.0)*sj9);
IkReal x507=(cj9*new_r00);
IkReal x508=((1.0)*sj10);
IkReal x509=(cj9*new_r01);
IkReal x510=(sj10*x504);
IkReal x511=((1.0)*x504);
IkReal x512=(x505*x508);
evalcond[0]=(new_r20+((cj10*x505)));
evalcond[1]=((((-1.0)*cj10*x511))+new_r21);
evalcond[2]=((((-1.0)*new_r00*x506))+((cj9*new_r10))+x504);
evalcond[3]=((((-1.0)*new_r01*x506))+((cj9*new_r11))+x505);
evalcond[4]=(((new_r11*sj9))+x509+x510);
evalcond[5]=(((cj9*x505))+((sj9*x510))+new_r11);
evalcond[6]=(((new_r10*sj9))+x507+(((-1.0)*x512)));
evalcond[7]=((((-1.0)*x505*x506))+((cj9*x510))+new_r01);
evalcond[8]=(((cj9*x504))+new_r10+(((-1.0)*sj10*x505*x506)));
evalcond[9]=((((-1.0)*cj9*x512))+(((-1.0)*x504*x506))+new_r00);
evalcond[10]=(((cj10*new_r20))+(((-1.0)*x507*x508))+x505+(((-1.0)*new_r10*sj10*x506)));
evalcond[11]=(((cj10*new_r21))+(((-1.0)*x508*x509))+(((-1.0)*new_r11*sj10*x506))+(((-1.0)*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x514.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x513.value)+(((1.5707963267949)*(x514.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
evalcond[0]=(((cj10*(IKcos(j11))))+new_r20);
evalcond[1]=((((-1.0)*cj10*(IKsin(j11))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
IkReal x515=((1.0)*cj14);
IkReal x516=((1.0)*cj12);
IkReal x517=((1.0)*sj14);
IkReal x518=(cj13*r12);
IkReal x519=x86;
IkReal x520=x87;
IkReal x521=x88;
IkReal x522=(sj13*x520);
IkReal x523=(((r02*sj13))+((cj13*x519)));
IkReal x524=(((r12*sj13))+((cj13*x520)));
IkReal x525=((((-1.0)*cj13*r22))+((sj13*x521)));
IkReal x526=(((cj13*x521))+((r22*sj13)));
IkReal x527=(((sj13*x519))+(((-1.0)*cj13*r02)));
new_r00=((((-1.0)*x516*x523))+((sj12*x527)));
new_r01=(((cj12*x527))+((sj12*x523)));
new_r02=((((-1.0)*r00*x515))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x518))+x522))))+(((-1.0)*x516*x524)));
new_r11=(((cj12*(((((-1.0)*x518))+x522))))+((sj12*x524)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x515)));
new_r20=((((-1.0)*x516*x526))+((sj12*x525)));
new_r21=(((cj12*x525))+((sj12*x526)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x515)));
IkReal x528=((1.0)*sj14);
j9eval[0]=cj10;
j9eval[1]=((IKabs((((cj14*r10))+(((-1.0)*r11*x528)))))+(IKabs(((((-1.0)*r01*x528))+((cj14*r00))))));
j9eval[2]=IKsign(cj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x529=((1.0)*cj14);
IkReal x530=((1.0)*cj12);
IkReal x531=((1.0)*sj14);
IkReal x532=(cj13*r12);
IkReal x533=x86;
IkReal x534=x87;
IkReal x535=x88;
IkReal x536=(sj13*x534);
IkReal x537=(((r02*sj13))+((cj13*x533)));
IkReal x538=(((r12*sj13))+((cj13*x534)));
IkReal x539=((((-1.0)*cj13*r22))+((sj13*x535)));
IkReal x540=(((cj13*x535))+((r22*sj13)));
IkReal x541=((((-1.0)*cj13*r02))+((sj13*x533)));
new_r00=((((-1.0)*x530*x537))+((sj12*x541)));
new_r01=(((cj12*x541))+((sj12*x537)));
new_r02=((((-1.0)*r00*x529))+((r01*sj14)));
new_r10=((((-1.0)*x530*x538))+((sj12*(((((-1.0)*x532))+x536)))));
new_r11=(((cj12*(((((-1.0)*x532))+x536))))+((sj12*x538)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x529)));
new_r20=((((-1.0)*x530*x540))+((sj12*x539)));
new_r21=(((cj12*x539))+((sj12*x540)));
new_r22=((((-1.0)*r20*x529))+((r21*sj14)));
j9eval[0]=cj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x542=((1.0)*cj14);
IkReal x543=((1.0)*cj12);
IkReal x544=((1.0)*sj14);
IkReal x545=(cj13*r12);
IkReal x546=x86;
IkReal x547=x87;
IkReal x548=x88;
IkReal x549=(sj13*x547);
IkReal x550=(((r02*sj13))+((cj13*x546)));
IkReal x551=(((r12*sj13))+((cj13*x547)));
IkReal x552=(((sj13*x548))+(((-1.0)*cj13*r22)));
IkReal x553=(((cj13*x548))+((r22*sj13)));
IkReal x554=((((-1.0)*cj13*r02))+((sj13*x546)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x543*x550))+((sj12*x554)));
new_r01=(((cj12*x554))+((sj12*x550)));
new_r02=((((-1.0)*r00*x542))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x545))+x549))))+(((-1.0)*x543*x551)));
new_r11=(((cj12*(((((-1.0)*x545))+x549))))+((sj12*x551)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x542)));
new_r20=((((-1.0)*x543*x553))+((sj12*x552)));
new_r21=(((cj12*x552))+((sj12*x553)));
new_r22=((((-1.0)*r20*x542))+((r21*sj14)));
IkReal x555=(sj11*sj14);
IkReal x556=((1.0)*cj14*sj11);
j9eval[0]=((IKabs(((((-1.0)*r10*x556))+((r11*x555)))))+(IKabs(((((-1.0)*r00*x556))+((r01*x555))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x557=((1.0)*cj14);
IkReal x558=((1.0)*cj12);
IkReal x559=((1.0)*sj14);
IkReal x560=(cj13*r12);
IkReal x561=x86;
IkReal x562=x87;
IkReal x563=x88;
IkReal x564=(sj13*x562);
IkReal x565=(((r02*sj13))+((cj13*x561)));
IkReal x566=(((r12*sj13))+((cj13*x562)));
IkReal x567=(((sj13*x563))+(((-1.0)*cj13*r22)));
IkReal x568=(((r22*sj13))+((cj13*x563)));
IkReal x569=(((sj13*x561))+(((-1.0)*cj13*r02)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x558*x565))+((sj12*x569)));
new_r01=(((sj12*x565))+((cj12*x569)));
new_r02=((((-1.0)*r00*x557))+((r01*sj14)));
new_r10=((((-1.0)*x558*x566))+((sj12*((x564+(((-1.0)*x560)))))));
new_r11=(((sj12*x566))+((cj12*((x564+(((-1.0)*x560)))))));
new_r12=((((-1.0)*r10*x557))+((r11*sj14)));
new_r20=((((-1.0)*x558*x568))+((sj12*x567)));
new_r21=(((sj12*x568))+((cj12*x567)));
new_r22=((((-1.0)*r20*x557))+((r21*sj14)));
IkReal x570=(cj11*sj14);
IkReal x571=((1.0)*cj11*cj14);
j9eval[0]=((IKabs(((((-1.0)*r10*x571))+((r11*x570)))))+(IKabs((((r01*x570))+(((-1.0)*r00*x571))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x572=((1.0)*cj14);
IkReal x573=((1.0)*cj12);
IkReal x574=((1.0)*sj14);
IkReal x575=(cj13*r12);
IkReal x576=x86;
IkReal x577=x87;
IkReal x578=x88;
IkReal x579=(sj13*x577);
IkReal x580=(((r02*sj13))+((cj13*x576)));
IkReal x581=(((r12*sj13))+((cj13*x577)));
IkReal x582=(((sj13*x578))+(((-1.0)*cj13*r22)));
IkReal x583=(((cj13*x578))+((r22*sj13)));
IkReal x584=(((sj13*x576))+(((-1.0)*cj13*r02)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x573*x580))+((sj12*x584)));
new_r01=(((sj12*x580))+((cj12*x584)));
new_r02=((((-1.0)*r00*x572))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x575))+x579))))+(((-1.0)*x573*x581)));
new_r11=(((cj12*(((((-1.0)*x575))+x579))))+((sj12*x581)));
new_r12=((((-1.0)*r10*x572))+((r11*sj14)));
new_r20=((((-1.0)*x573*x583))+((sj12*x582)));
new_r21=(((sj12*x583))+((cj12*x582)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x572)));
IkReal x585=(sj11*sj14);
IkReal x586=((1.0)*cj14*sj11);
j9eval[0]=((IKabs((((r11*x585))+(((-1.0)*r10*x586)))))+(IKabs((((r01*x585))+(((-1.0)*r00*x586))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x587=IKcos(j9);
IkReal x588=IKsin(j9);
IkReal x589=((1.0)*x588);
evalcond[0]=(x587+new_r11);
evalcond[1]=(new_r01+(((-1.0)*x589)));
evalcond[2]=(new_r10+(((-1.0)*x589)));
evalcond[3]=((((-1.0)*x587))+new_r00);
evalcond[4]=(((new_r12*x588))+((new_r02*x587)));
evalcond[5]=(((new_r01*x587))+((new_r11*x588)));
evalcond[6]=(((new_r12*x587))+(((-1.0)*new_r02*x589)));
evalcond[7]=((((-1.0)*new_r00*x589))+((new_r10*x587)));
evalcond[8]=((-1.0)+((new_r00*x587))+((new_r10*x588)));
evalcond[9]=((1.0)+(((-1.0)*new_r01*x589))+((new_r11*x587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x590=IKsin(j9);
IkReal x591=IKcos(j9);
IkReal x592=((1.0)*x590);
evalcond[0]=(x590+new_r01);
evalcond[1]=(x590+new_r10);
evalcond[2]=(x591+new_r00);
evalcond[3]=((((-1.0)*x591))+new_r11);
evalcond[4]=(((new_r12*x590))+((new_r02*x591)));
evalcond[5]=(((new_r11*x590))+((new_r01*x591)));
evalcond[6]=(((new_r12*x591))+(((-1.0)*new_r02*x592)));
evalcond[7]=((((-1.0)*new_r00*x592))+((new_r10*x591)));
evalcond[8]=((1.0)+((new_r10*x590))+((new_r00*x591)));
evalcond[9]=((-1.0)+((new_r11*x591))+(((-1.0)*new_r01*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x593=IKcos(j9);
IkReal x594=IKsin(j9);
IkReal x595=((1.0)*x594);
evalcond[0]=(x594+new_r11);
evalcond[1]=(x593+new_r01);
evalcond[2]=(x593+new_r10);
evalcond[3]=((((-1.0)*x595))+new_r00);
evalcond[4]=(((new_r12*x594))+((new_r02*x593)));
evalcond[5]=(((new_r10*x594))+((new_r00*x593)));
evalcond[6]=(((new_r12*x593))+(((-1.0)*new_r02*x595)));
evalcond[7]=(((new_r11*x593))+(((-1.0)*new_r01*x595)));
evalcond[8]=((1.0)+((new_r11*x594))+((new_r01*x593)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x595))+((new_r10*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x596=IKsin(j9);
IkReal x597=IKcos(j9);
IkReal x598=((1.0)*x597);
IkReal x599=((1.0)*x596);
evalcond[0]=(x596+new_r00);
evalcond[1]=((((-1.0)*x599))+new_r11);
evalcond[2]=((((-1.0)*x598))+new_r01);
evalcond[3]=((((-1.0)*x598))+new_r10);
evalcond[4]=(((new_r12*x596))+((new_r02*x597)));
evalcond[5]=(((new_r10*x596))+((new_r00*x597)));
evalcond[6]=(((new_r12*x597))+(((-1.0)*new_r02*x599)));
evalcond[7]=(((new_r11*x597))+(((-1.0)*new_r01*x599)));
evalcond[8]=((-1.0)+((new_r11*x596))+((new_r01*x597)));
evalcond[9]=((-1.0)+(((-1.0)*new_r00*x599))+((new_r10*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*new_r11);
evalcond[3]=new_r01;
evalcond[4]=new_r20;
evalcond[5]=0;
evalcond[6]=sj11;
evalcond[7]=((-1.0)*sj11);
evalcond[8]=((-1.0)*cj11);
evalcond[9]=cj11;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x601 = IKatan2WithCheck(IkReal(new_r01),new_r11,IKFAST_ATAN2_MAGTHRESH);
if(!x601.valid){
continue;
}
IkReal x600=x601.value;
j9array[0]=((-1.0)*x600);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x600)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j9))))+(((-1.0)*new_r11*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r00)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x602=((1.0)*cj14);
IkReal x603=((1.0)*cj12);
IkReal x604=((1.0)*sj14);
IkReal x605=(cj13*r12);
IkReal x606=x86;
IkReal x607=x87;
IkReal x608=x88;
IkReal x609=(sj13*x607);
IkReal x610=(((r02*sj13))+((cj13*x606)));
IkReal x611=(((r12*sj13))+((cj13*x607)));
IkReal x612=(((sj13*x608))+(((-1.0)*cj13*r22)));
IkReal x613=(((r22*sj13))+((cj13*x608)));
IkReal x614=(((sj13*x606))+(((-1.0)*cj13*r02)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=(((sj12*x614))+(((-1.0)*x603*x610)));
new_r12=((((-1.0)*r10*x602))+((r11*sj14)));
new_r01=(((sj12*x610))+((cj12*x614)));
new_r02=((((-1.0)*r00*x602))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x605))+x609))))+(((-1.0)*x603*x611)));
new_r11=(((sj12*x611))+((cj12*(((((-1.0)*x605))+x609)))));
new_r20=(((sj12*x612))+(((-1.0)*x603*x613)));
new_r21=(((sj12*x613))+((cj12*x612)));
new_r22=((((-1.0)*r20*x602))+((r21*sj14)));
j9eval[0]=((IKabs(sj11))+(IKabs(cj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x616=IKPowWithIntegerCheck(new_r10,-1);
if(!x616.valid){
continue;
}
IkReal x615=x616.value;
CheckValue<IkReal> x617=IKPowWithIntegerCheck(new_r11,-1);
if(!x617.valid){
continue;
}
if( IKabs((x615*(x617.value)*(((((-1.0)*new_r10*sj11))+((new_r01*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj11*x615)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x615*(x617.value)*(((((-1.0)*new_r10*sj11))+((new_r01*sj11))))))+IKsqr(((-1.0)*sj11*x615))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x615*(x617.value)*(((((-1.0)*new_r10*sj11))+((new_r01*sj11))))), ((-1.0)*sj11*x615));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x618=IKcos(j9);
IkReal x619=IKsin(j9);
IkReal x620=(sj11*x618);
IkReal x621=((1.0)*x619);
IkReal x622=(cj11*x618);
IkReal x623=(cj11*x621);
evalcond[0]=(new_r02*x618);
evalcond[1]=((-1.0)*new_r02*x619);
evalcond[2]=(((new_r10*x618))+sj11);
evalcond[3]=(((new_r10*x619))+(((-1.0)*cj11)));
evalcond[4]=(sj11+((new_r11*x619))+((new_r01*x618)));
evalcond[5]=(((sj11*x619))+x622+new_r11);
evalcond[6]=((((-1.0)*new_r01*x621))+cj11+((new_r11*x618)));
evalcond[7]=((((-1.0)*x623))+x620+new_r01);
evalcond[8]=((((-1.0)*x623))+x620+new_r10);
evalcond[9]=((((-1.0)*sj11*x621))+(((-1.0)*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x624=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625 = IKatan2WithCheck(IkReal(cj11),((-1.0)*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x625.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x624.value)))+(x625.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x626=IKcos(j9);
IkReal x627=IKsin(j9);
IkReal x628=(sj11*x626);
IkReal x629=((1.0)*x627);
IkReal x630=(cj11*x626);
IkReal x631=(cj11*x629);
evalcond[0]=(new_r02*x626);
evalcond[1]=((-1.0)*new_r02*x627);
evalcond[2]=(sj11+((new_r10*x626)));
evalcond[3]=(((new_r10*x627))+(((-1.0)*cj11)));
evalcond[4]=(((new_r01*x626))+sj11+((new_r11*x627)));
evalcond[5]=(((sj11*x627))+x630+new_r11);
evalcond[6]=((((-1.0)*new_r01*x629))+cj11+((new_r11*x626)));
evalcond[7]=((((-1.0)*x631))+x628+new_r01);
evalcond[8]=((((-1.0)*x631))+x628+new_r10);
evalcond[9]=((((-1.0)*sj11*x629))+(((-1.0)*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r02)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=0;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x632=((1.0)*cj14);
IkReal x633=((1.0)*cj12);
IkReal x634=((1.0)*sj14);
IkReal x635=(cj13*r12);
IkReal x636=x87;
IkReal x637=x86;
IkReal x638=x88;
IkReal x639=(sj13*x636);
IkReal x640=(((r02*sj13))+((cj13*x637)));
IkReal x641=(((cj13*x636))+((r12*sj13)));
IkReal x642=(((sj13*x638))+(((-1.0)*cj13*r22)));
IkReal x643=(((cj13*x638))+((r22*sj13)));
IkReal x644=((((-1.0)*cj13*r02))+((sj13*x637)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r10=((((-1.0)*x633*x641))+((sj12*((x639+(((-1.0)*x635)))))));
new_r02=((((-1.0)*r00*x632))+((r01*sj14)));
new_r00=(((sj12*x644))+(((-1.0)*x633*x640)));
new_r01=(((sj12*x640))+((cj12*x644)));
new_r11=(((sj12*x641))+((cj12*((x639+(((-1.0)*x635)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x632)));
new_r20=(((sj12*x642))+(((-1.0)*x633*x643)));
new_r21=(((sj12*x643))+((cj12*x642)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x632)));
j9eval[0]=((IKabs(sj11))+(IKabs(cj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x647=IKPowWithIntegerCheck(new_r00,-1);
if(!x647.valid){
continue;
}
IkReal x645=x647.value;
IkReal x646=((1.0)*sj11);
CheckValue<IkReal> x648=IKPowWithIntegerCheck(new_r01,-1);
if(!x648.valid){
continue;
}
if( IKabs((sj11*x645)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x645*(x648.value)*(((((-1.0)*new_r11*x646))+(((-1.0)*new_r00*x646)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj11*x645))+IKsqr((x645*(x648.value)*(((((-1.0)*new_r11*x646))+(((-1.0)*new_r00*x646))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((sj11*x645), (x645*(x648.value)*(((((-1.0)*new_r11*x646))+(((-1.0)*new_r00*x646))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x649=IKsin(j9);
IkReal x650=IKcos(j9);
IkReal x651=(sj11*x650);
IkReal x652=((1.0)*x649);
IkReal x653=(cj11*x650);
IkReal x654=(cj11*x652);
evalcond[0]=(new_r12*x650);
evalcond[1]=(new_r12*x649);
evalcond[2]=((((-1.0)*new_r00*x652))+sj11);
evalcond[3]=(((new_r00*x650))+(((-1.0)*cj11)));
evalcond[4]=(((new_r11*x649))+sj11+((new_r01*x650)));
evalcond[5]=(x653+new_r11+((sj11*x649)));
evalcond[6]=((((-1.0)*x654))+x651);
evalcond[7]=(cj11+(((-1.0)*new_r01*x652))+((new_r11*x650)));
evalcond[8]=((((-1.0)*x654))+x651+new_r01);
evalcond[9]=((((-1.0)*x653))+(((-1.0)*sj11*x652))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(sj11),cj11,IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x656.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x655.value)+(((1.5707963267949)*(x656.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x657=IKsin(j9);
IkReal x658=IKcos(j9);
IkReal x659=(sj11*x658);
IkReal x660=((1.0)*x657);
IkReal x661=(cj11*x658);
IkReal x662=(cj11*x660);
evalcond[0]=(new_r12*x658);
evalcond[1]=(new_r12*x657);
evalcond[2]=(sj11+(((-1.0)*new_r00*x660)));
evalcond[3]=(((new_r00*x658))+(((-1.0)*cj11)));
evalcond[4]=(sj11+((new_r01*x658))+((new_r11*x657)));
evalcond[5]=(x661+new_r11+((sj11*x657)));
evalcond[6]=((((-1.0)*x662))+x659);
evalcond[7]=(cj11+((new_r11*x658))+(((-1.0)*new_r01*x660)));
evalcond[8]=((((-1.0)*x662))+x659+new_r01);
evalcond[9]=((((-1.0)*sj11*x660))+(((-1.0)*x661))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[2];
IkReal x663=((1.0)*cj14);
IkReal x664=((1.0)*cj12);
IkReal x665=((1.0)*sj14);
IkReal x666=(cj13*r12);
IkReal x667=x88;
IkReal x668=x86;
IkReal x669=x87;
IkReal x670=(sj13*x669);
IkReal x671=(((sj13*x667))+(((-1.0)*cj13*r22)));
IkReal x672=(((r22*sj13))+((cj13*x667)));
IkReal x673=(((r02*sj13))+((cj13*x668)));
IkReal x674=(((r12*sj13))+((cj13*x669)));
IkReal x675=(((sj13*x668))+(((-1.0)*cj13*r02)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r02=((((-1.0)*r00*x663))+((r01*sj14)));
new_r12=((((-1.0)*r10*x663))+((r11*sj14)));
new_r20=((((-1.0)*x664*x672))+((sj12*x671)));
new_r21=(((cj12*x671))+((sj12*x672)));
new_r01=(((cj12*x675))+((sj12*x673)));
new_r11=(((cj12*(((((-1.0)*x666))+x670))))+((sj12*x674)));
new_r00=((((-1.0)*x664*x673))+((sj12*x675)));
new_r10=(((sj12*(((((-1.0)*x666))+x670))))+(((-1.0)*x664*x674)));
new_r22=((((-1.0)*r20*x663))+((r21*sj14)));
j9eval[0]=1.0;
j9eval[1]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x676=((1.0)*new_r00);
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign((((cj11*new_r10))+(((-1.0)*sj11*x676)))),-1);
if(!x677.valid){
continue;
}
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(((new_r00*new_r00)+(((-1.0)*(cj11*cj11))))),(((cj11*sj11))+(((-1.0)*new_r10*x676))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x677.value)))+(x678.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x679=IKsin(j9);
IkReal x680=IKcos(j9);
IkReal x681=((1.0)*new_r10);
IkReal x682=(new_r00*x680);
IkReal x683=(new_r10*x679);
IkReal x684=(sj11*x680);
IkReal x685=((1.0)*x679);
IkReal x686=(cj11*x680);
IkReal x687=(cj11*x685);
IkReal x688=(x683+x682);
evalcond[0]=(cj11+x688);
evalcond[1]=(((sj11*x679))+x686+new_r00);
evalcond[2]=(sj11+((new_r10*x680))+(((-1.0)*new_r00*x685)));
evalcond[3]=(((new_r00*x679))+(((-1.0)*x680*x681))+sj11);
evalcond[4]=((((-1.0)*x687))+x684+new_r10);
evalcond[5]=(x688+(((-1.0)*cj11)));
evalcond[6]=((((-1.0)*sj11*x685))+new_r00+(((-1.0)*x686)));
evalcond[7]=((((-1.0)*x687))+(((-1.0)*x681))+x684);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x689=((1.0)*new_r10);
CheckValue<IkReal> x690=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*x689))+((new_r00*sj11)))),((((-1.0)*cj11*new_r00))+(((-1.0)*sj11*x689))),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x690.value)))+(x691.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x692=IKsin(j9);
IkReal x693=IKcos(j9);
IkReal x694=((1.0)*new_r10);
IkReal x695=(new_r00*x693);
IkReal x696=(new_r10*x692);
IkReal x697=(sj11*x693);
IkReal x698=((1.0)*x692);
IkReal x699=(cj11*x693);
IkReal x700=(cj11*x698);
IkReal x701=(x695+x696);
evalcond[0]=(cj11+x701);
evalcond[1]=(x699+new_r00+((sj11*x692)));
evalcond[2]=(((new_r10*x693))+(((-1.0)*new_r00*x698))+sj11);
evalcond[3]=((((-1.0)*x693*x694))+sj11+((new_r00*x692)));
evalcond[4]=((((-1.0)*x700))+x697+new_r10);
evalcond[5]=(x701+(((-1.0)*cj11)));
evalcond[6]=(new_r00+(((-1.0)*sj11*x698))+(((-1.0)*x699)));
evalcond[7]=((((-1.0)*x700))+x697+(((-1.0)*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x702=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x702.valid){
continue;
}
CheckValue<IkReal> x703 = IKatan2WithCheck(IkReal((new_r02*sj11)),((-1.0)*new_r12*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x703.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x702.value)))+(x703.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x704=IKcos(j9);
IkReal x705=IKsin(j9);
IkReal x706=(sj11*x704);
IkReal x707=((1.0)*x705);
IkReal x708=(cj11*x704);
IkReal x709=(cj11*x707);
evalcond[0]=(((new_r02*x704))+((new_r12*x705)));
evalcond[1]=((((-1.0)*new_r02*x707))+((new_r12*x704)));
evalcond[2]=(((new_r01*x704))+sj11+((new_r11*x705)));
evalcond[3]=(((sj11*x705))+x708+new_r11);
evalcond[4]=(sj11+((new_r10*x704))+(((-1.0)*new_r00*x707)));
evalcond[5]=(cj11+((new_r11*x704))+(((-1.0)*new_r01*x707)));
evalcond[6]=((((-1.0)*x709))+x706+new_r01);
evalcond[7]=((((-1.0)*x709))+x706+new_r10);
evalcond[8]=(((new_r00*x704))+(((-1.0)*cj11))+((new_r10*x705)));
evalcond[9]=((((-1.0)*sj11*x707))+(((-1.0)*x708))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x710=IKPowWithIntegerCheck(IKsign((((new_r11*new_r12))+((new_r01*new_r02)))),-1);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal((cj11*new_r02)),((-1.0)*cj11*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x710.value)))+(x711.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x712=IKcos(j9);
IkReal x713=IKsin(j9);
IkReal x714=(sj11*x712);
IkReal x715=((1.0)*x713);
IkReal x716=(cj11*x712);
IkReal x717=(cj11*x715);
evalcond[0]=(((new_r02*x712))+((new_r12*x713)));
evalcond[1]=((((-1.0)*new_r02*x715))+((new_r12*x712)));
evalcond[2]=(((new_r01*x712))+sj11+((new_r11*x713)));
evalcond[3]=(((sj11*x713))+x716+new_r11);
evalcond[4]=(sj11+((new_r10*x712))+(((-1.0)*new_r00*x715)));
evalcond[5]=(cj11+((new_r11*x712))+(((-1.0)*new_r01*x715)));
evalcond[6]=((((-1.0)*x717))+x714+new_r01);
evalcond[7]=((((-1.0)*x717))+x714+new_r10);
evalcond[8]=(((new_r00*x712))+(((-1.0)*cj11))+((new_r10*x713)));
evalcond[9]=((((-1.0)*sj11*x715))+(((-1.0)*x716))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(IKsign((((new_r10*new_r12))+((new_r00*new_r02)))),-1);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal((new_r02*sj11)),((-1.0)*new_r12*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x718.value)))+(x719.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x720=IKcos(j9);
IkReal x721=IKsin(j9);
IkReal x722=(sj11*x720);
IkReal x723=((1.0)*x721);
IkReal x724=(cj11*x720);
IkReal x725=(cj11*x723);
evalcond[0]=(((new_r02*x720))+((new_r12*x721)));
evalcond[1]=((((-1.0)*new_r02*x723))+((new_r12*x720)));
evalcond[2]=(((new_r01*x720))+sj11+((new_r11*x721)));
evalcond[3]=(x724+new_r11+((sj11*x721)));
evalcond[4]=(sj11+(((-1.0)*new_r00*x723))+((new_r10*x720)));
evalcond[5]=(cj11+((new_r11*x720))+(((-1.0)*new_r01*x723)));
evalcond[6]=((((-1.0)*x725))+x722+new_r01);
evalcond[7]=((((-1.0)*x725))+x722+new_r10);
evalcond[8]=(((new_r00*x720))+(((-1.0)*cj11))+((new_r10*x721)));
evalcond[9]=((((-1.0)*sj11*x723))+(((-1.0)*x724))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x726=((1.0)*cj14);
IkReal x727=((1.0)*cj12);
IkReal x728=((1.0)*sj14);
IkReal x729=(cj13*r12);
IkReal x730=x86;
IkReal x731=x87;
IkReal x732=x88;
IkReal x733=(sj13*x731);
IkReal x734=(((r02*sj13))+((cj13*x730)));
IkReal x735=(((cj13*x731))+((r12*sj13)));
IkReal x736=(((sj13*x732))+(((-1.0)*cj13*r22)));
IkReal x737=(((cj13*x732))+((r22*sj13)));
IkReal x738=((((-1.0)*cj13*r02))+((sj13*x730)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x727*x734))+((sj12*x738)));
new_r01=(((cj12*x738))+((sj12*x734)));
new_r02=((((-1.0)*r00*x726))+((r01*sj14)));
new_r10=((((-1.0)*x727*x735))+((sj12*(((((-1.0)*x729))+x733)))));
new_r11=(((cj12*(((((-1.0)*x729))+x733))))+((sj12*x735)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x726)));
new_r20=((((-1.0)*x727*x737))+((sj12*x736)));
new_r21=(((cj12*x736))+((sj12*x737)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x726)));
IkReal x739=(sj11*sj14);
IkReal x740=((1.0)*cj14*sj11);
j9eval[0]=((IKabs((((r01*x739))+(((-1.0)*r00*x740)))))+(IKabs(((((-1.0)*r10*x740))+((r11*x739))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x741=((1.0)*cj14);
IkReal x742=((1.0)*cj12);
IkReal x743=((1.0)*sj14);
IkReal x744=(cj13*r12);
IkReal x745=x86;
IkReal x746=x87;
IkReal x747=x88;
IkReal x748=(sj13*x746);
IkReal x749=(((r02*sj13))+((cj13*x745)));
IkReal x750=(((r12*sj13))+((cj13*x746)));
IkReal x751=((((-1.0)*cj13*r22))+((sj13*x747)));
IkReal x752=(((cj13*x747))+((r22*sj13)));
IkReal x753=((((-1.0)*cj13*r02))+((sj13*x745)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*x753))+(((-1.0)*x742*x749)));
new_r01=(((cj12*x753))+((sj12*x749)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x741)));
new_r10=((((-1.0)*x742*x750))+((sj12*(((((-1.0)*x744))+x748)))));
new_r11=(((sj12*x750))+((cj12*(((((-1.0)*x744))+x748)))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x741)));
new_r20=((((-1.0)*x742*x752))+((sj12*x751)));
new_r21=(((sj12*x752))+((cj12*x751)));
new_r22=((((-1.0)*r20*x741))+((r21*sj14)));
IkReal x754=(cj11*sj14);
IkReal x755=((1.0)*cj11*cj14);
j9eval[0]=((IKabs((((r01*x754))+(((-1.0)*r00*x755)))))+(IKabs(((((-1.0)*r10*x755))+((r11*x754))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x756=((1.0)*cj14);
IkReal x757=((1.0)*cj12);
IkReal x758=((1.0)*sj14);
IkReal x759=(cj13*r12);
IkReal x760=x86;
IkReal x761=x87;
IkReal x762=x88;
IkReal x763=(sj13*x761);
IkReal x764=(((r02*sj13))+((cj13*x760)));
IkReal x765=(((r12*sj13))+((cj13*x761)));
IkReal x766=(((sj13*x762))+(((-1.0)*cj13*r22)));
IkReal x767=(((r22*sj13))+((cj13*x762)));
IkReal x768=((((-1.0)*cj13*r02))+((sj13*x760)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x757*x764))+((sj12*x768)));
new_r01=(((sj12*x764))+((cj12*x768)));
new_r02=((((-1.0)*r00*x756))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x759))+x763))))+(((-1.0)*x757*x765)));
new_r11=(((sj12*x765))+((cj12*(((((-1.0)*x759))+x763)))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x756)));
new_r20=((((-1.0)*x757*x767))+((sj12*x766)));
new_r21=(((sj12*x767))+((cj12*x766)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x756)));
IkReal x769=(cj11*sj14);
IkReal x770=((1.0)*cj11*cj14);
j9eval[0]=((IKabs(((((-1.0)*r10*x770))+((r11*x769)))))+(IKabs(((((-1.0)*r00*x770))+((r01*x769))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x771=IKcos(j9);
IkReal x772=IKsin(j9);
IkReal x773=((1.0)*x772);
evalcond[0]=(x771+new_r10);
evalcond[1]=((((-1.0)*x773))+new_r11);
evalcond[2]=(new_r01+(((-1.0)*x771)));
evalcond[3]=((((-1.0)*x773))+new_r00);
evalcond[4]=(((new_r12*x772))+((new_r02*x771)));
evalcond[5]=(((new_r00*x771))+((new_r10*x772)));
evalcond[6]=((((-1.0)*new_r02*x773))+((new_r12*x771)));
evalcond[7]=((((-1.0)*new_r01*x773))+((new_r11*x771)));
evalcond[8]=((-1.0)+((new_r11*x772))+((new_r01*x771)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x773))+((new_r10*x771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x774=IKsin(j9);
IkReal x775=IKcos(j9);
IkReal x776=((1.0)*x774);
evalcond[0]=(x774+new_r11);
evalcond[1]=(x775+new_r01);
evalcond[2]=(x774+new_r00);
evalcond[3]=(new_r10+(((-1.0)*x775)));
evalcond[4]=(((new_r12*x774))+((new_r02*x775)));
evalcond[5]=(((new_r00*x775))+((new_r10*x774)));
evalcond[6]=((((-1.0)*new_r02*x776))+((new_r12*x775)));
evalcond[7]=((((-1.0)*new_r01*x776))+((new_r11*x775)));
evalcond[8]=((1.0)+((new_r11*x774))+((new_r01*x775)));
evalcond[9]=((-1.0)+(((-1.0)*new_r00*x776))+((new_r10*x775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x777=IKcos(j9);
IkReal x778=IKsin(j9);
IkReal x779=((1.0)*x778);
evalcond[0]=(x777+new_r11);
evalcond[1]=(x778+new_r10);
evalcond[2]=(x777+new_r00);
evalcond[3]=((((-1.0)*x779))+new_r01);
evalcond[4]=(((new_r12*x778))+((new_r02*x777)));
evalcond[5]=(((new_r11*x778))+((new_r01*x777)));
evalcond[6]=((((-1.0)*new_r02*x779))+((new_r12*x777)));
evalcond[7]=((((-1.0)*new_r00*x779))+((new_r10*x777)));
evalcond[8]=((1.0)+((new_r00*x777))+((new_r10*x778)));
evalcond[9]=((1.0)+(((-1.0)*new_r01*x779))+((new_r11*x777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x780=IKsin(j9);
IkReal x781=IKcos(j9);
IkReal x782=((1.0)*x781);
IkReal x783=((1.0)*x780);
evalcond[0]=(x780+new_r01);
evalcond[1]=((((-1.0)*x782))+new_r11);
evalcond[2]=((((-1.0)*x783))+new_r10);
evalcond[3]=((((-1.0)*x782))+new_r00);
evalcond[4]=(((new_r12*x780))+((new_r02*x781)));
evalcond[5]=(((new_r11*x780))+((new_r01*x781)));
evalcond[6]=(((new_r12*x781))+(((-1.0)*new_r02*x783)));
evalcond[7]=(((new_r10*x781))+(((-1.0)*new_r00*x783)));
evalcond[8]=((-1.0)+((new_r10*x780))+((new_r00*x781)));
evalcond[9]=((-1.0)+(((-1.0)*new_r01*x783))+((new_r11*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*new_r11);
evalcond[3]=new_r01;
evalcond[4]=new_r20;
evalcond[5]=0;
evalcond[6]=sj11;
evalcond[7]=((-1.0)*sj11);
evalcond[8]=cj11;
evalcond[9]=cj11;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(new_r01),new_r11,IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
IkReal x784=x785.value;
j9array[0]=((-1.0)*x784);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x784)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j9))))+(((-1.0)*new_r11*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r00)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x786=((1.0)*cj14);
IkReal x787=((1.0)*cj12);
IkReal x788=((1.0)*sj14);
IkReal x789=(cj13*r12);
IkReal x790=x86;
IkReal x791=x87;
IkReal x792=x88;
IkReal x793=(sj13*x791);
IkReal x794=(((r02*sj13))+((cj13*x790)));
IkReal x795=(((r12*sj13))+((cj13*x791)));
IkReal x796=(((sj13*x792))+(((-1.0)*cj13*r22)));
IkReal x797=(((r22*sj13))+((cj13*x792)));
IkReal x798=(((sj13*x790))+(((-1.0)*cj13*r02)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x787*x794))+((sj12*x798)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x786)));
new_r01=(((sj12*x794))+((cj12*x798)));
new_r02=((((-1.0)*r00*x786))+((r01*sj14)));
new_r10=(((sj12*((x793+(((-1.0)*x789))))))+(((-1.0)*x787*x795)));
new_r11=(((cj12*((x793+(((-1.0)*x789))))))+((sj12*x795)));
new_r20=((((-1.0)*x787*x797))+((sj12*x796)));
new_r21=(((sj12*x797))+((cj12*x796)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x786)));
j9eval[0]=((IKabs(sj11))+(IKabs(cj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x799=((1.0)*cj14);
IkReal x800=((1.0)*cj12);
IkReal x801=((1.0)*sj14);
IkReal x802=(cj13*r12);
IkReal x803=x86;
IkReal x804=x87;
IkReal x805=x88;
IkReal x806=(sj13*x804);
IkReal x807=(((r02*sj13))+((cj13*x803)));
IkReal x808=(((cj13*x804))+((r12*sj13)));
IkReal x809=((((-1.0)*cj13*r22))+((sj13*x805)));
IkReal x810=(((cj13*x805))+((r22*sj13)));
IkReal x811=((((-1.0)*cj13*r02))+((sj13*x803)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*x811))+(((-1.0)*x800*x807)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x799)));
new_r01=(((cj12*x811))+((sj12*x807)));
new_r02=((((-1.0)*r00*x799))+((r01*sj14)));
new_r10=(((sj12*(((((-1.0)*x802))+x806))))+(((-1.0)*x800*x808)));
new_r11=(((cj12*(((((-1.0)*x802))+x806))))+((sj12*x808)));
new_r20=(((sj12*x809))+(((-1.0)*x800*x810)));
new_r21=(((cj12*x809))+((sj12*x810)));
new_r22=((((-1.0)*r20*x799))+((r21*sj14)));
j9eval[0]=sj11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x812=((1.0)*cj14);
IkReal x813=((1.0)*cj12);
IkReal x814=((1.0)*sj14);
IkReal x815=(cj13*r12);
IkReal x816=x86;
IkReal x817=x87;
IkReal x818=x88;
IkReal x819=(sj13*x817);
IkReal x820=(((r02*sj13))+((cj13*x816)));
IkReal x821=(((r12*sj13))+((cj13*x817)));
IkReal x822=(((sj13*x818))+(((-1.0)*cj13*r22)));
IkReal x823=(((cj13*x818))+((r22*sj13)));
IkReal x824=(((sj13*x816))+(((-1.0)*cj13*r02)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*x824))+(((-1.0)*x813*x820)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x812)));
new_r01=(((sj12*x820))+((cj12*x824)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x812)));
new_r10=(((sj12*(((((-1.0)*x815))+x819))))+(((-1.0)*x813*x821)));
new_r11=(((cj12*(((((-1.0)*x815))+x819))))+((sj12*x821)));
new_r20=(((sj12*x822))+(((-1.0)*x813*x823)));
new_r21=(((sj12*x823))+((cj12*x822)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x812)));
j9eval[0]=cj11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x825=IKcos(j9);
IkReal x826=IKsin(j9);
IkReal x827=((1.0)*x826);
IkReal x828=((-1.0)*x826);
evalcond[0]=(new_r02*x825);
evalcond[1]=(new_r10*x826);
evalcond[2]=(new_r10+x825);
evalcond[3]=x828;
evalcond[4]=(new_r02*x828);
evalcond[5]=((1.0)+((new_r10*x825)));
evalcond[6]=((((-1.0)*x827))+new_r11);
evalcond[7]=((((-1.0)*x825))+new_r01);
evalcond[8]=(((new_r11*x825))+(((-1.0)*new_r01*x827)));
evalcond[9]=((-1.0)+((new_r01*x825))+((new_r11*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x829=IKsin(j9);
IkReal x830=IKcos(j9);
evalcond[0]=x829;
evalcond[1]=(new_r02*x830);
evalcond[2]=(new_r11+x829);
evalcond[3]=(new_r10*x829);
evalcond[4]=(new_r01+x830);
evalcond[5]=((-1.0)*new_r02*x829);
evalcond[6]=((-1.0)+((new_r10*x830)));
evalcond[7]=((((-1.0)*x830))+new_r10);
evalcond[8]=((((-1.0)*new_r01*x829))+((new_r11*x830)));
evalcond[9]=((1.0)+((new_r01*x830))+((new_r11*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x831=IKcos(j9);
IkReal x832=IKsin(j9);
IkReal x833=((1.0)*x832);
evalcond[0]=x831;
evalcond[1]=(new_r02*x831);
evalcond[2]=(new_r10*x831);
evalcond[3]=(new_r11+x831);
evalcond[4]=(new_r10+x832);
evalcond[5]=((-1.0)*new_r02*x832);
evalcond[6]=((1.0)+((new_r10*x832)));
evalcond[7]=((((-1.0)*x833))+new_r01);
evalcond[8]=(((new_r11*x832))+((new_r01*x831)));
evalcond[9]=((1.0)+((new_r11*x831))+(((-1.0)*new_r01*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x834=IKcos(j9);
IkReal x835=IKsin(j9);
IkReal x836=((1.0)*x835);
evalcond[0]=(new_r02*x834);
evalcond[1]=(new_r10*x834);
evalcond[2]=(new_r01+x835);
evalcond[3]=((-1.0)*x834);
evalcond[4]=((-1.0)*new_r02*x835);
evalcond[5]=((((-1.0)*x834))+new_r11);
evalcond[6]=((-1.0)+((new_r10*x835)));
evalcond[7]=((((-1.0)*x836))+new_r10);
evalcond[8]=(((new_r11*x835))+((new_r01*x834)));
evalcond[9]=((-1.0)+((new_r11*x834))+(((-1.0)*new_r01*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x838=IKPowWithIntegerCheck(new_r10,-1);
if(!x838.valid){
continue;
}
IkReal x837=x838.value;
CheckValue<IkReal> x839=IKPowWithIntegerCheck(cj11,-1);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840=IKPowWithIntegerCheck(x837,-2);
if(!x840.valid){
continue;
}
if( IKabs((x837*(x839.value)*(((1.0)+(((-1.0)*(x840.value)))+(((-1.0)*(cj11*cj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj11*x837)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x837*(x839.value)*(((1.0)+(((-1.0)*(x840.value)))+(((-1.0)*(cj11*cj11)))))))+IKsqr(((-1.0)*sj11*x837))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x837*(x839.value)*(((1.0)+(((-1.0)*(x840.value)))+(((-1.0)*(cj11*cj11)))))), ((-1.0)*sj11*x837));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x841=IKcos(j9);
IkReal x842=IKsin(j9);
IkReal x843=((1.0)*sj11);
IkReal x844=(cj11*x841);
IkReal x845=((1.0)*x842);
IkReal x846=(x842*x843);
evalcond[0]=(new_r02*x841);
evalcond[1]=((-1.0)*new_r02*x842);
evalcond[2]=(((new_r10*x841))+sj11);
evalcond[3]=(((new_r10*x842))+cj11);
evalcond[4]=(((cj11*x842))+new_r10+((sj11*x841)));
evalcond[5]=((((-1.0)*x846))+x844);
evalcond[6]=(cj11+(((-1.0)*new_r01*x845))+((new_r11*x841)));
evalcond[7]=((((-1.0)*x846))+new_r11+x844);
evalcond[8]=(((new_r01*x841))+(((-1.0)*x843))+((new_r11*x842)));
evalcond[9]=((((-1.0)*x841*x843))+new_r01+(((-1.0)*cj11*x845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x848=IKPowWithIntegerCheck(new_r10,-1);
if(!x848.valid){
continue;
}
IkReal x847=x848.value;
CheckValue<IkReal> x849=IKPowWithIntegerCheck(sj11,-1);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(x847,-2);
if(!x850.valid){
continue;
}
if( IKabs(((-1.0)*cj11*x847)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x847*(x849.value)*(((((-1.0)*(x850.value)))+(cj11*cj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj11*x847))+IKsqr((x847*(x849.value)*(((((-1.0)*(x850.value)))+(cj11*cj11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*cj11*x847), (x847*(x849.value)*(((((-1.0)*(x850.value)))+(cj11*cj11)))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x851=IKcos(j9);
IkReal x852=IKsin(j9);
IkReal x853=((1.0)*sj11);
IkReal x854=(cj11*x851);
IkReal x855=((1.0)*x852);
IkReal x856=(x852*x853);
evalcond[0]=(new_r02*x851);
evalcond[1]=((-1.0)*new_r02*x852);
evalcond[2]=(((new_r10*x851))+sj11);
evalcond[3]=(cj11+((new_r10*x852)));
evalcond[4]=(((sj11*x851))+((cj11*x852))+new_r10);
evalcond[5]=((((-1.0)*x856))+x854);
evalcond[6]=((((-1.0)*new_r01*x855))+((new_r11*x851))+cj11);
evalcond[7]=((((-1.0)*x856))+new_r11+x854);
evalcond[8]=((((-1.0)*x853))+((new_r11*x852))+((new_r01*x851)));
evalcond[9]=((((-1.0)*cj11*x855))+new_r01+(((-1.0)*x851*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x857=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858 = IKatan2WithCheck(IkReal(((-1.0)*cj11)),((-1.0)*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x858.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x857.value)))+(x858.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x859=IKcos(j9);
IkReal x860=IKsin(j9);
IkReal x861=((1.0)*sj11);
IkReal x862=(cj11*x859);
IkReal x863=((1.0)*x860);
IkReal x864=(x860*x861);
evalcond[0]=(new_r02*x859);
evalcond[1]=((-1.0)*new_r02*x860);
evalcond[2]=(((new_r10*x859))+sj11);
evalcond[3]=(cj11+((new_r10*x860)));
evalcond[4]=(((sj11*x859))+((cj11*x860))+new_r10);
evalcond[5]=((((-1.0)*x864))+x862);
evalcond[6]=((((-1.0)*new_r01*x863))+((new_r11*x859))+cj11);
evalcond[7]=((((-1.0)*x864))+new_r11+x862);
evalcond[8]=((((-1.0)*x861))+((new_r11*x860))+((new_r01*x859)));
evalcond[9]=((((-1.0)*cj11*x863))+(((-1.0)*x859*x861))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r02)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=0;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x865=((1.0)*cj14);
IkReal x866=((1.0)*cj12);
IkReal x867=((1.0)*sj14);
IkReal x868=(cj13*r12);
IkReal x869=x87;
IkReal x870=x86;
IkReal x871=x88;
IkReal x872=(sj13*x869);
IkReal x873=(((r02*sj13))+((cj13*x870)));
IkReal x874=(((r12*sj13))+((cj13*x869)));
IkReal x875=(((sj13*x871))+(((-1.0)*cj13*r22)));
IkReal x876=(((cj13*x871))+((r22*sj13)));
IkReal x877=(((sj13*x870))+(((-1.0)*cj13*r02)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r10=((((-1.0)*x866*x874))+((sj12*(((((-1.0)*x868))+x872)))));
new_r02=((((-1.0)*r00*x865))+((r01*sj14)));
new_r00=((((-1.0)*x866*x873))+((sj12*x877)));
new_r01=(((cj12*x877))+((sj12*x873)));
new_r11=(((cj12*(((((-1.0)*x868))+x872))))+((sj12*x874)));
new_r12=((((-1.0)*r10*x865))+((r11*sj14)));
new_r20=((((-1.0)*x866*x876))+((sj12*x875)));
new_r21=(((cj12*x875))+((sj12*x876)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x865)));
j9eval[0]=((IKabs(sj11))+(IKabs(cj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x879=IKPowWithIntegerCheck(new_r00,-1);
if(!x879.valid){
continue;
}
IkReal x878=x879.value;
CheckValue<IkReal> x880=IKPowWithIntegerCheck(new_r01,-1);
if(!x880.valid){
continue;
}
if( IKabs((x878*(x880.value)*(((((-1.0)*cj11*new_r11))+((cj11*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj11*x878)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x878*(x880.value)*(((((-1.0)*cj11*new_r11))+((cj11*new_r00))))))+IKsqr(((-1.0)*cj11*x878))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x878*(x880.value)*(((((-1.0)*cj11*new_r11))+((cj11*new_r00))))), ((-1.0)*cj11*x878));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x881=IKcos(j9);
IkReal x882=IKsin(j9);
IkReal x883=((1.0)*sj11);
IkReal x884=(cj11*x881);
IkReal x885=((1.0)*x882);
IkReal x886=(x882*x883);
evalcond[0]=(new_r12*x881);
evalcond[1]=(new_r12*x882);
evalcond[2]=(((new_r00*x881))+cj11);
evalcond[3]=(sj11+(((-1.0)*new_r00*x885)));
evalcond[4]=(((sj11*x881))+((cj11*x882)));
evalcond[5]=(((new_r11*x881))+(((-1.0)*new_r01*x885))+cj11);
evalcond[6]=((((-1.0)*x886))+new_r11+x884);
evalcond[7]=((((-1.0)*x886))+new_r00+x884);
evalcond[8]=(((new_r01*x881))+((new_r11*x882))+(((-1.0)*x883)));
evalcond[9]=((((-1.0)*cj11*x885))+(((-1.0)*x881*x883))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x887 = IKatan2WithCheck(IkReal(sj11),((-1.0)*cj11),IKFAST_ATAN2_MAGTHRESH);
if(!x887.valid){
continue;
}
CheckValue<IkReal> x888=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x888.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x887.value)+(((1.5707963267949)*(x888.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x889=IKcos(j9);
IkReal x890=IKsin(j9);
IkReal x891=((1.0)*sj11);
IkReal x892=(cj11*x889);
IkReal x893=((1.0)*x890);
IkReal x894=(x890*x891);
evalcond[0]=(new_r12*x889);
evalcond[1]=(new_r12*x890);
evalcond[2]=(((new_r00*x889))+cj11);
evalcond[3]=(sj11+(((-1.0)*new_r00*x893)));
evalcond[4]=(((sj11*x889))+((cj11*x890)));
evalcond[5]=(((new_r11*x889))+cj11+(((-1.0)*new_r01*x893)));
evalcond[6]=((((-1.0)*x894))+new_r11+x892);
evalcond[7]=((((-1.0)*x894))+new_r00+x892);
evalcond[8]=(((new_r11*x890))+((new_r01*x889))+(((-1.0)*x891)));
evalcond[9]=((((-1.0)*cj11*x893))+(((-1.0)*x889*x891))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[2];
IkReal x895=((1.0)*cj14);
IkReal x896=((1.0)*cj12);
IkReal x897=((1.0)*sj14);
IkReal x898=(cj13*r12);
IkReal x899=x88;
IkReal x900=x86;
IkReal x901=x87;
IkReal x902=(sj13*x901);
IkReal x903=(((sj13*x899))+(((-1.0)*cj13*r22)));
IkReal x904=(((cj13*x899))+((r22*sj13)));
IkReal x905=(((r02*sj13))+((cj13*x900)));
IkReal x906=(((cj13*x901))+((r12*sj13)));
IkReal x907=(((sj13*x900))+(((-1.0)*cj13*r02)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r02=(((r01*sj14))+(((-1.0)*r00*x895)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x895)));
new_r20=((((-1.0)*x896*x904))+((sj12*x903)));
new_r21=(((sj12*x904))+((cj12*x903)));
new_r01=(((sj12*x905))+((cj12*x907)));
new_r11=(((cj12*(((((-1.0)*x898))+x902))))+((sj12*x906)));
new_r00=((((-1.0)*x896*x905))+((sj12*x907)));
new_r10=((((-1.0)*x896*x906))+((sj12*(((((-1.0)*x898))+x902)))));
new_r22=(((r21*sj14))+(((-1.0)*r20*x895)));
j9eval[0]=1.0;
j9eval[1]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal(((new_r00*new_r00)+(((-1.0)*(cj11*cj11))))),((((-1.0)*cj11*sj11))+(((-1.0)*new_r00*new_r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
CheckValue<IkReal> x909=IKPowWithIntegerCheck(IKsign((((cj11*new_r10))+((new_r00*sj11)))),-1);
if(!x909.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x908.value)+(((1.5707963267949)*(x909.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x910=IKcos(j9);
IkReal x911=IKsin(j9);
IkReal x912=((1.0)*x911);
evalcond[0]=(((new_r10*x911))+cj11+((new_r00*x910)));
evalcond[1]=(((new_r10*x910))+sj11+(((-1.0)*new_r00*x912)));
evalcond[2]=((((-1.0)*sj11*x912))+((cj11*x910))+new_r00);
evalcond[3]=((((-1.0)*sj11*x910))+(((-1.0)*cj11*x912))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x913=((1.0)*new_r10);
CheckValue<IkReal> x914=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*x913))+((new_r00*sj11)))),((((-1.0)*sj11*x913))+(((-1.0)*cj11*new_r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x914.value)))+(x915.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x916=IKcos(j9);
IkReal x917=IKsin(j9);
IkReal x918=((1.0)*x917);
evalcond[0]=(((new_r10*x917))+cj11+((new_r00*x916)));
evalcond[1]=(((new_r10*x916))+sj11+(((-1.0)*new_r00*x918)));
evalcond[2]=((((-1.0)*sj11*x918))+((cj11*x916))+new_r00);
evalcond[3]=((((-1.0)*sj11*x916))+(((-1.0)*cj11*x918))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920 = IKatan2WithCheck(IkReal((cj11*new_r02)),((-1.0)*cj11*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x920.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x919.value)))+(x920.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x921=IKcos(j9);
IkReal x922=IKsin(j9);
IkReal x923=((1.0)*sj11);
IkReal x924=(cj11*x921);
IkReal x925=((1.0)*x922);
IkReal x926=(x922*x923);
evalcond[0]=(((new_r02*x921))+((new_r12*x922)));
evalcond[1]=((((-1.0)*new_r02*x925))+((new_r12*x921)));
evalcond[2]=(((new_r00*x921))+cj11+((new_r10*x922)));
evalcond[3]=(((sj11*x921))+new_r10+((cj11*x922)));
evalcond[4]=((((-1.0)*new_r00*x925))+sj11+((new_r10*x921)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x925))+((new_r11*x921)));
evalcond[6]=((((-1.0)*x926))+new_r11+x924);
evalcond[7]=((((-1.0)*x926))+new_r00+x924);
evalcond[8]=((((-1.0)*x923))+((new_r01*x921))+((new_r11*x922)));
evalcond[9]=((((-1.0)*cj11*x925))+(((-1.0)*x921*x923))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign((((new_r11*new_r12))+((new_r01*new_r02)))),-1);
if(!x927.valid){
continue;
}
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal((cj11*new_r02)),((-1.0)*cj11*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x927.value)))+(x928.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x929=IKcos(j9);
IkReal x930=IKsin(j9);
IkReal x931=((1.0)*sj11);
IkReal x932=(cj11*x929);
IkReal x933=((1.0)*x930);
IkReal x934=(x930*x931);
evalcond[0]=(((new_r02*x929))+((new_r12*x930)));
evalcond[1]=((((-1.0)*new_r02*x933))+((new_r12*x929)));
evalcond[2]=(((new_r00*x929))+cj11+((new_r10*x930)));
evalcond[3]=(((sj11*x929))+new_r10+((cj11*x930)));
evalcond[4]=((((-1.0)*new_r00*x933))+sj11+((new_r10*x929)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x933))+((new_r11*x929)));
evalcond[6]=(new_r11+x932+(((-1.0)*x934)));
evalcond[7]=(new_r00+x932+(((-1.0)*x934)));
evalcond[8]=(((new_r01*x929))+((new_r11*x930))+(((-1.0)*x931)));
evalcond[9]=((((-1.0)*cj11*x933))+(((-1.0)*x929*x931))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(IKsign((((new_r10*new_r12))+((new_r00*new_r02)))),-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936 = IKatan2WithCheck(IkReal((new_r02*sj11)),((-1.0)*new_r12*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x936.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x935.value)))+(x936.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x937=IKcos(j9);
IkReal x938=IKsin(j9);
IkReal x939=((1.0)*sj11);
IkReal x940=(cj11*x937);
IkReal x941=((1.0)*x938);
IkReal x942=(x938*x939);
evalcond[0]=(((new_r02*x937))+((new_r12*x938)));
evalcond[1]=(((new_r12*x937))+(((-1.0)*new_r02*x941)));
evalcond[2]=(((new_r00*x937))+cj11+((new_r10*x938)));
evalcond[3]=(((sj11*x937))+new_r10+((cj11*x938)));
evalcond[4]=(sj11+((new_r10*x937))+(((-1.0)*new_r00*x941)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x941))+((new_r11*x937)));
evalcond[6]=((((-1.0)*x942))+new_r11+x940);
evalcond[7]=((((-1.0)*x942))+new_r00+x940);
evalcond[8]=(((new_r01*x937))+((new_r11*x938))+(((-1.0)*x939)));
evalcond[9]=((((-1.0)*x937*x939))+new_r01+(((-1.0)*cj11*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x944=IKPowWithIntegerCheck(cj10,-1);
if(!x944.valid){
continue;
}
IkReal x943=x944.value;
CheckValue<IkReal> x945=IKPowWithIntegerCheck(new_r12,-1);
if(!x945.valid){
continue;
}
CheckValue<IkReal> x946=IKPowWithIntegerCheck(x943,-2);
if(!x946.valid){
continue;
}
if( IKabs((x943*(x945.value)*(((new_r02*new_r02)+(((-1.0)*(x946.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x943)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x943*(x945.value)*(((new_r02*new_r02)+(((-1.0)*(x946.value)))))))+IKsqr(((-1.0)*new_r02*x943))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x943*(x945.value)*(((new_r02*new_r02)+(((-1.0)*(x946.value)))))), ((-1.0)*new_r02*x943));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x947=IKcos(j9);
IkReal x948=IKsin(j9);
IkReal x949=((1.0)*sj10);
IkReal x950=(sj10*sj11);
IkReal x951=(new_r12*x948);
IkReal x952=(cj10*x947);
IkReal x953=(new_r10*x948);
IkReal x954=(new_r02*x947);
IkReal x955=(cj11*x947);
IkReal x956=(new_r01*x947);
IkReal x957=((1.0)*x948);
IkReal x958=(new_r11*x948);
IkReal x959=(new_r00*x947);
evalcond[0]=(new_r02+x952);
evalcond[1]=(new_r12+((cj10*x948)));
evalcond[2]=(((new_r12*x947))+(((-1.0)*new_r02*x957)));
evalcond[3]=(cj10+x954+x951);
evalcond[4]=((((-1.0)*new_r00*x957))+sj11+((new_r10*x947)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x957))+((new_r11*x947)));
evalcond[6]=(((x948*x950))+new_r11+x955);
evalcond[7]=(x958+x956+x950);
evalcond[8]=(((x947*x950))+new_r01+(((-1.0)*cj11*x957)));
evalcond[9]=((((-1.0)*cj11*x948*x949))+new_r10+((sj11*x947)));
evalcond[10]=((((-1.0)*cj11*x949))+x959+x953);
evalcond[11]=((((-1.0)*x949*x955))+new_r00+(((-1.0)*sj11*x957)));
evalcond[12]=(((new_r00*x952))+((cj10*x953))+((new_r20*sj10)));
evalcond[13]=(((new_r01*x952))+((cj10*x958))+((new_r21*sj10)));
evalcond[14]=((1.0)+((new_r02*x952))+((new_r22*sj10))+((cj10*x951)));
evalcond[15]=(((cj10*new_r22))+(((-1.0)*x949*x954))+(((-1.0)*x949*x951)));
evalcond[16]=(((cj10*new_r20))+cj11+(((-1.0)*x949*x959))+(((-1.0)*x949*x953)));
evalcond[17]=(((cj10*new_r21))+(((-1.0)*sj11))+(((-1.0)*x949*x956))+(((-1.0)*x949*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x960.value)))+(x961.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x962=IKcos(j9);
IkReal x963=IKsin(j9);
IkReal x964=((1.0)*sj10);
IkReal x965=(sj10*sj11);
IkReal x966=(new_r12*x963);
IkReal x967=(cj10*x962);
IkReal x968=(new_r10*x963);
IkReal x969=(new_r02*x962);
IkReal x970=(cj11*x962);
IkReal x971=(new_r01*x962);
IkReal x972=((1.0)*x963);
IkReal x973=(new_r11*x963);
IkReal x974=(new_r00*x962);
evalcond[0]=(new_r02+x967);
evalcond[1]=(((cj10*x963))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x972))+((new_r12*x962)));
evalcond[3]=(cj10+x966+x969);
evalcond[4]=(sj11+(((-1.0)*new_r00*x972))+((new_r10*x962)));
evalcond[5]=(((new_r11*x962))+(((-1.0)*new_r01*x972))+cj11);
evalcond[6]=(((x963*x965))+new_r11+x970);
evalcond[7]=(x971+x973+x965);
evalcond[8]=((((-1.0)*cj11*x972))+((x962*x965))+new_r01);
evalcond[9]=(((sj11*x962))+(((-1.0)*cj11*x963*x964))+new_r10);
evalcond[10]=((((-1.0)*cj11*x964))+x974+x968);
evalcond[11]=((((-1.0)*x964*x970))+(((-1.0)*sj11*x972))+new_r00);
evalcond[12]=(((new_r00*x967))+((cj10*x968))+((new_r20*sj10)));
evalcond[13]=(((new_r01*x967))+((cj10*x973))+((new_r21*sj10)));
evalcond[14]=((1.0)+((new_r02*x967))+((new_r22*sj10))+((cj10*x966)));
evalcond[15]=(((cj10*new_r22))+(((-1.0)*x964*x969))+(((-1.0)*x964*x966)));
evalcond[16]=(((cj10*new_r20))+(((-1.0)*x964*x968))+(((-1.0)*x964*x974))+cj11);
evalcond[17]=(((cj10*new_r21))+(((-1.0)*x964*x971))+(((-1.0)*x964*x973))+(((-1.0)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "8b172cd653aa1da28cab55796c816777"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
