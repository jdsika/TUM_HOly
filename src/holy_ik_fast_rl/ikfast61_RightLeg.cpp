/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-06-13 16:02:03.520748
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((0.03)*x1);
x13=((1.0)*x4);
x14=((1.0)*x7);
x15=((0.03)*x6);
x16=((0.03)*x5);
x17=((1.0)*x6);
x18=((1.0)*x5);
x19=((1.0)*x1);
x20=((0.08)*x1);
x21=((0.045)*x1);
x22=((1.0)*x8);
x23=((1.0)*x9);
x24=(x10*x5);
x25=((-1.0)*x5);
x26=(x10*x6);
x27=(x0*x2);
x28=(x0*x4);
x29=(x3*x4);
x30=((-1.0)*x6);
x31=(x10*x11);
x32=(x1*x2*x3);
x33=(x26*x4);
x34=(x19*x2*x3);
x35=((((-1.0)*x13*x27))+((x1*x3)));
x36=(x28+(((-1.0)*x34)));
x37=((((-1.0)*x0*x13))+x34);
x38=(((x19*x27))+((x13*x3)));
x39=((-1.0)*x38);
x40=((((-1.0)*x13*x2*x3))+(((-1.0)*x0*x19)));
x41=(x36*x5);
x42=(((x1*x10*x17))+(((-1.0)*x13*x24)));
x43=(x37*x6);
x44=(x38*x6);
x45=(x40*x6);
x46=(((x30*x37))+((x25*x40)));
x47=((((-1.0)*x14*x42))+((x22*((((x13*x26))+((x1*x10*x18)))))));
x48=(((x7*(((((-1.0)*x18*x35))+(((-1.0)*x17*x38))))))+((x8*((((x25*x39))+((x30*x35)))))));
x49=((((-1.0)*x14*x46))+((x22*((((x18*x36))+((x17*x40)))))));
eerot[0]=(((x11*x48))+((x0*x10*x9)));
eerot[1]=(((x8*((x44+((x35*x5))))))+((x7*(((((-1.0)*x18*x39))+(((-1.0)*x17*x35)))))));
eerot[2]=((((-1.0)*x0*x31))+((x48*x9)));
IkReal x50=((1.0)*x27);
eetrans[0]=((0.03)+(((-1.0)*x20*x50))+((x5*(((((-1.0)*x21*x50))+(((-0.045)*x29))))))+((x7*((((x16*x35))+((x15*x38))))))+((x8*((((x15*x35))+((x16*x39))))))+((x6*(((((-0.045)*x27*x4))+((x21*x3))))))+(((-0.08)*x29)));
eerot[3]=(((x11*x49))+(((-1.0)*x10*x23*x3)));
eerot[4]=(((x46*x8))+((x7*((x45+x41)))));
eerot[5]=(((x49*x9))+((x3*x31)));
IkReal x51=(x2*x3);
eetrans[1]=(((x6*((((x0*x21))+(((0.045)*x2*x29))))))+((x5*(((((-0.045)*x28))+((x21*x51))))))+((x7*(((((-1.0)*x15*x37))+(((-1.0)*x16*x40))))))+(((-0.08)*x28))+((x8*(((((-0.03)*x45))+(((-0.03)*x41))))))+((x20*x51)));
eerot[6]=(((x11*x47))+(((-1.0)*x2*x23)));
eerot[7]=(((x42*x8))+((x7*((((x1*x24))+x33)))));
eerot[8]=(((x11*x2))+((x47*x9)));
IkReal x52=((1.0)*x10);
IkReal x53=((1.0)*x24);
eetrans[2]=((-0.06)+(((-1.0)*x20*x52))+((x8*(((((-1.0)*x12*x53))+(((-1.0)*x15*x4*x52))))))+((x7*(((((-1.0)*x16*x4*x52))+((x12*x26))))))+(((-1.0)*x21*x53))+(((-0.045)*x33)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r02;
new_r02=((-1.0)*r01);
new_px=((-0.03)+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((-1.0)*py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.06)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(pz*pz)+(py*py));
npx=(((py*r10))+((pz*r20))+((px*r00)));
npy=(((px*r01))+((pz*r21))+((py*r11)));
npz=(((py*r12))+((pz*r22))+((px*r02)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x56)));
rxp0_1=((((-1.0)*r00*x55))+((px*r20)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x54)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x56)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=((((-1.0)*r22*x56))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x54)));
{
IkReal j14eval[1];
j14eval[0]=((IKabs(npx))+(IKabs(npy)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(((-1.0)*npx)),npy,IKFAST_ATAN2_MAGTHRESH);
if(!x58.valid){
continue;
}
IkReal x57=x58.value;
j14array[0]=((-1.0)*x57);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+(((-1.0)*x57)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=((-1.04513888888889)+(((8.33333333333333)*npx*sj14))+(((138.888888888889)*pp))+(((8.33333333333333)*cj14*npy)));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[3];
IkReal x59=((1250.0)*pp);
IkReal x60=((75.0)*npz);
j13eval[0]=((-1.17013888888889)+(((-1.0)*cj12)));
j13eval[1]=IKsign(((-7.8984375)+(((-6.75)*cj12))));
j13eval[2]=((IKabs(((6.556640625)+(((9.0)*(cj12*cj12)))+(((-703.125)*pp))+(((-1.0)*cj12*x59))+(((-1.0)*sj12*x60))+(((16.71875)*cj12)))))+(IKabs((((sj12*x59))+(((-9.0)*cj12*sj12))+(((-42.1875)*npz))+(((-11.65625)*sj12))+(((-1.0)*cj12*x60))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x61=(npx*sj14);
IkReal x62=(cj14*npy);
IkReal x63=((2.0)*cj12);
IkReal x64=((25.0)*npz);
IkReal x65=(npz*sj12);
IkReal x66=((59.2592592592593)*cj12);
j13eval[0]=((1.0)+(((59.2592592592593)*x65))+(((33.3333333333333)*x61))+((x61*x66))+(((33.3333333333333)*x62))+(((1.77777777777778)*cj12))+((x62*x66)));
j13eval[1]=IKsign(((0.03375)+(((2.0)*x65))+((x62*x63))+(((1.125)*x61))+(((0.06)*cj12))+(((1.125)*x62))+((x61*x63))));
j13eval[2]=((IKabs(((-0.050625)+(((-0.18)*cj12))+((npz*x64))+(((-0.16)*(cj12*cj12))))))+(IKabs((((x61*x64))+(((0.16)*cj12*sj12))+((x62*x64))+(((0.09)*sj12))+(((0.75)*npz))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
IkReal x67=((33.3333333333333)*sj12);
j13eval[0]=((((33.3333333333333)*cj12*npz))+(((-1.0)*sj12))+(((18.75)*npz))+(((-1.0)*npx*sj14*x67))+(((-1.0)*cj14*npy*x67)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x68=(cj14*npy);
IkReal x69=((2.0)*sj12);
IkReal x70=((25.0)*npz);
IkReal x71=(cj12*npz);
IkReal x72=(npx*sj14);
IkReal x73=((50.0)*sj12);
CheckValue<IkReal> x74=IKPowWithIntegerCheck(((((-1.0)*x68*x73))+(((50.0)*x71))+(((-1.0)*x72*x73))+(((-1.5)*sj12))+(((28.125)*npz))),-1);
if(!x74.valid){
continue;
}
CheckValue<IkReal> x75=IKPowWithIntegerCheck(((((2.0)*x71))+(((-1.0)*x69*x72))+(((-1.0)*x68*x69))+(((-0.06)*sj12))+(((1.125)*npz))),-1);
if(!x75.valid){
continue;
}
if( IKabs(((x74.value)*(((-4.0)+(((4.0)*(cj12*cj12)))+(((625.0)*(npz*npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x75.value)*(((((-1.0)*x70*x72))+(((0.16)*cj12*sj12))+(((-0.75)*npz))+(((0.09)*sj12))+(((-1.0)*x68*x70)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x74.value)*(((-4.0)+(((4.0)*(cj12*cj12)))+(((625.0)*(npz*npz)))))))+IKsqr(((x75.value)*(((((-1.0)*x70*x72))+(((0.16)*cj12*sj12))+(((-0.75)*npz))+(((0.09)*sj12))+(((-1.0)*x68*x70))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x74.value)*(((-4.0)+(((4.0)*(cj12*cj12)))+(((625.0)*(npz*npz)))))), ((x75.value)*(((((-1.0)*x70*x72))+(((0.16)*cj12*sj12))+(((-0.75)*npz))+(((0.09)*sj12))+(((-1.0)*x68*x70))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x76=IKsin(j13);
IkReal x77=IKcos(j13);
IkReal x78=((0.08)*cj12);
IkReal x79=(cj14*npy);
IkReal x80=((0.08)*sj12);
IkReal x81=(npx*sj14);
IkReal x82=((1.0)*npz);
IkReal x83=(sj12*x76);
evalcond[0]=((((-1.0)*x82))+(((0.045)*x76))+((x76*x78))+((x77*x80)));
evalcond[1]=((-0.009325)+(((-0.0072)*cj12))+(((0.0048)*x83))+(((-0.0048)*cj12*x77))+(((-0.0027)*x77))+pp);
evalcond[2]=(((x76*x81))+((npz*x77))+((x76*x79))+(((0.03)*x76))+(((-1.0)*x80)));
evalcond[3]=((-0.03)+((x76*x80))+(((-1.0)*x77*x78))+(((-0.045)*x77))+(((-1.0)*x79))+(((-1.0)*x81)));
evalcond[4]=((0.045)+((x77*x81))+((x77*x79))+(((-1.0)*x76*x82))+x78+(((0.03)*x77)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x977=(cj14*npy);
IkReal x978=((2.0)*cj12);
IkReal x979=(npx*sj14);
IkReal x980=((25.0)*npz);
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal((((x977*x980))+((x979*x980))+(((0.16)*cj12*sj12))+(((0.09)*sj12))+(((0.75)*npz)))),((-0.050625)+(((-0.18)*cj12))+((npz*x980))+(((-0.16)*(cj12*cj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
CheckValue<IkReal> x982=IKPowWithIntegerCheck(IKsign(((0.03375)+((x977*x978))+(((1.125)*x977))+(((2.0)*npz*sj12))+(((1.125)*x979))+(((0.06)*cj12))+((x978*x979)))),-1);
if(!x982.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x981.value)+(((1.5707963267949)*(x982.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x983=IKsin(j13);
IkReal x984=IKcos(j13);
IkReal x985=((0.08)*cj12);
IkReal x986=(cj14*npy);
IkReal x987=((0.08)*sj12);
IkReal x988=(npx*sj14);
IkReal x989=((1.0)*npz);
IkReal x990=(sj12*x983);
evalcond[0]=((((0.045)*x983))+((x983*x985))+((x984*x987))+(((-1.0)*x989)));
evalcond[1]=((-0.009325)+(((-0.0072)*cj12))+(((-0.0027)*x984))+(((0.0048)*x990))+pp+(((-0.0048)*cj12*x984)));
evalcond[2]=(((x983*x986))+((x983*x988))+(((-1.0)*x987))+(((0.03)*x983))+((npz*x984)));
evalcond[3]=((-0.03)+(((-1.0)*x984*x985))+((x983*x987))+(((-1.0)*x988))+(((-0.045)*x984))+(((-1.0)*x986)));
evalcond[4]=((0.045)+x985+(((0.03)*x984))+((x984*x988))+(((-1.0)*x983*x989))+((x984*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x991=((1250.0)*pp);
IkReal x992=((75.0)*npz);
CheckValue<IkReal> x993 = IKatan2WithCheck(IkReal(((((-9.0)*cj12*sj12))+((sj12*x991))+(((-42.1875)*npz))+(((-1.0)*cj12*x992))+(((-11.65625)*sj12)))),((6.556640625)+(((-1.0)*sj12*x992))+(((9.0)*(cj12*cj12)))+(((-1.0)*cj12*x991))+(((-703.125)*pp))+(((16.71875)*cj12))),IKFAST_ATAN2_MAGTHRESH);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994=IKPowWithIntegerCheck(IKsign(((-7.8984375)+(((-6.75)*cj12)))),-1);
if(!x994.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x993.value)+(((1.5707963267949)*(x994.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x995=IKsin(j13);
IkReal x996=IKcos(j13);
IkReal x997=((0.08)*cj12);
IkReal x998=(cj14*npy);
IkReal x999=((0.08)*sj12);
IkReal x1000=(npx*sj14);
IkReal x1001=((1.0)*npz);
IkReal x1002=(sj12*x995);
evalcond[0]=((((0.045)*x995))+(((-1.0)*x1001))+((x996*x999))+((x995*x997)));
evalcond[1]=((-0.009325)+(((-0.0072)*cj12))+(((-0.0027)*x996))+(((-0.0048)*cj12*x996))+(((0.0048)*x1002))+pp);
evalcond[2]=(((x1000*x995))+(((-1.0)*x999))+((x995*x998))+((npz*x996))+(((0.03)*x995)));
evalcond[3]=((-0.03)+(((-1.0)*x996*x997))+(((-1.0)*x998))+(((-0.045)*x996))+(((-1.0)*x1000))+((x995*x999)));
evalcond[4]=((0.045)+((x1000*x996))+(((0.03)*x996))+(((-1.0)*x1001*x995))+((x996*x998))+x997);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x84=((1.0)*cj14);
IkReal x85=((1.0)*sj14);
IkReal x86=((1.0)*cj13);
IkReal x87=((1.0)*cj12);
IkReal x88=((((-1.0)*r00*x85))+(((-1.0)*r01*x84)));
IkReal x89=((((-1.0)*r11*x84))+(((-1.0)*r10*x85)));
IkReal x90=((((-1.0)*r20*x85))+(((-1.0)*r21*x84)));
IkReal x91=(sj13*x88);
IkReal x92=(((r02*sj13))+((cj13*x88)));
IkReal x93=((((-1.0)*r12*x86))+((sj13*x89)));
IkReal x94=(((r12*sj13))+((cj13*x89)));
IkReal x95=((((-1.0)*r22*x86))+((sj13*x90)));
IkReal x96=(((cj13*x90))+((r22*sj13)));
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x91))))+(((-1.0)*x87*x92)));
new_r01=(((sj12*x92))+((cj12*(((((-1.0)*r02*x86))+x91)))));
new_r02=(((r01*sj14))+(((-1.0)*r00*x84)));
new_r10=((((-1.0)*x87*x94))+((sj12*x93)));
new_r11=(((sj12*x94))+((cj12*x93)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x84)));
new_r20=(((sj12*x95))+(((-1.0)*x87*x96)));
new_r21=(((cj12*x95))+((sj12*x96)));
new_r22=((((-1.0)*r20*x84))+((r21*sj14)));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
sj10array[0]=((-1.0)*new_r22);
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[2];
IkReal x97=((1.0)*cj14);
IkReal x98=((1.0)*sj14);
IkReal x99=((1.0)*cj13);
IkReal x100=((1.0)*cj12);
IkReal x101=x88;
IkReal x102=x89;
IkReal x103=x90;
IkReal x104=(sj13*x101);
IkReal x105=(((r02*sj13))+((cj13*x101)));
IkReal x106=(((sj13*x102))+(((-1.0)*r12*x99)));
IkReal x107=(((cj13*x102))+((r12*sj13)));
IkReal x108=((((-1.0)*r22*x99))+((sj13*x103)));
IkReal x109=(((cj13*x103))+((r22*sj13)));
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x104))))+(((-1.0)*x100*x105)));
new_r01=(((cj12*((x104+(((-1.0)*r02*x99))))))+((sj12*x105)));
new_r02=((((-1.0)*r00*x97))+((r01*sj14)));
new_r10=(((sj12*x106))+(((-1.0)*x100*x107)));
new_r11=(((cj12*x106))+((sj12*x107)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x97)));
new_r20=(((sj12*x108))+(((-1.0)*x100*x109)));
new_r21=(((cj12*x108))+((sj12*x109)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x97)));
j11eval[0]=cj10;
j11eval[1]=IKsign(cj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x110=((1.0)*cj14);
IkReal x111=((1.0)*sj14);
IkReal x112=((1.0)*cj13);
IkReal x113=((1.0)*cj12);
IkReal x114=x88;
IkReal x115=x89;
IkReal x116=x90;
IkReal x117=(sj13*x114);
IkReal x118=(((r02*sj13))+((cj13*x114)));
IkReal x119=(((sj13*x115))+(((-1.0)*r12*x112)));
IkReal x120=(((r12*sj13))+((cj13*x115)));
IkReal x121=(((sj13*x116))+(((-1.0)*r22*x112)));
IkReal x122=(((r22*sj13))+((cj13*x116)));
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x117))))+(((-1.0)*x113*x118)));
new_r01=(((cj12*(((((-1.0)*r02*x112))+x117))))+((sj12*x118)));
new_r02=((((-1.0)*r00*x110))+((r01*sj14)));
new_r10=((((-1.0)*x113*x120))+((sj12*x119)));
new_r11=(((sj12*x120))+((cj12*x119)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x110)));
new_r20=(((sj12*x121))+(((-1.0)*x113*x122)));
new_r21=(((cj12*x121))+((sj12*x122)));
new_r22=((((-1.0)*r20*x110))+((r21*sj14)));
IkReal x123=((1.0)*sj14);
j9eval[0]=cj10;
j9eval[1]=((IKabs((((cj14*r10))+(((-1.0)*r11*x123)))))+(IKabs(((((-1.0)*r01*x123))+((cj14*r00))))));
j9eval[2]=IKsign(cj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x124=((1.0)*cj14);
IkReal x125=((1.0)*sj14);
IkReal x126=((1.0)*cj13);
IkReal x127=((1.0)*cj12);
IkReal x128=x88;
IkReal x129=x89;
IkReal x130=x90;
IkReal x131=(sj13*x128);
IkReal x132=(((r02*sj13))+((cj13*x128)));
IkReal x133=(((sj13*x129))+(((-1.0)*r12*x126)));
IkReal x134=(((r12*sj13))+((cj13*x129)));
IkReal x135=((((-1.0)*r22*x126))+((sj13*x130)));
IkReal x136=(((cj13*x130))+((r22*sj13)));
new_r00=((((-1.0)*x127*x132))+((sj12*(((((-1.0)*cj13*r02))+x131)))));
new_r01=(((cj12*(((((-1.0)*r02*x126))+x131))))+((sj12*x132)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x124)));
new_r10=((((-1.0)*x127*x134))+((sj12*x133)));
new_r11=(((cj12*x133))+((sj12*x134)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x124)));
new_r20=((((-1.0)*x127*x136))+((sj12*x135)));
new_r21=(((sj12*x136))+((cj12*x135)));
new_r22=((((-1.0)*r20*x124))+((r21*sj14)));
j9eval[0]=cj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x137=((1.0)*cj14);
IkReal x138=((1.0)*sj14);
IkReal x139=((1.0)*cj13);
IkReal x140=((1.0)*cj12);
IkReal x141=x88;
IkReal x142=x89;
IkReal x143=x90;
IkReal x144=(sj13*x141);
IkReal x145=(((cj13*x141))+((r02*sj13)));
IkReal x146=((((-1.0)*r12*x139))+((sj13*x142)));
IkReal x147=(((r12*sj13))+((cj13*x142)));
IkReal x148=((((-1.0)*r22*x139))+((sj13*x143)));
IkReal x149=(((cj13*x143))+((r22*sj13)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x144))))+(((-1.0)*x140*x145)));
new_r01=(((cj12*(((((-1.0)*r02*x139))+x144))))+((sj12*x145)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x137)));
new_r10=(((sj12*x146))+(((-1.0)*x140*x147)));
new_r11=(((sj12*x147))+((cj12*x146)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x137)));
new_r20=(((sj12*x148))+(((-1.0)*x140*x149)));
new_r21=(((cj12*x148))+((sj12*x149)));
new_r22=((((-1.0)*r20*x137))+((r21*sj14)));
IkReal x150=((1.0)*cj14);
j9eval[0]=((IKabs((((r11*sj14))+(((-1.0)*r10*x150)))))+(IKabs(((((-1.0)*r00*x150))+((r01*sj14))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x151=((1.0)*cj14);
IkReal x152=((1.0)*sj14);
IkReal x153=((1.0)*cj13);
IkReal x154=((1.0)*cj12);
IkReal x155=x88;
IkReal x156=x89;
IkReal x157=x90;
IkReal x158=(sj13*x155);
IkReal x159=(((r02*sj13))+((cj13*x155)));
IkReal x160=((((-1.0)*r12*x153))+((sj13*x156)));
IkReal x161=(((r12*sj13))+((cj13*x156)));
IkReal x162=((((-1.0)*r22*x153))+((sj13*x157)));
IkReal x163=(((cj13*x157))+((r22*sj13)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x154*x159))+((sj12*((x158+(((-1.0)*cj13*r02)))))));
new_r01=(((sj12*x159))+((cj12*((x158+(((-1.0)*r02*x153)))))));
new_r02=((((-1.0)*r00*x151))+((r01*sj14)));
new_r10=(((sj12*x160))+(((-1.0)*x154*x161)));
new_r11=(((sj12*x161))+((cj12*x160)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x151)));
new_r20=((((-1.0)*x154*x163))+((sj12*x162)));
new_r21=(((sj12*x163))+((cj12*x162)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x151)));
j9eval[0]=((IKabs((((cj14*r00))+(((-1.0)*r01*sj14)))))+(IKabs((((r11*sj14))+(((-1.0)*cj14*r10))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9, j11]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
IkReal x164=x165.value;
j9array[0]=((-1.0)*x164);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x164)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j9))))+((new_r12*(IKsin(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x166=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x166))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x166))+(((-1.0)*new_r11*sj9))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x166))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x166))+(((-1.0)*new_r11*sj9))), (((new_r01*sj9))+(((-1.0)*new_r11*x166))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x167=IKsin(j11);
IkReal x168=IKcos(j11);
IkReal x169=((1.0)*sj9);
IkReal x170=(cj9*x167);
IkReal x171=((1.0)*x168);
IkReal x172=(x168*x169);
evalcond[0]=(x167+((cj9*new_r01))+((new_r11*sj9)));
evalcond[1]=((((-1.0)*new_r00*x169))+x167+((cj9*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x169))+((cj9*new_r11))+x168);
evalcond[3]=(((sj9*x167))+((cj9*x168))+new_r11);
evalcond[4]=(((new_r10*sj9))+(((-1.0)*x171))+((cj9*new_r00)));
evalcond[5]=(x170+new_r01+(((-1.0)*x172)));
evalcond[6]=(x170+(((-1.0)*x172))+new_r10);
evalcond[7]=(new_r00+(((-1.0)*cj9*x171))+(((-1.0)*x167*x169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x174.valid){
continue;
}
IkReal x173=x174.value;
j9array[0]=((-1.0)*x173);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x173)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j9))))+((new_r12*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x175=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x175))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x175))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x175))), (((new_r01*sj9))+(((-1.0)*new_r11*x175))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x176=IKsin(j11);
IkReal x177=IKcos(j11);
IkReal x178=((1.0)*sj9);
IkReal x179=(cj9*x176);
IkReal x180=((1.0)*x177);
IkReal x181=(x177*x178);
evalcond[0]=(x176+((cj9*new_r01))+((new_r11*sj9)));
evalcond[1]=(x176+(((-1.0)*new_r00*x178))+((cj9*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x178))+x177+((cj9*new_r11)));
evalcond[3]=(((cj9*x177))+new_r11+((sj9*x176)));
evalcond[4]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x180)));
evalcond[5]=(x179+(((-1.0)*x181))+new_r01);
evalcond[6]=(x179+(((-1.0)*x181))+new_r10);
evalcond[7]=((((-1.0)*cj9*x180))+(((-1.0)*x176*x178))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x182=((1.0)*cj14);
IkReal x183=((1.0)*sj14);
IkReal x184=((1.0)*cj13);
IkReal x185=((1.0)*cj12);
IkReal x186=x88;
IkReal x187=x89;
IkReal x188=x90;
IkReal x189=(sj13*x186);
IkReal x190=(((r02*sj13))+((cj13*x186)));
IkReal x191=((((-1.0)*r12*x184))+((sj13*x187)));
IkReal x192=(((r12*sj13))+((cj13*x187)));
IkReal x193=(((sj13*x188))+(((-1.0)*r22*x184)));
IkReal x194=(((cj13*x188))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*((x189+(((-1.0)*cj13*r02))))))+(((-1.0)*x185*x190)));
new_r01=(((cj12*((x189+(((-1.0)*r02*x184))))))+((sj12*x190)));
new_r02=((((-1.0)*r00*x182))+((r01*sj14)));
new_r10=(((sj12*x191))+(((-1.0)*x185*x192)));
new_r11=(((cj12*x191))+((sj12*x192)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x182)));
new_r20=(((sj12*x193))+(((-1.0)*x185*x194)));
new_r21=(((cj12*x193))+((sj12*x194)));
new_r22=((((-1.0)*r20*x182))+((r21*sj14)));
IkReal x195=((1.0)*cj14);
j9eval[0]=((IKabs(((((-1.0)*r00*x195))+((r01*sj14)))))+(IKabs((((r11*sj14))+(((-1.0)*r10*x195))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x196=((1.0)*cj14);
IkReal x197=((1.0)*sj14);
IkReal x198=((1.0)*cj13);
IkReal x199=((1.0)*cj12);
IkReal x200=x88;
IkReal x201=x89;
IkReal x202=x90;
IkReal x203=(sj13*x200);
IkReal x204=(((cj13*x200))+((r02*sj13)));
IkReal x205=((((-1.0)*r12*x198))+((sj13*x201)));
IkReal x206=(((r12*sj13))+((cj13*x201)));
IkReal x207=((((-1.0)*r22*x198))+((sj13*x202)));
IkReal x208=(((r22*sj13))+((cj13*x202)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x199*x204))+((sj12*((x203+(((-1.0)*cj13*r02)))))));
new_r01=(((sj12*x204))+((cj12*((x203+(((-1.0)*r02*x198)))))));
new_r02=(((r01*sj14))+(((-1.0)*r00*x196)));
new_r10=((((-1.0)*x199*x206))+((sj12*x205)));
new_r11=(((cj12*x205))+((sj12*x206)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x196)));
new_r20=(((sj12*x207))+(((-1.0)*x199*x208)));
new_r21=(((sj12*x208))+((cj12*x207)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x196)));
j9eval[0]=((IKabs((((cj14*r00))+(((-1.0)*r01*sj14)))))+(IKabs((((r11*sj14))+(((-1.0)*cj14*r10))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9, j11]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
IkReal x209=x210.value;
j9array[0]=((-1.0)*x209);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x209)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j9))))+((new_r12*(IKsin(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x211=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj9*x211))+((new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x211))+((new_r11*sj9))))+IKsqr(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x211))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x211))+((new_r11*sj9))), ((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x211))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x212=IKcos(j11);
IkReal x213=IKsin(j11);
IkReal x214=((1.0)*sj9);
IkReal x215=(cj9*x212);
IkReal x216=((1.0)*x213);
IkReal x217=(x213*x214);
evalcond[0]=(((new_r10*sj9))+x212+((cj9*new_r00)));
evalcond[1]=(x213+(((-1.0)*new_r00*x214))+((cj9*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x214))+((cj9*new_r11))+x212);
evalcond[3]=(((cj9*new_r01))+(((-1.0)*x216))+((new_r11*sj9)));
evalcond[4]=(((cj9*x213))+((sj9*x212))+new_r10);
evalcond[5]=((((-1.0)*x217))+x215+new_r11);
evalcond[6]=((((-1.0)*x217))+x215+new_r00);
evalcond[7]=((((-1.0)*x212*x214))+(((-1.0)*cj9*x216))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
IkReal x218=x219.value;
j9array[0]=((-1.0)*x218);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x218)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j9))))+((new_r12*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x220=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj9*x220))+((new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x220))+((new_r11*sj9))))+IKsqr(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x220))+((new_r11*sj9))), ((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x220))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x221=IKcos(j11);
IkReal x222=IKsin(j11);
IkReal x223=((1.0)*sj9);
IkReal x224=(cj9*x221);
IkReal x225=((1.0)*x222);
IkReal x226=(x222*x223);
evalcond[0]=(((new_r10*sj9))+x221+((cj9*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x223))+x222+((cj9*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x223))+((cj9*new_r11))+x221);
evalcond[3]=((((-1.0)*x225))+((cj9*new_r01))+((new_r11*sj9)));
evalcond[4]=(((sj9*x221))+((cj9*x222))+new_r10);
evalcond[5]=(x224+(((-1.0)*x226))+new_r11);
evalcond[6]=(x224+new_r00+(((-1.0)*x226)));
evalcond[7]=((((-1.0)*x221*x223))+(((-1.0)*cj9*x225))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x228=IKPowWithIntegerCheck(cj10,-1);
if(!x228.valid){
continue;
}
IkReal x227=x228.value;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(new_r12,-1);
if(!x229.valid){
continue;
}
CheckValue<IkReal> x230=IKPowWithIntegerCheck(x227,-2);
if(!x230.valid){
continue;
}
if( IKabs((x227*(x229.value)*(((new_r02*new_r02)+(((-1.0)*(x230.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x227)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x227*(x229.value)*(((new_r02*new_r02)+(((-1.0)*(x230.value)))))))+IKsqr(((-1.0)*new_r02*x227))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x227*(x229.value)*(((new_r02*new_r02)+(((-1.0)*(x230.value)))))), ((-1.0)*new_r02*x227));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x231=IKcos(j9);
IkReal x232=IKsin(j9);
IkReal x233=((1.0)*sj10);
IkReal x234=(cj10*x232);
IkReal x235=(new_r12*x232);
IkReal x236=(cj10*x231);
IkReal x237=(new_r02*x231);
evalcond[0]=(x236+new_r02);
evalcond[1]=(x234+new_r12);
evalcond[2]=(((new_r12*x231))+(((-1.0)*new_r02*x232)));
evalcond[3]=(x237+x235+cj10);
evalcond[4]=(((new_r20*sj10))+((new_r10*x234))+((new_r00*x236)));
evalcond[5]=(((new_r01*x236))+((new_r21*sj10))+((new_r11*x234)));
evalcond[6]=((1.0)+((new_r22*sj10))+((new_r02*x236))+((new_r12*x234)));
evalcond[7]=((((-1.0)*x233*x237))+((cj10*new_r22))+(((-1.0)*x233*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x238=((1.0)*cj14);
IkReal x239=((1.0)*sj14);
IkReal x240=((1.0)*cj13);
IkReal x241=((1.0)*cj12);
IkReal x242=x88;
IkReal x243=x89;
IkReal x244=x90;
IkReal x245=(sj13*x242);
IkReal x246=(((r02*sj13))+((cj13*x242)));
IkReal x247=((((-1.0)*r12*x240))+((sj13*x243)));
IkReal x248=(((r12*sj13))+((cj13*x243)));
IkReal x249=((((-1.0)*r22*x240))+((sj13*x244)));
IkReal x250=(((cj13*x244))+((r22*sj13)));
new_r00=((((-1.0)*x241*x246))+((sj12*((x245+(((-1.0)*cj13*r02)))))));
new_r01=(((cj12*(((((-1.0)*r02*x240))+x245))))+((sj12*x246)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x238)));
new_r10=((((-1.0)*x241*x248))+((sj12*x247)));
new_r11=(((sj12*x248))+((cj12*x247)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x238)));
new_r20=(((sj12*x249))+(((-1.0)*x241*x250)));
new_r21=(((cj12*x249))+((sj12*x250)));
new_r22=((((-1.0)*r20*x238))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=IKsign(cj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x251=((1.0)*cj14);
IkReal x252=((1.0)*sj14);
IkReal x253=((1.0)*cj13);
IkReal x254=((1.0)*cj12);
IkReal x255=x88;
IkReal x256=x89;
IkReal x257=x90;
IkReal x258=(sj13*x255);
IkReal x259=(((r02*sj13))+((cj13*x255)));
IkReal x260=(((sj13*x256))+(((-1.0)*r12*x253)));
IkReal x261=(((r12*sj13))+((cj13*x256)));
IkReal x262=(((sj13*x257))+(((-1.0)*r22*x253)));
IkReal x263=(((r22*sj13))+((cj13*x257)));
new_r00=(((sj12*((x258+(((-1.0)*cj13*r02))))))+(((-1.0)*x254*x259)));
new_r01=(((sj12*x259))+((cj12*(((((-1.0)*r02*x253))+x258)))));
new_r02=((((-1.0)*r00*x251))+((r01*sj14)));
new_r10=((((-1.0)*x254*x261))+((sj12*x260)));
new_r11=(((sj12*x261))+((cj12*x260)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x251)));
new_r20=((((-1.0)*x254*x263))+((sj12*x262)));
new_r21=(((sj12*x263))+((cj12*x262)));
new_r22=((((-1.0)*r20*x251))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x264=((1.0)*cj14);
IkReal x265=((1.0)*sj14);
IkReal x266=((1.0)*cj13);
IkReal x267=((1.0)*cj12);
IkReal x268=x88;
IkReal x269=x89;
IkReal x270=x90;
IkReal x271=(sj13*x268);
IkReal x272=(((r02*sj13))+((cj13*x268)));
IkReal x273=(((sj13*x269))+(((-1.0)*r12*x266)));
IkReal x274=(((r12*sj13))+((cj13*x269)));
IkReal x275=(((sj13*x270))+(((-1.0)*r22*x266)));
IkReal x276=(((cj13*x270))+((r22*sj13)));
new_r00=(((sj12*((x271+(((-1.0)*cj13*r02))))))+(((-1.0)*x267*x272)));
new_r01=(((sj12*x272))+((cj12*((x271+(((-1.0)*r02*x266)))))));
new_r02=(((r01*sj14))+(((-1.0)*r00*x264)));
new_r10=(((sj12*x273))+(((-1.0)*x267*x274)));
new_r11=(((cj12*x273))+((sj12*x274)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x264)));
new_r20=((((-1.0)*x267*x276))+((sj12*x275)));
new_r21=(((sj12*x276))+((cj12*x275)));
new_r22=((((-1.0)*r20*x264))+((r21*sj14)));
j11eval[0]=cj10;
j11eval[1]=sj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x277=(new_r12*sj9);
IkReal x278=(new_r02*sj9);
IkReal x279=(cj9*new_r12);
IkReal x280=(cj9*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=((((-1.0)*x278))+x279);
evalcond[7]=((((-1.0)*x279))+x278);
evalcond[8]=(x280+x277);
evalcond[9]=((((-1.0)*x280))+(((-1.0)*x277)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x281=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x281))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x281))+(((-1.0)*new_r11*sj9))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x281))+(((-1.0)*new_r11*sj9))), (((new_r01*sj9))+(((-1.0)*new_r11*x281))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x282=IKsin(j11);
IkReal x283=IKcos(j11);
IkReal x284=((1.0)*sj9);
IkReal x285=(cj9*x282);
IkReal x286=((1.0)*x283);
IkReal x287=(x283*x284);
evalcond[0]=(x282+((cj9*new_r01))+((new_r11*sj9)));
evalcond[1]=((((-1.0)*new_r00*x284))+x282+((cj9*new_r10)));
evalcond[2]=(x283+((cj9*new_r11))+(((-1.0)*new_r01*x284)));
evalcond[3]=(((sj9*x282))+((cj9*x283))+new_r11);
evalcond[4]=(((new_r10*sj9))+(((-1.0)*x286))+((cj9*new_r00)));
evalcond[5]=(x285+(((-1.0)*x287))+new_r01);
evalcond[6]=(x285+(((-1.0)*x287))+new_r10);
evalcond[7]=((((-1.0)*x282*x284))+new_r00+(((-1.0)*cj9*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x288=(new_r02*sj9);
IkReal x289=(cj9*new_r12);
IkReal x290=(((cj9*new_r02))+((new_r12*sj9)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=(x289+(((-1.0)*x288)));
evalcond[7]=(x288+(((-1.0)*x289)));
evalcond[8]=x290;
evalcond[9]=x290;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x291=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj9*x291))+((new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x291))+((new_r11*sj9))))+IKsqr(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x291))+((new_r11*sj9))), ((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x291))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x292=IKcos(j11);
IkReal x293=IKsin(j11);
IkReal x294=((1.0)*sj9);
IkReal x295=(cj9*x292);
IkReal x296=((1.0)*x293);
IkReal x297=(x293*x294);
evalcond[0]=(((new_r10*sj9))+x292+((cj9*new_r00)));
evalcond[1]=(x293+(((-1.0)*new_r00*x294))+((cj9*new_r10)));
evalcond[2]=(((cj9*new_r11))+x292+(((-1.0)*new_r01*x294)));
evalcond[3]=(((cj9*new_r01))+(((-1.0)*x296))+((new_r11*sj9)));
evalcond[4]=(((cj9*x293))+((sj9*x292))+new_r10);
evalcond[5]=(x295+(((-1.0)*x297))+new_r11);
evalcond[6]=(x295+(((-1.0)*x297))+new_r00);
evalcond[7]=((((-1.0)*x292*x294))+new_r01+(((-1.0)*cj9*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x298=(new_r02*sj9);
IkReal x299=(cj9*new_r12);
IkReal x300=(((new_r10*sj9))+((cj9*new_r00)));
IkReal x301=(((cj9*new_r01))+((new_r11*sj9)));
IkReal x302=((1.0)+((cj9*new_r02))+((new_r12*sj9)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj9+new_r02);
evalcond[3]=(sj9+new_r12);
evalcond[4]=((((-1.0)*x298))+x299);
evalcond[5]=(x298+(((-1.0)*x299)));
evalcond[6]=x302;
evalcond[7]=x301;
evalcond[8]=x300;
evalcond[9]=x300;
evalcond[10]=x301;
evalcond[11]=x302;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x303=IKcos(j11);
IkReal x304=IKsin(j11);
IkReal x305=((1.0)*new_r02);
evalcond[0]=(x303+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x304)));
evalcond[2]=(((new_r12*x303))+new_r01);
evalcond[3]=(((new_r12*x304))+new_r00);
evalcond[4]=((((-1.0)*x303*x305))+new_r11);
evalcond[5]=((((-1.0)*x304*x305))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x305))+((new_r00*new_r12))+x304);
evalcond[7]=(((new_r01*new_r12))+x303+(((-1.0)*new_r11*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x306=(new_r12*sj9);
IkReal x307=((1.0)*sj9);
IkReal x308=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x308))+new_r02);
evalcond[3]=((((-1.0)*x307))+new_r12);
evalcond[4]=((((-1.0)*new_r02*x307))+((cj9*new_r12)));
evalcond[5]=((((-1.0)*new_r12*x308))+((new_r02*sj9)));
evalcond[6]=((-1.0)+x306+((cj9*new_r02)));
evalcond[7]=(((cj9*new_r01))+((new_r11*sj9)));
evalcond[8]=(((new_r10*sj9))+((cj9*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x308))+(((-1.0)*new_r10*x307)));
evalcond[10]=((((-1.0)*new_r01*x308))+(((-1.0)*new_r11*x307)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x308))+(((-1.0)*x306)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x309=IKcos(j11);
IkReal x310=IKsin(j11);
IkReal x311=((1.0)*new_r12);
evalcond[0]=(new_r21+x310);
evalcond[1]=(new_r20+(((-1.0)*x309)));
evalcond[2]=(((new_r02*x309))+new_r11);
evalcond[3]=(((new_r02*x310))+new_r10);
evalcond[4]=((((-1.0)*x309*x311))+new_r01);
evalcond[5]=((((-1.0)*x310*x311))+new_r00);
evalcond[6]=(x310+(((-1.0)*new_r00*x311))+((new_r02*new_r10)));
evalcond[7]=(((new_r02*new_r11))+x309+(((-1.0)*new_r01*x311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x312=(new_r22+sj10);
IkReal x313=(cj10+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=x312;
evalcond[2]=x312;
evalcond[3]=x313;
evalcond[4]=new_r12;
evalcond[5]=x313;
evalcond[6]=(((new_r20*sj10))+((cj10*new_r00)));
evalcond[7]=(((new_r21*sj10))+((cj10*new_r01)));
evalcond[8]=((1.0)+((new_r22*sj10))+((cj10*new_r02)));
evalcond[9]=((((-1.0)*new_r02*sj10))+((cj10*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x314=IKsin(j11);
IkReal x315=IKcos(j11);
IkReal x316=((1.0)*new_r02);
IkReal x317=((1.0)*x314);
evalcond[0]=(x314+new_r10);
evalcond[1]=(x315+new_r11);
evalcond[2]=(new_r21+((new_r02*x314)));
evalcond[3]=(((new_r22*x315))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*x315*x316)));
evalcond[5]=(new_r01+(((-1.0)*new_r22*x317)));
evalcond[6]=((((-1.0)*new_r20*x316))+((new_r00*new_r22))+x315);
evalcond[7]=((((-1.0)*new_r21*x316))+(((-1.0)*x317))+((new_r01*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x318=(new_r22+sj10);
IkReal x319=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=x318;
evalcond[2]=x318;
evalcond[3]=((((-1.0)*x319))+new_r02);
evalcond[4]=new_r12;
evalcond[5]=(cj10+(((-1.0)*new_r02)));
evalcond[6]=(((new_r20*sj10))+(((-1.0)*new_r00*x319)));
evalcond[7]=(((new_r21*sj10))+(((-1.0)*new_r01*x319)));
evalcond[8]=((1.0)+((new_r22*sj10))+(((-1.0)*new_r02*x319)));
evalcond[9]=(((new_r02*sj10))+((cj10*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r10, new_r11);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x320=IKcos(j11);
IkReal x321=IKsin(j11);
IkReal x322=((1.0)*new_r22);
IkReal x323=((1.0)*x321);
evalcond[0]=(((new_r02*x320))+new_r20);
evalcond[1]=(x321+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*new_r11))+x320);
evalcond[3]=((((-1.0)*new_r02*x323))+new_r21);
evalcond[4]=(((new_r22*x320))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x321*x322))+(((-1.0)*new_r01)));
evalcond[6]=(((new_r02*new_r20))+x320+(((-1.0)*new_r00*x322)));
evalcond[7]=(((new_r02*new_r21))+(((-1.0)*new_r01*x322))+(((-1.0)*x323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x324=(new_r22+sj10);
IkReal x325=(cj10+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x324;
evalcond[2]=x324;
evalcond[3]=new_r02;
evalcond[4]=x325;
evalcond[5]=x325;
evalcond[6]=(((cj10*new_r10))+((new_r20*sj10)));
evalcond[7]=(((new_r21*sj10))+((cj10*new_r11)));
evalcond[8]=((1.0)+((new_r22*sj10))+((cj10*new_r12)));
evalcond[9]=((((-1.0)*new_r12*sj10))+((cj10*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r00, new_r01);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x326=IKsin(j11);
IkReal x327=IKcos(j11);
IkReal x328=((1.0)*new_r12);
IkReal x329=((1.0)*x326);
evalcond[0]=(new_r21+((new_r12*x326)));
evalcond[1]=((((-1.0)*new_r00))+x326);
evalcond[2]=(x327+(((-1.0)*new_r01)));
evalcond[3]=(((new_r22*x327))+new_r10);
evalcond[4]=(new_r20+(((-1.0)*x327*x328)));
evalcond[5]=(new_r11+(((-1.0)*new_r22*x329)));
evalcond[6]=((((-1.0)*new_r20*x328))+x327+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*x329))+((new_r11*new_r22))+(((-1.0)*new_r21*x328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x330=(new_r22+sj10);
IkReal x331=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x330;
evalcond[2]=x330;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*x331))+new_r12);
evalcond[5]=(cj10+(((-1.0)*new_r12)));
evalcond[6]=(((new_r20*sj10))+(((-1.0)*new_r10*x331)));
evalcond[7]=((((-1.0)*new_r11*x331))+((new_r21*sj10)));
evalcond[8]=((1.0)+((new_r22*sj10))+(((-1.0)*new_r12*x331)));
evalcond[9]=(((cj10*new_r22))+((new_r12*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x332=IKcos(j11);
IkReal x333=IKsin(j11);
IkReal x334=((1.0)*new_r22);
IkReal x335=((1.0)*x333);
evalcond[0]=(x333+new_r00);
evalcond[1]=(x332+new_r01);
evalcond[2]=(new_r20+((new_r12*x332)));
evalcond[3]=(new_r21+(((-1.0)*new_r12*x335)));
evalcond[4]=(((new_r22*x332))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x333*x334))+(((-1.0)*new_r11)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r10*x334))+x332);
evalcond[7]=((((-1.0)*new_r11*x334))+((new_r12*new_r21))+(((-1.0)*x335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x337=IKPowWithIntegerCheck(cj10,-1);
if(!x337.valid){
continue;
}
IkReal x336=x337.value;
CheckValue<IkReal> x338=IKPowWithIntegerCheck(sj10,-1);
if(!x338.valid){
continue;
}
CheckValue<IkReal> x339=IKPowWithIntegerCheck(sj9,-1);
if(!x339.valid){
continue;
}
if( IKabs((x336*(x338.value)*(x339.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x336)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x336*(x338.value)*(x339.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))))+IKsqr(((-1.0)*new_r20*x336))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x336*(x338.value)*(x339.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))), ((-1.0)*new_r20*x336));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x340=IKsin(j11);
IkReal x341=IKcos(j11);
IkReal x342=((1.0)*sj9);
IkReal x343=(cj9*new_r00);
IkReal x344=((1.0)*sj10);
IkReal x345=(cj9*new_r01);
IkReal x346=(sj10*x340);
IkReal x347=((1.0)*x340);
IkReal x348=(x341*x344);
evalcond[0]=(((cj10*x341))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*cj10*x347)));
evalcond[2]=((((-1.0)*new_r00*x342))+x340+((cj9*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x342))+((cj9*new_r11))+x341);
evalcond[4]=(x346+x345+((new_r11*sj9)));
evalcond[5]=(((cj9*x341))+new_r11+((sj9*x346)));
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x348))+x343);
evalcond[7]=((((-1.0)*x341*x342))+((cj9*x346))+new_r01);
evalcond[8]=((((-1.0)*sj10*x341*x342))+((cj9*x340))+new_r10);
evalcond[9]=((((-1.0)*cj9*x348))+(((-1.0)*x340*x342))+new_r00);
evalcond[10]=((((-1.0)*new_r10*sj10*x342))+(((-1.0)*x343*x344))+x341+((cj10*new_r20)));
evalcond[11]=((((-1.0)*x344*x345))+(((-1.0)*new_r11*sj10*x342))+((cj10*new_r21))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x350=IKPowWithIntegerCheck(cj10,-1);
if(!x350.valid){
continue;
}
IkReal x349=x350.value;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(cj9,-1);
if(!x351.valid){
continue;
}
if( IKabs((x349*(x351.value)*(((((-1.0)*new_r20*sj10*sj9))+(((-1.0)*cj10*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x349)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x349*(x351.value)*(((((-1.0)*new_r20*sj10*sj9))+(((-1.0)*cj10*new_r10))))))+IKsqr(((-1.0)*new_r20*x349))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x349*(x351.value)*(((((-1.0)*new_r20*sj10*sj9))+(((-1.0)*cj10*new_r10))))), ((-1.0)*new_r20*x349));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x352=IKsin(j11);
IkReal x353=IKcos(j11);
IkReal x354=((1.0)*sj9);
IkReal x355=(cj9*new_r00);
IkReal x356=((1.0)*sj10);
IkReal x357=(cj9*new_r01);
IkReal x358=(sj10*x352);
IkReal x359=((1.0)*x352);
IkReal x360=(x353*x356);
evalcond[0]=(((cj10*x353))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*cj10*x359)));
evalcond[2]=((((-1.0)*new_r00*x354))+x352+((cj9*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x354))+((cj9*new_r11))+x353);
evalcond[4]=(x357+x358+((new_r11*sj9)));
evalcond[5]=(((cj9*x353))+((sj9*x358))+new_r11);
evalcond[6]=(((new_r10*sj9))+x355+(((-1.0)*x360)));
evalcond[7]=(((cj9*x358))+new_r01+(((-1.0)*x353*x354)));
evalcond[8]=((((-1.0)*sj10*x353*x354))+((cj9*x352))+new_r10);
evalcond[9]=((((-1.0)*cj9*x360))+(((-1.0)*x352*x354))+new_r00);
evalcond[10]=((((-1.0)*new_r10*sj10*x354))+x353+((cj10*new_r20))+(((-1.0)*x355*x356)));
evalcond[11]=((((-1.0)*new_r11*sj10*x354))+((cj10*new_r21))+(((-1.0)*x359))+(((-1.0)*x356*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x361=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x361.valid){
continue;
}
CheckValue<IkReal> x362 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x362.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x361.value)))+(x362.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x363=IKsin(j11);
IkReal x364=IKcos(j11);
IkReal x365=((1.0)*sj9);
IkReal x366=(cj9*new_r00);
IkReal x367=((1.0)*sj10);
IkReal x368=(cj9*new_r01);
IkReal x369=(sj10*x363);
IkReal x370=((1.0)*x363);
IkReal x371=(x364*x367);
evalcond[0]=(((cj10*x364))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*cj10*x370)));
evalcond[2]=(x363+(((-1.0)*new_r00*x365))+((cj9*new_r10)));
evalcond[3]=(((cj9*new_r11))+x364+(((-1.0)*new_r01*x365)));
evalcond[4]=(x368+x369+((new_r11*sj9)));
evalcond[5]=(((cj9*x364))+new_r11+((sj9*x369)));
evalcond[6]=(((new_r10*sj9))+x366+(((-1.0)*x371)));
evalcond[7]=((((-1.0)*x364*x365))+new_r01+((cj9*x369)));
evalcond[8]=(((cj9*x363))+(((-1.0)*sj10*x364*x365))+new_r10);
evalcond[9]=(new_r00+(((-1.0)*cj9*x371))+(((-1.0)*x363*x365)));
evalcond[10]=((((-1.0)*x366*x367))+(((-1.0)*new_r10*sj10*x365))+x364+((cj10*new_r20)));
evalcond[11]=((((-1.0)*new_r11*sj10*x365))+(((-1.0)*x370))+((cj10*new_r21))+(((-1.0)*x367*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x373.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x372.value)))+(x373.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x374=IKcos(j9);
IkReal x375=IKsin(j9);
IkReal x376=((1.0)*sj10);
IkReal x377=(cj10*x375);
IkReal x378=(new_r12*x375);
IkReal x379=(cj10*x374);
IkReal x380=(new_r02*x374);
evalcond[0]=(x379+new_r02);
evalcond[1]=(x377+new_r12);
evalcond[2]=(((new_r12*x374))+(((-1.0)*new_r02*x375)));
evalcond[3]=(x380+x378+cj10);
evalcond[4]=(((new_r20*sj10))+((new_r00*x379))+((new_r10*x377)));
evalcond[5]=(((new_r21*sj10))+((new_r11*x377))+((new_r01*x379)));
evalcond[6]=((1.0)+((new_r22*sj10))+((new_r02*x379))+((new_r12*x377)));
evalcond[7]=((((-1.0)*x376*x378))+((cj10*new_r22))+(((-1.0)*x376*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x381=((1.0)*cj14);
IkReal x382=((1.0)*sj14);
IkReal x383=((1.0)*cj13);
IkReal x384=((1.0)*cj12);
IkReal x385=x88;
IkReal x386=x89;
IkReal x387=x90;
IkReal x388=(sj13*x385);
IkReal x389=(((cj13*x385))+((r02*sj13)));
IkReal x390=(((sj13*x386))+(((-1.0)*r12*x383)));
IkReal x391=(((r12*sj13))+((cj13*x386)));
IkReal x392=(((sj13*x387))+(((-1.0)*r22*x383)));
IkReal x393=(((cj13*x387))+((r22*sj13)));
new_r00=(((sj12*((x388+(((-1.0)*cj13*r02))))))+(((-1.0)*x384*x389)));
new_r01=(((cj12*(((((-1.0)*r02*x383))+x388))))+((sj12*x389)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x381)));
new_r10=(((sj12*x390))+(((-1.0)*x384*x391)));
new_r11=(((cj12*x390))+((sj12*x391)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x381)));
new_r20=(((sj12*x392))+(((-1.0)*x384*x393)));
new_r21=(((cj12*x392))+((sj12*x393)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x381)));
j11eval[0]=cj10;
j11eval[1]=IKsign(cj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x394=((1.0)*cj14);
IkReal x395=((1.0)*sj14);
IkReal x396=((1.0)*cj13);
IkReal x397=((1.0)*cj12);
IkReal x398=x88;
IkReal x399=x89;
IkReal x400=x90;
IkReal x401=(sj13*x398);
IkReal x402=(((r02*sj13))+((cj13*x398)));
IkReal x403=((((-1.0)*r12*x396))+((sj13*x399)));
IkReal x404=(((r12*sj13))+((cj13*x399)));
IkReal x405=((((-1.0)*r22*x396))+((sj13*x400)));
IkReal x406=(((r22*sj13))+((cj13*x400)));
new_r00=(((sj12*((x401+(((-1.0)*cj13*r02))))))+(((-1.0)*x397*x402)));
new_r01=(((cj12*((x401+(((-1.0)*r02*x396))))))+((sj12*x402)));
new_r02=((((-1.0)*r00*x394))+((r01*sj14)));
new_r10=((((-1.0)*x397*x404))+((sj12*x403)));
new_r11=(((sj12*x404))+((cj12*x403)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x394)));
new_r20=(((sj12*x405))+(((-1.0)*x397*x406)));
new_r21=(((cj12*x405))+((sj12*x406)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x394)));
j11eval[0]=cj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x407=((1.0)*cj14);
IkReal x408=((1.0)*sj14);
IkReal x409=((1.0)*cj13);
IkReal x410=((1.0)*cj12);
IkReal x411=x88;
IkReal x412=x89;
IkReal x413=x90;
IkReal x414=(sj13*x411);
IkReal x415=(((r02*sj13))+((cj13*x411)));
IkReal x416=(((sj13*x412))+(((-1.0)*r12*x409)));
IkReal x417=(((r12*sj13))+((cj13*x412)));
IkReal x418=((((-1.0)*r22*x409))+((sj13*x413)));
IkReal x419=(((cj13*x413))+((r22*sj13)));
new_r00=((((-1.0)*x410*x415))+((sj12*(((((-1.0)*cj13*r02))+x414)))));
new_r01=(((cj12*(((((-1.0)*r02*x409))+x414))))+((sj12*x415)));
new_r02=((((-1.0)*r00*x407))+((r01*sj14)));
new_r10=(((sj12*x416))+(((-1.0)*x410*x417)));
new_r11=(((cj12*x416))+((sj12*x417)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x407)));
new_r20=((((-1.0)*x410*x419))+((sj12*x418)));
new_r21=(((cj12*x418))+((sj12*x419)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x407)));
j11eval[0]=cj10;
j11eval[1]=sj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x420=(new_r12*sj9);
IkReal x421=(new_r02*sj9);
IkReal x422=(cj9*new_r12);
IkReal x423=(cj9*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=(x422+(((-1.0)*x421)));
evalcond[7]=(x421+(((-1.0)*x422)));
evalcond[8]=(x423+x420);
evalcond[9]=((((-1.0)*x423))+(((-1.0)*x420)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x424=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x424))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x424))+(((-1.0)*new_r11*sj9))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x424))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x424))+(((-1.0)*new_r11*sj9))), (((new_r01*sj9))+(((-1.0)*new_r11*x424))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x425=IKsin(j11);
IkReal x426=IKcos(j11);
IkReal x427=((1.0)*sj9);
IkReal x428=(cj9*x425);
IkReal x429=((1.0)*x426);
IkReal x430=(x426*x427);
evalcond[0]=(x425+((cj9*new_r01))+((new_r11*sj9)));
evalcond[1]=(x425+(((-1.0)*new_r00*x427))+((cj9*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x427))+x426+((cj9*new_r11)));
evalcond[3]=(((sj9*x425))+((cj9*x426))+new_r11);
evalcond[4]=(((new_r10*sj9))+(((-1.0)*x429))+((cj9*new_r00)));
evalcond[5]=(x428+new_r01+(((-1.0)*x430)));
evalcond[6]=(x428+(((-1.0)*x430))+new_r10);
evalcond[7]=((((-1.0)*cj9*x429))+(((-1.0)*x425*x427))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x431=(new_r02*sj9);
IkReal x432=(cj9*new_r12);
IkReal x433=(((cj9*new_r02))+((new_r12*sj9)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=((((-1.0)*x431))+x432);
evalcond[7]=(x431+(((-1.0)*x432)));
evalcond[8]=x433;
evalcond[9]=x433;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x434=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj9*x434))+((new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x434))+((new_r11*sj9))))+IKsqr(((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x434))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x434))+((new_r11*sj9))), ((((-1.0)*cj9*new_r11))+(((-1.0)*sj9*x434))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x435=IKcos(j11);
IkReal x436=IKsin(j11);
IkReal x437=((1.0)*sj9);
IkReal x438=(cj9*x435);
IkReal x439=((1.0)*x436);
IkReal x440=(x436*x437);
evalcond[0]=(((new_r10*sj9))+x435+((cj9*new_r00)));
evalcond[1]=(x436+(((-1.0)*new_r00*x437))+((cj9*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x437))+x435+((cj9*new_r11)));
evalcond[3]=(((cj9*new_r01))+((new_r11*sj9))+(((-1.0)*x439)));
evalcond[4]=(((sj9*x435))+((cj9*x436))+new_r10);
evalcond[5]=(x438+(((-1.0)*x440))+new_r11);
evalcond[6]=(x438+new_r00+(((-1.0)*x440)));
evalcond[7]=((((-1.0)*x435*x437))+(((-1.0)*cj9*x439))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x441=(new_r02*sj9);
IkReal x442=(cj9*new_r12);
IkReal x443=(((new_r10*sj9))+((cj9*new_r00)));
IkReal x444=(((cj9*new_r01))+((new_r11*sj9)));
IkReal x445=((1.0)+((cj9*new_r02))+((new_r12*sj9)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj9+new_r02);
evalcond[3]=(sj9+new_r12);
evalcond[4]=(x442+(((-1.0)*x441)));
evalcond[5]=(x441+(((-1.0)*x442)));
evalcond[6]=x445;
evalcond[7]=x444;
evalcond[8]=x443;
evalcond[9]=x443;
evalcond[10]=x444;
evalcond[11]=x445;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x446=IKcos(j11);
IkReal x447=IKsin(j11);
IkReal x448=((1.0)*new_r02);
evalcond[0]=(new_r20+x446);
evalcond[1]=(new_r21+(((-1.0)*x447)));
evalcond[2]=(((new_r12*x446))+new_r01);
evalcond[3]=(((new_r12*x447))+new_r00);
evalcond[4]=((((-1.0)*x446*x448))+new_r11);
evalcond[5]=((((-1.0)*x447*x448))+new_r10);
evalcond[6]=(((new_r00*new_r12))+x447+(((-1.0)*new_r10*x448)));
evalcond[7]=((((-1.0)*new_r11*x448))+((new_r01*new_r12))+x446);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x449=(new_r12*sj9);
IkReal x450=((1.0)*sj9);
IkReal x451=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x451))+new_r02);
evalcond[3]=((((-1.0)*x450))+new_r12);
evalcond[4]=((((-1.0)*new_r02*x450))+((cj9*new_r12)));
evalcond[5]=(((new_r02*sj9))+(((-1.0)*new_r12*x451)));
evalcond[6]=((-1.0)+x449+((cj9*new_r02)));
evalcond[7]=(((cj9*new_r01))+((new_r11*sj9)));
evalcond[8]=(((new_r10*sj9))+((cj9*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x451))+(((-1.0)*new_r10*x450)));
evalcond[10]=((((-1.0)*new_r11*x450))+(((-1.0)*new_r01*x451)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x451))+(((-1.0)*x449)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x452=IKcos(j11);
IkReal x453=IKsin(j11);
IkReal x454=((1.0)*new_r12);
evalcond[0]=(x453+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x452)));
evalcond[2]=(((new_r02*x452))+new_r11);
evalcond[3]=(((new_r02*x453))+new_r10);
evalcond[4]=((((-1.0)*x452*x454))+new_r01);
evalcond[5]=((((-1.0)*x453*x454))+new_r00);
evalcond[6]=(x453+(((-1.0)*new_r00*x454))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x454))+((new_r02*new_r11))+x452);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x455=(new_r22+sj10);
IkReal x456=(cj10+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=x455;
evalcond[2]=x455;
evalcond[3]=x456;
evalcond[4]=new_r12;
evalcond[5]=x456;
evalcond[6]=(((new_r20*sj10))+((cj10*new_r00)));
evalcond[7]=(((new_r21*sj10))+((cj10*new_r01)));
evalcond[8]=((1.0)+((new_r22*sj10))+((cj10*new_r02)));
evalcond[9]=((((-1.0)*new_r02*sj10))+((cj10*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x457=IKsin(j11);
IkReal x458=IKcos(j11);
IkReal x459=((1.0)*new_r02);
IkReal x460=((1.0)*x457);
evalcond[0]=(x457+new_r10);
evalcond[1]=(x458+new_r11);
evalcond[2]=(new_r21+((new_r02*x457)));
evalcond[3]=(((new_r22*x458))+new_r00);
evalcond[4]=((((-1.0)*x458*x459))+new_r20);
evalcond[5]=((((-1.0)*new_r22*x460))+new_r01);
evalcond[6]=(x458+((new_r00*new_r22))+(((-1.0)*new_r20*x459)));
evalcond[7]=((((-1.0)*new_r21*x459))+(((-1.0)*x460))+((new_r01*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x461=(new_r22+sj10);
IkReal x462=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=x461;
evalcond[2]=x461;
evalcond[3]=((((-1.0)*x462))+new_r02);
evalcond[4]=new_r12;
evalcond[5]=(cj10+(((-1.0)*new_r02)));
evalcond[6]=(((new_r20*sj10))+(((-1.0)*new_r00*x462)));
evalcond[7]=(((new_r21*sj10))+(((-1.0)*new_r01*x462)));
evalcond[8]=((1.0)+((new_r22*sj10))+(((-1.0)*new_r02*x462)));
evalcond[9]=(((new_r02*sj10))+((cj10*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r10, new_r11);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x463=IKcos(j11);
IkReal x464=IKsin(j11);
IkReal x465=((1.0)*new_r22);
IkReal x466=((1.0)*x464);
evalcond[0]=(new_r20+((new_r02*x463)));
evalcond[1]=(x464+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*new_r11))+x463);
evalcond[3]=((((-1.0)*new_r02*x466))+new_r21);
evalcond[4]=(((new_r22*x463))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x464*x465))+(((-1.0)*new_r01)));
evalcond[6]=(((new_r02*new_r20))+(((-1.0)*new_r00*x465))+x463);
evalcond[7]=((((-1.0)*new_r01*x465))+((new_r02*new_r21))+(((-1.0)*x466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x467=(new_r22+sj10);
IkReal x468=(cj10+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x467;
evalcond[2]=x467;
evalcond[3]=new_r02;
evalcond[4]=x468;
evalcond[5]=x468;
evalcond[6]=(((cj10*new_r10))+((new_r20*sj10)));
evalcond[7]=(((new_r21*sj10))+((cj10*new_r11)));
evalcond[8]=((1.0)+((new_r22*sj10))+((cj10*new_r12)));
evalcond[9]=((((-1.0)*new_r12*sj10))+((cj10*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r00, new_r01);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x469=IKsin(j11);
IkReal x470=IKcos(j11);
IkReal x471=((1.0)*new_r12);
IkReal x472=((1.0)*x469);
evalcond[0]=(((new_r12*x469))+new_r21);
evalcond[1]=((((-1.0)*new_r00))+x469);
evalcond[2]=(x470+(((-1.0)*new_r01)));
evalcond[3]=(((new_r22*x470))+new_r10);
evalcond[4]=(new_r20+(((-1.0)*x470*x471)));
evalcond[5]=((((-1.0)*new_r22*x472))+new_r11);
evalcond[6]=(x470+((new_r10*new_r22))+(((-1.0)*new_r20*x471)));
evalcond[7]=((((-1.0)*new_r21*x471))+((new_r11*new_r22))+(((-1.0)*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x473=(new_r22+sj10);
IkReal x474=((1.0)*cj10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=x473;
evalcond[2]=x473;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*x474))+new_r12);
evalcond[5]=(cj10+(((-1.0)*new_r12)));
evalcond[6]=(((new_r20*sj10))+(((-1.0)*new_r10*x474)));
evalcond[7]=((((-1.0)*new_r11*x474))+((new_r21*sj10)));
evalcond[8]=((1.0)+((new_r22*sj10))+(((-1.0)*new_r12*x474)));
evalcond[9]=(((cj10*new_r22))+((new_r12*sj10)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x475=IKcos(j11);
IkReal x476=IKsin(j11);
IkReal x477=((1.0)*new_r22);
IkReal x478=((1.0)*x476);
evalcond[0]=(x476+new_r00);
evalcond[1]=(x475+new_r01);
evalcond[2]=(new_r20+((new_r12*x475)));
evalcond[3]=(new_r21+(((-1.0)*new_r12*x478)));
evalcond[4]=(((new_r22*x475))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x476*x477))+(((-1.0)*new_r11)));
evalcond[6]=(x475+((new_r12*new_r20))+(((-1.0)*new_r10*x477)));
evalcond[7]=((((-1.0)*x478))+(((-1.0)*new_r11*x477))+((new_r12*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x480=IKPowWithIntegerCheck(cj10,-1);
if(!x480.valid){
continue;
}
IkReal x479=x480.value;
CheckValue<IkReal> x481=IKPowWithIntegerCheck(sj10,-1);
if(!x481.valid){
continue;
}
CheckValue<IkReal> x482=IKPowWithIntegerCheck(sj9,-1);
if(!x482.valid){
continue;
}
if( IKabs((x479*(x481.value)*(x482.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x479)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x479*(x481.value)*(x482.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))))+IKsqr(((-1.0)*new_r20*x479))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x479*(x481.value)*(x482.value)*((((cj9*new_r20))+(((-1.0)*cj10*new_r11))))), ((-1.0)*new_r20*x479));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x483=IKsin(j11);
IkReal x484=IKcos(j11);
IkReal x485=((1.0)*sj9);
IkReal x486=(cj9*new_r00);
IkReal x487=((1.0)*sj10);
IkReal x488=(cj9*new_r01);
IkReal x489=(sj10*x483);
IkReal x490=((1.0)*x483);
IkReal x491=(x484*x487);
evalcond[0]=(new_r20+((cj10*x484)));
evalcond[1]=((((-1.0)*cj10*x490))+new_r21);
evalcond[2]=((((-1.0)*new_r00*x485))+x483+((cj9*new_r10)));
evalcond[3]=(((cj9*new_r11))+(((-1.0)*new_r01*x485))+x484);
evalcond[4]=(x489+x488+((new_r11*sj9)));
evalcond[5]=(((sj9*x489))+((cj9*x484))+new_r11);
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x491))+x486);
evalcond[7]=(((cj9*x489))+new_r01+(((-1.0)*x484*x485)));
evalcond[8]=(((cj9*x483))+(((-1.0)*sj10*x484*x485))+new_r10);
evalcond[9]=((((-1.0)*cj9*x491))+new_r00+(((-1.0)*x483*x485)));
evalcond[10]=((((-1.0)*x486*x487))+(((-1.0)*new_r10*sj10*x485))+((cj10*new_r20))+x484);
evalcond[11]=((((-1.0)*x487*x488))+(((-1.0)*x490))+((cj10*new_r21))+(((-1.0)*new_r11*sj10*x485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x493=IKPowWithIntegerCheck(cj10,-1);
if(!x493.valid){
continue;
}
IkReal x492=x493.value;
CheckValue<IkReal> x494=IKPowWithIntegerCheck(cj9,-1);
if(!x494.valid){
continue;
}
if( IKabs((x492*(x494.value)*(((((-1.0)*new_r20*sj10*sj9))+(((-1.0)*cj10*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x492)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x492*(x494.value)*(((((-1.0)*new_r20*sj10*sj9))+(((-1.0)*cj10*new_r10))))))+IKsqr(((-1.0)*new_r20*x492))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x492*(x494.value)*(((((-1.0)*new_r20*sj10*sj9))+(((-1.0)*cj10*new_r10))))), ((-1.0)*new_r20*x492));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x495=IKsin(j11);
IkReal x496=IKcos(j11);
IkReal x497=((1.0)*sj9);
IkReal x498=(cj9*new_r00);
IkReal x499=((1.0)*sj10);
IkReal x500=(cj9*new_r01);
IkReal x501=(sj10*x495);
IkReal x502=((1.0)*x495);
IkReal x503=(x496*x499);
evalcond[0]=(new_r20+((cj10*x496)));
evalcond[1]=(new_r21+(((-1.0)*cj10*x502)));
evalcond[2]=(x495+(((-1.0)*new_r00*x497))+((cj9*new_r10)));
evalcond[3]=(((cj9*new_r11))+x496+(((-1.0)*new_r01*x497)));
evalcond[4]=(((new_r11*sj9))+x500+x501);
evalcond[5]=(((cj9*x496))+((sj9*x501))+new_r11);
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x503))+x498);
evalcond[7]=((((-1.0)*x496*x497))+new_r01+((cj9*x501)));
evalcond[8]=((((-1.0)*sj10*x496*x497))+((cj9*x495))+new_r10);
evalcond[9]=((((-1.0)*cj9*x503))+(((-1.0)*x495*x497))+new_r00);
evalcond[10]=(x496+((cj10*new_r20))+(((-1.0)*x498*x499))+(((-1.0)*new_r10*sj10*x497)));
evalcond[11]=((((-1.0)*x502))+((cj10*new_r21))+(((-1.0)*x499*x500))+(((-1.0)*new_r11*sj10*x497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x504=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x504.valid){
continue;
}
CheckValue<IkReal> x505 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x505.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x504.value)))+(x505.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x506=IKsin(j11);
IkReal x507=IKcos(j11);
IkReal x508=((1.0)*sj9);
IkReal x509=(cj9*new_r00);
IkReal x510=((1.0)*sj10);
IkReal x511=(cj9*new_r01);
IkReal x512=(sj10*x506);
IkReal x513=((1.0)*x506);
IkReal x514=(x507*x510);
evalcond[0]=(new_r20+((cj10*x507)));
evalcond[1]=(new_r21+(((-1.0)*cj10*x513)));
evalcond[2]=((((-1.0)*new_r00*x508))+x506+((cj9*new_r10)));
evalcond[3]=(((cj9*new_r11))+(((-1.0)*new_r01*x508))+x507);
evalcond[4]=(x512+x511+((new_r11*sj9)));
evalcond[5]=(((sj9*x512))+((cj9*x507))+new_r11);
evalcond[6]=(((new_r10*sj9))+(((-1.0)*x514))+x509);
evalcond[7]=((((-1.0)*x507*x508))+new_r01+((cj9*x512)));
evalcond[8]=((((-1.0)*sj10*x507*x508))+((cj9*x506))+new_r10);
evalcond[9]=((((-1.0)*cj9*x514))+new_r00+(((-1.0)*x506*x508)));
evalcond[10]=((((-1.0)*new_r10*sj10*x508))+(((-1.0)*x509*x510))+((cj10*new_r20))+x507);
evalcond[11]=((((-1.0)*x510*x511))+((cj10*new_r21))+(((-1.0)*x513))+(((-1.0)*new_r11*sj10*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x516.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x515.value)))+(x516.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
evalcond[0]=(((cj10*(IKcos(j11))))+new_r20);
evalcond[1]=((((-1.0)*cj10*(IKsin(j11))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
IkReal x517=((1.0)*cj14);
IkReal x518=((1.0)*sj14);
IkReal x519=((1.0)*cj13);
IkReal x520=((1.0)*cj12);
IkReal x521=x88;
IkReal x522=x89;
IkReal x523=x90;
IkReal x524=(sj13*x521);
IkReal x525=(((r02*sj13))+((cj13*x521)));
IkReal x526=((((-1.0)*r12*x519))+((sj13*x522)));
IkReal x527=(((r12*sj13))+((cj13*x522)));
IkReal x528=(((sj13*x523))+(((-1.0)*r22*x519)));
IkReal x529=(((cj13*x523))+((r22*sj13)));
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x524))))+(((-1.0)*x520*x525)));
new_r01=(((sj12*x525))+((cj12*(((((-1.0)*r02*x519))+x524)))));
new_r02=((((-1.0)*r00*x517))+((r01*sj14)));
new_r10=(((sj12*x526))+(((-1.0)*x520*x527)));
new_r11=(((sj12*x527))+((cj12*x526)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x517)));
new_r20=(((sj12*x528))+(((-1.0)*x520*x529)));
new_r21=(((sj12*x529))+((cj12*x528)));
new_r22=((((-1.0)*r20*x517))+((r21*sj14)));
IkReal x530=((1.0)*sj14);
j9eval[0]=cj10;
j9eval[1]=((IKabs(((((-1.0)*r01*x530))+((cj14*r00)))))+(IKabs((((cj14*r10))+(((-1.0)*r11*x530))))));
j9eval[2]=IKsign(cj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x531=((1.0)*cj14);
IkReal x532=((1.0)*sj14);
IkReal x533=((1.0)*cj13);
IkReal x534=((1.0)*cj12);
IkReal x535=x88;
IkReal x536=x89;
IkReal x537=x90;
IkReal x538=(sj13*x535);
IkReal x539=(((r02*sj13))+((cj13*x535)));
IkReal x540=(((sj13*x536))+(((-1.0)*r12*x533)));
IkReal x541=(((r12*sj13))+((cj13*x536)));
IkReal x542=((((-1.0)*r22*x533))+((sj13*x537)));
IkReal x543=(((cj13*x537))+((r22*sj13)));
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x538))))+(((-1.0)*x534*x539)));
new_r01=(((cj12*(((((-1.0)*r02*x533))+x538))))+((sj12*x539)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x531)));
new_r10=((((-1.0)*x534*x541))+((sj12*x540)));
new_r11=(((cj12*x540))+((sj12*x541)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x531)));
new_r20=((((-1.0)*x534*x543))+((sj12*x542)));
new_r21=(((cj12*x542))+((sj12*x543)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x531)));
j9eval[0]=cj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x544=((1.0)*cj14);
IkReal x545=((1.0)*sj14);
IkReal x546=((1.0)*cj13);
IkReal x547=((1.0)*cj12);
IkReal x548=x88;
IkReal x549=x89;
IkReal x550=x90;
IkReal x551=(sj13*x548);
IkReal x552=(((r02*sj13))+((cj13*x548)));
IkReal x553=((((-1.0)*r12*x546))+((sj13*x549)));
IkReal x554=(((r12*sj13))+((cj13*x549)));
IkReal x555=(((sj13*x550))+(((-1.0)*r22*x546)));
IkReal x556=(((cj13*x550))+((r22*sj13)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x551))))+(((-1.0)*x547*x552)));
new_r01=(((sj12*x552))+((cj12*(((((-1.0)*r02*x546))+x551)))));
new_r02=((((-1.0)*r00*x544))+((r01*sj14)));
new_r10=(((sj12*x553))+(((-1.0)*x547*x554)));
new_r11=(((cj12*x553))+((sj12*x554)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x544)));
new_r20=(((sj12*x555))+(((-1.0)*x547*x556)));
new_r21=(((sj12*x556))+((cj12*x555)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x544)));
IkReal x557=(sj11*sj14);
IkReal x558=((1.0)*cj14*sj11);
j9eval[0]=((IKabs((((r11*x557))+(((-1.0)*r10*x558)))))+(IKabs(((((-1.0)*r00*x558))+((r01*x557))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x559=((1.0)*cj14);
IkReal x560=((1.0)*sj14);
IkReal x561=((1.0)*cj13);
IkReal x562=((1.0)*cj12);
IkReal x563=x88;
IkReal x564=x89;
IkReal x565=x90;
IkReal x566=(sj13*x563);
IkReal x567=(((cj13*x563))+((r02*sj13)));
IkReal x568=((((-1.0)*r12*x561))+((sj13*x564)));
IkReal x569=(((r12*sj13))+((cj13*x564)));
IkReal x570=(((sj13*x565))+(((-1.0)*r22*x561)));
IkReal x571=(((cj13*x565))+((r22*sj13)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=(((sj12*((x566+(((-1.0)*cj13*r02))))))+(((-1.0)*x562*x567)));
new_r01=(((sj12*x567))+((cj12*((x566+(((-1.0)*r02*x561)))))));
new_r02=((((-1.0)*r00*x559))+((r01*sj14)));
new_r10=((((-1.0)*x562*x569))+((sj12*x568)));
new_r11=(((cj12*x568))+((sj12*x569)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x559)));
new_r20=(((sj12*x570))+(((-1.0)*x562*x571)));
new_r21=(((sj12*x571))+((cj12*x570)));
new_r22=((((-1.0)*r20*x559))+((r21*sj14)));
IkReal x572=(cj11*sj14);
IkReal x573=((1.0)*cj11*cj14);
j9eval[0]=((IKabs(((((-1.0)*r00*x573))+((r01*x572)))))+(IKabs((((r11*x572))+(((-1.0)*r10*x573))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x574=((1.0)*cj14);
IkReal x575=((1.0)*sj14);
IkReal x576=((1.0)*cj13);
IkReal x577=((1.0)*cj12);
IkReal x578=x88;
IkReal x579=x89;
IkReal x580=x90;
IkReal x581=(sj13*x578);
IkReal x582=(((r02*sj13))+((cj13*x578)));
IkReal x583=(((sj13*x579))+(((-1.0)*r12*x576)));
IkReal x584=(((r12*sj13))+((cj13*x579)));
IkReal x585=(((sj13*x580))+(((-1.0)*r22*x576)));
IkReal x586=(((r22*sj13))+((cj13*x580)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x577*x582))+((sj12*(((((-1.0)*cj13*r02))+x581)))));
new_r01=(((cj12*(((((-1.0)*r02*x576))+x581))))+((sj12*x582)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x574)));
new_r10=((((-1.0)*x577*x584))+((sj12*x583)));
new_r11=(((cj12*x583))+((sj12*x584)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x574)));
new_r20=(((sj12*x585))+(((-1.0)*x577*x586)));
new_r21=(((cj12*x585))+((sj12*x586)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x574)));
IkReal x587=(sj11*sj14);
IkReal x588=((1.0)*cj14*sj11);
j9eval[0]=((IKabs((((r01*x587))+(((-1.0)*r00*x588)))))+(IKabs(((((-1.0)*r10*x588))+((r11*x587))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x589=IKcos(j9);
IkReal x590=IKsin(j9);
IkReal x591=((1.0)*x590);
evalcond[0]=(x589+new_r11);
evalcond[1]=((((-1.0)*x591))+new_r01);
evalcond[2]=((((-1.0)*x591))+new_r10);
evalcond[3]=((((-1.0)*x589))+new_r00);
evalcond[4]=(((new_r02*x589))+((new_r12*x590)));
evalcond[5]=(((new_r01*x589))+((new_r11*x590)));
evalcond[6]=((((-1.0)*new_r02*x591))+((new_r12*x589)));
evalcond[7]=(((new_r10*x589))+(((-1.0)*new_r00*x591)));
evalcond[8]=((-1.0)+((new_r00*x589))+((new_r10*x590)));
evalcond[9]=((1.0)+((new_r11*x589))+(((-1.0)*new_r01*x591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x592=IKsin(j9);
IkReal x593=IKcos(j9);
IkReal x594=((1.0)*x592);
evalcond[0]=(new_r01+x592);
evalcond[1]=(x592+new_r10);
evalcond[2]=(new_r00+x593);
evalcond[3]=((((-1.0)*x593))+new_r11);
evalcond[4]=(((new_r02*x593))+((new_r12*x592)));
evalcond[5]=(((new_r11*x592))+((new_r01*x593)));
evalcond[6]=(((new_r12*x593))+(((-1.0)*new_r02*x594)));
evalcond[7]=((((-1.0)*new_r00*x594))+((new_r10*x593)));
evalcond[8]=((1.0)+((new_r10*x592))+((new_r00*x593)));
evalcond[9]=((-1.0)+((new_r11*x593))+(((-1.0)*new_r01*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x595=IKcos(j9);
IkReal x596=IKsin(j9);
IkReal x597=((1.0)*x596);
evalcond[0]=(x596+new_r11);
evalcond[1]=(new_r01+x595);
evalcond[2]=(x595+new_r10);
evalcond[3]=((((-1.0)*x597))+new_r00);
evalcond[4]=(((new_r12*x596))+((new_r02*x595)));
evalcond[5]=(((new_r00*x595))+((new_r10*x596)));
evalcond[6]=(((new_r12*x595))+(((-1.0)*new_r02*x597)));
evalcond[7]=((((-1.0)*new_r01*x597))+((new_r11*x595)));
evalcond[8]=((1.0)+((new_r01*x595))+((new_r11*x596)));
evalcond[9]=((1.0)+((new_r10*x595))+(((-1.0)*new_r00*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x598=IKsin(j9);
IkReal x599=IKcos(j9);
IkReal x600=((1.0)*x599);
IkReal x601=((1.0)*x598);
evalcond[0]=(new_r00+x598);
evalcond[1]=((((-1.0)*x601))+new_r11);
evalcond[2]=((((-1.0)*x600))+new_r01);
evalcond[3]=((((-1.0)*x600))+new_r10);
evalcond[4]=(((new_r12*x598))+((new_r02*x599)));
evalcond[5]=(((new_r10*x598))+((new_r00*x599)));
evalcond[6]=(((new_r12*x599))+(((-1.0)*new_r02*x601)));
evalcond[7]=(((new_r11*x599))+(((-1.0)*new_r01*x601)));
evalcond[8]=((-1.0)+((new_r01*x599))+((new_r11*x598)));
evalcond[9]=((-1.0)+(((-1.0)*new_r00*x601))+((new_r10*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*new_r11);
evalcond[3]=new_r01;
evalcond[4]=new_r20;
evalcond[5]=0;
evalcond[6]=sj11;
evalcond[7]=((-1.0)*sj11);
evalcond[8]=((-1.0)*cj11);
evalcond[9]=cj11;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(new_r01),new_r11,IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
IkReal x602=x603.value;
j9array[0]=((-1.0)*x602);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x602)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j9))))+(((-1.0)*new_r11*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r12)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x604=((1.0)*cj14);
IkReal x605=((1.0)*sj14);
IkReal x606=((1.0)*cj13);
IkReal x607=((1.0)*cj12);
IkReal x608=x88;
IkReal x609=x89;
IkReal x610=x90;
IkReal x611=(sj13*x608);
IkReal x612=(((r02*sj13))+((cj13*x608)));
IkReal x613=(((sj13*x609))+(((-1.0)*r12*x606)));
IkReal x614=(((r12*sj13))+((cj13*x609)));
IkReal x615=(((sj13*x610))+(((-1.0)*r22*x606)));
IkReal x616=(((r22*sj13))+((cj13*x610)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r00=((((-1.0)*x607*x612))+((sj12*(((((-1.0)*cj13*r02))+x611)))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x604)));
new_r01=(((cj12*(((((-1.0)*r02*x606))+x611))))+((sj12*x612)));
new_r02=((((-1.0)*r00*x604))+((r01*sj14)));
new_r10=((((-1.0)*x607*x614))+((sj12*x613)));
new_r11=(((sj12*x614))+((cj12*x613)));
new_r20=((((-1.0)*x607*x616))+((sj12*x615)));
new_r21=(((cj12*x615))+((sj12*x616)));
new_r22=((((-1.0)*r20*x604))+((r21*sj14)));
j9eval[0]=((IKabs(cj11))+(IKabs(sj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x618=IKPowWithIntegerCheck(new_r10,-1);
if(!x618.valid){
continue;
}
IkReal x617=x618.value;
CheckValue<IkReal> x619=IKPowWithIntegerCheck(new_r11,-1);
if(!x619.valid){
continue;
}
if( IKabs((x617*(x619.value)*((((new_r01*sj11))+(((-1.0)*new_r10*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj11*x617)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x617*(x619.value)*((((new_r01*sj11))+(((-1.0)*new_r10*sj11))))))+IKsqr(((-1.0)*sj11*x617))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x617*(x619.value)*((((new_r01*sj11))+(((-1.0)*new_r10*sj11))))), ((-1.0)*sj11*x617));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x620=IKcos(j9);
IkReal x621=IKsin(j9);
IkReal x622=(sj11*x620);
IkReal x623=((1.0)*x621);
IkReal x624=(cj11*x620);
IkReal x625=(cj11*x623);
evalcond[0]=(new_r02*x620);
evalcond[1]=((-1.0)*new_r02*x621);
evalcond[2]=(((new_r10*x620))+sj11);
evalcond[3]=(((new_r10*x621))+(((-1.0)*cj11)));
evalcond[4]=(((new_r01*x620))+sj11+((new_r11*x621)));
evalcond[5]=(((sj11*x621))+x624+new_r11);
evalcond[6]=((((-1.0)*new_r01*x623))+cj11+((new_r11*x620)));
evalcond[7]=((((-1.0)*x625))+new_r01+x622);
evalcond[8]=((((-1.0)*x625))+x622+new_r10);
evalcond[9]=((((-1.0)*sj11*x623))+(((-1.0)*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(cj11),((-1.0)*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x627.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x626.value)+(((1.5707963267949)*(x627.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x628=IKcos(j9);
IkReal x629=IKsin(j9);
IkReal x630=(sj11*x628);
IkReal x631=((1.0)*x629);
IkReal x632=(cj11*x628);
IkReal x633=(cj11*x631);
evalcond[0]=(new_r02*x628);
evalcond[1]=((-1.0)*new_r02*x629);
evalcond[2]=(sj11+((new_r10*x628)));
evalcond[3]=(((new_r10*x629))+(((-1.0)*cj11)));
evalcond[4]=(((new_r01*x628))+((new_r11*x629))+sj11);
evalcond[5]=(((sj11*x629))+x632+new_r11);
evalcond[6]=((((-1.0)*new_r01*x631))+((new_r11*x628))+cj11);
evalcond[7]=(x630+new_r01+(((-1.0)*x633)));
evalcond[8]=(x630+(((-1.0)*x633))+new_r10);
evalcond[9]=((((-1.0)*sj11*x631))+(((-1.0)*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r02)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=0;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x634=((1.0)*cj14);
IkReal x635=((1.0)*sj14);
IkReal x636=((1.0)*cj13);
IkReal x637=((1.0)*cj12);
IkReal x638=x89;
IkReal x639=x88;
IkReal x640=x90;
IkReal x641=(sj13*x639);
IkReal x642=(((cj13*x639))+((r02*sj13)));
IkReal x643=((((-1.0)*r12*x636))+((sj13*x638)));
IkReal x644=(((r12*sj13))+((cj13*x638)));
IkReal x645=(((sj13*x640))+(((-1.0)*r22*x636)));
IkReal x646=(((r22*sj13))+((cj13*x640)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r10=(((sj12*x643))+(((-1.0)*x637*x644)));
new_r02=((((-1.0)*r00*x634))+((r01*sj14)));
new_r00=(((sj12*((x641+(((-1.0)*cj13*r02))))))+(((-1.0)*x637*x642)));
new_r01=(((sj12*x642))+((cj12*(((((-1.0)*r02*x636))+x641)))));
new_r11=(((cj12*x643))+((sj12*x644)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x634)));
new_r20=(((sj12*x645))+(((-1.0)*x637*x646)));
new_r21=(((sj12*x646))+((cj12*x645)));
new_r22=((((-1.0)*r20*x634))+((r21*sj14)));
j9eval[0]=((IKabs(cj11))+(IKabs(sj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(new_r00,-1);
if(!x649.valid){
continue;
}
IkReal x647=x649.value;
IkReal x648=((1.0)*sj11);
CheckValue<IkReal> x650=IKPowWithIntegerCheck(new_r01,-1);
if(!x650.valid){
continue;
}
if( IKabs((sj11*x647)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x647*(x650.value)*(((((-1.0)*new_r00*x648))+(((-1.0)*new_r11*x648)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj11*x647))+IKsqr((x647*(x650.value)*(((((-1.0)*new_r00*x648))+(((-1.0)*new_r11*x648))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((sj11*x647), (x647*(x650.value)*(((((-1.0)*new_r00*x648))+(((-1.0)*new_r11*x648))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x651=IKsin(j9);
IkReal x652=IKcos(j9);
IkReal x653=(sj11*x652);
IkReal x654=((1.0)*x651);
IkReal x655=(cj11*x652);
IkReal x656=(cj11*x654);
evalcond[0]=(new_r12*x652);
evalcond[1]=(new_r12*x651);
evalcond[2]=((((-1.0)*new_r00*x654))+sj11);
evalcond[3]=(((new_r00*x652))+(((-1.0)*cj11)));
evalcond[4]=(((new_r01*x652))+sj11+((new_r11*x651)));
evalcond[5]=(x655+((sj11*x651))+new_r11);
evalcond[6]=(x653+(((-1.0)*x656)));
evalcond[7]=((((-1.0)*new_r01*x654))+cj11+((new_r11*x652)));
evalcond[8]=(x653+(((-1.0)*x656))+new_r01);
evalcond[9]=((((-1.0)*x655))+new_r00+(((-1.0)*sj11*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x657 = IKatan2WithCheck(IkReal(sj11),cj11,IKFAST_ATAN2_MAGTHRESH);
if(!x657.valid){
continue;
}
CheckValue<IkReal> x658=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x658.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x657.value)+(((1.5707963267949)*(x658.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x659=IKsin(j9);
IkReal x660=IKcos(j9);
IkReal x661=(sj11*x660);
IkReal x662=((1.0)*x659);
IkReal x663=(cj11*x660);
IkReal x664=(cj11*x662);
evalcond[0]=(new_r12*x660);
evalcond[1]=(new_r12*x659);
evalcond[2]=((((-1.0)*new_r00*x662))+sj11);
evalcond[3]=((((-1.0)*cj11))+((new_r00*x660)));
evalcond[4]=(((new_r11*x659))+sj11+((new_r01*x660)));
evalcond[5]=(((sj11*x659))+x663+new_r11);
evalcond[6]=(x661+(((-1.0)*x664)));
evalcond[7]=(((new_r11*x660))+(((-1.0)*new_r01*x662))+cj11);
evalcond[8]=(x661+(((-1.0)*x664))+new_r01);
evalcond[9]=((((-1.0)*x663))+new_r00+(((-1.0)*sj11*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[2];
IkReal x665=((1.0)*cj14);
IkReal x666=((1.0)*cj12);
IkReal x667=((1.0)*sj14);
IkReal x668=((1.0)*cj13);
IkReal x669=x90;
IkReal x670=x88;
IkReal x671=x89;
IkReal x672=(sj13*x670);
IkReal x673=((((-1.0)*r22*x668))+((sj13*x669)));
IkReal x674=(((cj13*x669))+((r22*sj13)));
IkReal x675=(((r02*sj13))+((cj13*x670)));
IkReal x676=(((sj13*x671))+(((-1.0)*r12*x668)));
IkReal x677=(((r12*sj13))+((cj13*x671)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
new_r02=((((-1.0)*r00*x665))+((r01*sj14)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x665)));
new_r20=((((-1.0)*x666*x674))+((sj12*x673)));
new_r21=(((sj12*x674))+((cj12*x673)));
new_r01=(((sj12*x675))+((cj12*(((((-1.0)*r02*x668))+x672)))));
new_r11=(((cj12*x676))+((sj12*x677)));
new_r00=((((-1.0)*x666*x675))+((sj12*(((((-1.0)*cj13*r02))+x672)))));
new_r10=(((sj12*x676))+(((-1.0)*x666*x677)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x665)));
j9eval[0]=1.0;
j9eval[1]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x678=((1.0)*new_r00);
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(((((-1.0)*(cj11*cj11)))+(new_r00*new_r00))),((((-1.0)*new_r10*x678))+((cj11*sj11))),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(IKsign((((cj11*new_r10))+(((-1.0)*sj11*x678)))),-1);
if(!x680.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x679.value)+(((1.5707963267949)*(x680.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x681=IKsin(j9);
IkReal x682=IKcos(j9);
IkReal x683=((1.0)*new_r10);
IkReal x684=(new_r00*x682);
IkReal x685=(new_r10*x681);
IkReal x686=(sj11*x682);
IkReal x687=((1.0)*x681);
IkReal x688=(cj11*x682);
IkReal x689=(cj11*x687);
IkReal x690=(x685+x684);
evalcond[0]=(x690+cj11);
evalcond[1]=(new_r00+((sj11*x681))+x688);
evalcond[2]=(((new_r10*x682))+(((-1.0)*new_r00*x687))+sj11);
evalcond[3]=((((-1.0)*x682*x683))+sj11+((new_r00*x681)));
evalcond[4]=((((-1.0)*x689))+x686+new_r10);
evalcond[5]=(x690+(((-1.0)*cj11)));
evalcond[6]=((((-1.0)*sj11*x687))+new_r00+(((-1.0)*x688)));
evalcond[7]=((((-1.0)*x683))+(((-1.0)*x689))+x686);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x691=((1.0)*cj11);
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal((((new_r00*sj11))+(((-1.0)*new_r10*x691)))),((((-1.0)*new_r10*sj11))+(((-1.0)*new_r00*x691))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign(((new_r00*new_r00)+(new_r10*new_r10))),-1);
if(!x693.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x692.value)+(((1.5707963267949)*(x693.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x694=IKsin(j9);
IkReal x695=IKcos(j9);
IkReal x696=((1.0)*new_r10);
IkReal x697=(new_r00*x695);
IkReal x698=(new_r10*x694);
IkReal x699=(sj11*x695);
IkReal x700=((1.0)*x694);
IkReal x701=(cj11*x695);
IkReal x702=(cj11*x700);
IkReal x703=(x697+x698);
evalcond[0]=(cj11+x703);
evalcond[1]=(((sj11*x694))+new_r00+x701);
evalcond[2]=(((new_r10*x695))+sj11+(((-1.0)*new_r00*x700)));
evalcond[3]=((((-1.0)*x695*x696))+((new_r00*x694))+sj11);
evalcond[4]=(x699+(((-1.0)*x702))+new_r10);
evalcond[5]=((((-1.0)*cj11))+x703);
evalcond[6]=((((-1.0)*x701))+(((-1.0)*sj11*x700))+new_r00);
evalcond[7]=(x699+(((-1.0)*x702))+(((-1.0)*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x704=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r02*new_r11))+((new_r01*new_r12)))),-1);
if(!x704.valid){
continue;
}
CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal((new_r02*sj11)),((-1.0)*new_r12*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x705.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x704.value)))+(x705.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x706=IKcos(j9);
IkReal x707=IKsin(j9);
IkReal x708=(sj11*x706);
IkReal x709=((1.0)*x707);
IkReal x710=(cj11*x706);
IkReal x711=(cj11*x709);
evalcond[0]=(((new_r02*x706))+((new_r12*x707)));
evalcond[1]=((((-1.0)*new_r02*x709))+((new_r12*x706)));
evalcond[2]=(((new_r01*x706))+((new_r11*x707))+sj11);
evalcond[3]=(x710+((sj11*x707))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x709))+((new_r10*x706))+sj11);
evalcond[5]=((((-1.0)*new_r01*x709))+cj11+((new_r11*x706)));
evalcond[6]=(new_r01+x708+(((-1.0)*x711)));
evalcond[7]=(x708+(((-1.0)*x711))+new_r10);
evalcond[8]=(((new_r00*x706))+(((-1.0)*cj11))+((new_r10*x707)));
evalcond[9]=(new_r00+(((-1.0)*x710))+(((-1.0)*sj11*x709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal((cj11*new_r02)),((-1.0)*cj11*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713=IKPowWithIntegerCheck(IKsign((((new_r11*new_r12))+((new_r01*new_r02)))),-1);
if(!x713.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x712.value)+(((1.5707963267949)*(x713.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x714=IKcos(j9);
IkReal x715=IKsin(j9);
IkReal x716=(sj11*x714);
IkReal x717=((1.0)*x715);
IkReal x718=(cj11*x714);
IkReal x719=(cj11*x717);
evalcond[0]=(((new_r12*x715))+((new_r02*x714)));
evalcond[1]=((((-1.0)*new_r02*x717))+((new_r12*x714)));
evalcond[2]=(((new_r01*x714))+((new_r11*x715))+sj11);
evalcond[3]=(((sj11*x715))+x718+new_r11);
evalcond[4]=((((-1.0)*new_r00*x717))+((new_r10*x714))+sj11);
evalcond[5]=((((-1.0)*new_r01*x717))+cj11+((new_r11*x714)));
evalcond[6]=((((-1.0)*x719))+new_r01+x716);
evalcond[7]=((((-1.0)*x719))+x716+new_r10);
evalcond[8]=(((new_r00*x714))+(((-1.0)*cj11))+((new_r10*x715)));
evalcond[9]=((((-1.0)*x718))+(((-1.0)*sj11*x717))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal((new_r02*sj11)),((-1.0)*new_r12*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign((((new_r00*new_r02))+((new_r10*new_r12)))),-1);
if(!x721.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x720.value)+(((1.5707963267949)*(x721.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x722=IKcos(j9);
IkReal x723=IKsin(j9);
IkReal x724=(sj11*x722);
IkReal x725=((1.0)*x723);
IkReal x726=(cj11*x722);
IkReal x727=(cj11*x725);
evalcond[0]=(((new_r12*x723))+((new_r02*x722)));
evalcond[1]=(((new_r12*x722))+(((-1.0)*new_r02*x725)));
evalcond[2]=(((new_r11*x723))+((new_r01*x722))+sj11);
evalcond[3]=(x726+new_r11+((sj11*x723)));
evalcond[4]=(((new_r10*x722))+sj11+(((-1.0)*new_r00*x725)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x725))+((new_r11*x722)));
evalcond[6]=((((-1.0)*x727))+x724+new_r01);
evalcond[7]=((((-1.0)*x727))+x724+new_r10);
evalcond[8]=((((-1.0)*cj11))+((new_r10*x723))+((new_r00*x722)));
evalcond[9]=((((-1.0)*x726))+new_r00+(((-1.0)*sj11*x725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x728=((1.0)*cj14);
IkReal x729=((1.0)*sj14);
IkReal x730=((1.0)*cj13);
IkReal x731=((1.0)*cj12);
IkReal x732=x88;
IkReal x733=x89;
IkReal x734=x90;
IkReal x735=(sj13*x732);
IkReal x736=(((r02*sj13))+((cj13*x732)));
IkReal x737=(((sj13*x733))+(((-1.0)*r12*x730)));
IkReal x738=(((r12*sj13))+((cj13*x733)));
IkReal x739=(((sj13*x734))+(((-1.0)*r22*x730)));
IkReal x740=(((cj13*x734))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*((x735+(((-1.0)*cj13*r02))))))+(((-1.0)*x731*x736)));
new_r01=(((sj12*x736))+((cj12*(((((-1.0)*r02*x730))+x735)))));
new_r02=((((-1.0)*r00*x728))+((r01*sj14)));
new_r10=(((sj12*x737))+(((-1.0)*x731*x738)));
new_r11=(((sj12*x738))+((cj12*x737)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x728)));
new_r20=((((-1.0)*x731*x740))+((sj12*x739)));
new_r21=(((sj12*x740))+((cj12*x739)));
new_r22=((((-1.0)*r20*x728))+((r21*sj14)));
IkReal x741=(sj11*sj14);
IkReal x742=((1.0)*cj14*sj11);
j9eval[0]=((IKabs(((((-1.0)*r00*x742))+((r01*x741)))))+(IKabs(((((-1.0)*r10*x742))+((r11*x741))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x743=((1.0)*cj14);
IkReal x744=((1.0)*sj14);
IkReal x745=((1.0)*cj13);
IkReal x746=((1.0)*cj12);
IkReal x747=x88;
IkReal x748=x89;
IkReal x749=x90;
IkReal x750=(sj13*x747);
IkReal x751=(((r02*sj13))+((cj13*x747)));
IkReal x752=(((sj13*x748))+(((-1.0)*r12*x745)));
IkReal x753=(((r12*sj13))+((cj13*x748)));
IkReal x754=((((-1.0)*r22*x745))+((sj13*x749)));
IkReal x755=(((cj13*x749))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*((x750+(((-1.0)*cj13*r02))))))+(((-1.0)*x746*x751)));
new_r01=(((cj12*(((((-1.0)*r02*x745))+x750))))+((sj12*x751)));
new_r02=((((-1.0)*r00*x743))+((r01*sj14)));
new_r10=(((sj12*x752))+(((-1.0)*x746*x753)));
new_r11=(((sj12*x753))+((cj12*x752)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x743)));
new_r20=((((-1.0)*x746*x755))+((sj12*x754)));
new_r21=(((cj12*x754))+((sj12*x755)));
new_r22=((((-1.0)*r20*x743))+((r21*sj14)));
IkReal x756=(cj11*sj14);
IkReal x757=((1.0)*cj11*cj14);
j9eval[0]=((IKabs(((((-1.0)*r10*x757))+((r11*x756)))))+(IKabs((((r01*x756))+(((-1.0)*r00*x757))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x758=((1.0)*cj14);
IkReal x759=((1.0)*sj14);
IkReal x760=((1.0)*cj13);
IkReal x761=((1.0)*cj12);
IkReal x762=x88;
IkReal x763=x89;
IkReal x764=x90;
IkReal x765=(sj13*x762);
IkReal x766=(((cj13*x762))+((r02*sj13)));
IkReal x767=(((sj13*x763))+(((-1.0)*r12*x760)));
IkReal x768=(((r12*sj13))+((cj13*x763)));
IkReal x769=((((-1.0)*r22*x760))+((sj13*x764)));
IkReal x770=(((cj13*x764))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*((x765+(((-1.0)*cj13*r02))))))+(((-1.0)*x761*x766)));
new_r01=(((sj12*x766))+((cj12*((x765+(((-1.0)*r02*x760)))))));
new_r02=(((r01*sj14))+(((-1.0)*r00*x758)));
new_r10=(((sj12*x767))+(((-1.0)*x761*x768)));
new_r11=(((cj12*x767))+((sj12*x768)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x758)));
new_r20=(((sj12*x769))+(((-1.0)*x761*x770)));
new_r21=(((cj12*x769))+((sj12*x770)));
new_r22=((((-1.0)*r20*x758))+((r21*sj14)));
IkReal x771=(cj11*sj14);
IkReal x772=((1.0)*cj11*cj14);
j9eval[0]=((IKabs((((r11*x771))+(((-1.0)*r10*x772)))))+(IKabs((((r01*x771))+(((-1.0)*r00*x772))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x773=IKcos(j9);
IkReal x774=IKsin(j9);
IkReal x775=((1.0)*x774);
evalcond[0]=(x773+new_r10);
evalcond[1]=((((-1.0)*x775))+new_r11);
evalcond[2]=((((-1.0)*x773))+new_r01);
evalcond[3]=((((-1.0)*x775))+new_r00);
evalcond[4]=(((new_r12*x774))+((new_r02*x773)));
evalcond[5]=(((new_r10*x774))+((new_r00*x773)));
evalcond[6]=(((new_r12*x773))+(((-1.0)*new_r02*x775)));
evalcond[7]=((((-1.0)*new_r01*x775))+((new_r11*x773)));
evalcond[8]=((-1.0)+((new_r01*x773))+((new_r11*x774)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x775))+((new_r10*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x776=IKsin(j9);
IkReal x777=IKcos(j9);
IkReal x778=((1.0)*x776);
evalcond[0]=(x776+new_r11);
evalcond[1]=(new_r01+x777);
evalcond[2]=(new_r00+x776);
evalcond[3]=((((-1.0)*x777))+new_r10);
evalcond[4]=(((new_r02*x777))+((new_r12*x776)));
evalcond[5]=(((new_r10*x776))+((new_r00*x777)));
evalcond[6]=(((new_r12*x777))+(((-1.0)*new_r02*x778)));
evalcond[7]=((((-1.0)*new_r01*x778))+((new_r11*x777)));
evalcond[8]=((1.0)+((new_r11*x776))+((new_r01*x777)));
evalcond[9]=((-1.0)+((new_r10*x777))+(((-1.0)*new_r00*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x779=IKcos(j9);
IkReal x780=IKsin(j9);
IkReal x781=((1.0)*x780);
evalcond[0]=(x779+new_r11);
evalcond[1]=(x780+new_r10);
evalcond[2]=(new_r00+x779);
evalcond[3]=((((-1.0)*x781))+new_r01);
evalcond[4]=(((new_r02*x779))+((new_r12*x780)));
evalcond[5]=(((new_r11*x780))+((new_r01*x779)));
evalcond[6]=(((new_r12*x779))+(((-1.0)*new_r02*x781)));
evalcond[7]=((((-1.0)*new_r00*x781))+((new_r10*x779)));
evalcond[8]=((1.0)+((new_r00*x779))+((new_r10*x780)));
evalcond[9]=((1.0)+(((-1.0)*new_r01*x781))+((new_r11*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x782=IKsin(j9);
IkReal x783=IKcos(j9);
IkReal x784=((1.0)*x783);
IkReal x785=((1.0)*x782);
evalcond[0]=(x782+new_r01);
evalcond[1]=((((-1.0)*x784))+new_r11);
evalcond[2]=((((-1.0)*x785))+new_r10);
evalcond[3]=((((-1.0)*x784))+new_r00);
evalcond[4]=(((new_r02*x783))+((new_r12*x782)));
evalcond[5]=(((new_r01*x783))+((new_r11*x782)));
evalcond[6]=((((-1.0)*new_r02*x785))+((new_r12*x783)));
evalcond[7]=((((-1.0)*new_r00*x785))+((new_r10*x783)));
evalcond[8]=((-1.0)+((new_r00*x783))+((new_r10*x782)));
evalcond[9]=((-1.0)+((new_r11*x783))+(((-1.0)*new_r01*x785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*new_r11);
evalcond[3]=new_r01;
evalcond[4]=new_r20;
evalcond[5]=0;
evalcond[6]=sj11;
evalcond[7]=((-1.0)*sj11);
evalcond[8]=cj11;
evalcond[9]=cj11;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x787 = IKatan2WithCheck(IkReal(new_r01),new_r11,IKFAST_ATAN2_MAGTHRESH);
if(!x787.valid){
continue;
}
IkReal x786=x787.value;
j9array[0]=((-1.0)*x786);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x786)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j9))))+(((-1.0)*new_r11*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r12)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x788=((1.0)*cj14);
IkReal x789=((1.0)*sj14);
IkReal x790=((1.0)*cj13);
IkReal x791=((1.0)*cj12);
IkReal x792=x88;
IkReal x793=x89;
IkReal x794=x90;
IkReal x795=(sj13*x792);
IkReal x796=(((r02*sj13))+((cj13*x792)));
IkReal x797=((((-1.0)*r12*x790))+((sj13*x793)));
IkReal x798=(((r12*sj13))+((cj13*x793)));
IkReal x799=(((sj13*x794))+(((-1.0)*r22*x790)));
IkReal x800=(((cj13*x794))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=(((sj12*((x795+(((-1.0)*cj13*r02))))))+(((-1.0)*x791*x796)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x788)));
new_r01=(((cj12*((x795+(((-1.0)*r02*x790))))))+((sj12*x796)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x788)));
new_r10=(((sj12*x797))+(((-1.0)*x791*x798)));
new_r11=(((cj12*x797))+((sj12*x798)));
new_r20=(((sj12*x799))+(((-1.0)*x791*x800)));
new_r21=(((sj12*x800))+((cj12*x799)));
new_r22=(((r21*sj14))+(((-1.0)*r20*x788)));
j9eval[0]=((IKabs(cj11))+(IKabs(sj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x801=((1.0)*cj14);
IkReal x802=((1.0)*sj14);
IkReal x803=((1.0)*cj13);
IkReal x804=((1.0)*cj12);
IkReal x805=x88;
IkReal x806=x89;
IkReal x807=x90;
IkReal x808=(sj13*x805);
IkReal x809=(((r02*sj13))+((cj13*x805)));
IkReal x810=(((sj13*x806))+(((-1.0)*r12*x803)));
IkReal x811=(((r12*sj13))+((cj13*x806)));
IkReal x812=((((-1.0)*r22*x803))+((sj13*x807)));
IkReal x813=(((cj13*x807))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x804*x809))+((sj12*((x808+(((-1.0)*cj13*r02)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x801)));
new_r01=(((cj12*((x808+(((-1.0)*r02*x803))))))+((sj12*x809)));
new_r02=((((-1.0)*r00*x801))+((r01*sj14)));
new_r10=(((sj12*x810))+(((-1.0)*x804*x811)));
new_r11=(((cj12*x810))+((sj12*x811)));
new_r20=((((-1.0)*x804*x813))+((sj12*x812)));
new_r21=(((sj12*x813))+((cj12*x812)));
new_r22=((((-1.0)*r20*x801))+((r21*sj14)));
j9eval[0]=sj11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x814=((1.0)*cj14);
IkReal x815=((1.0)*sj14);
IkReal x816=((1.0)*cj13);
IkReal x817=((1.0)*cj12);
IkReal x818=x88;
IkReal x819=x89;
IkReal x820=x90;
IkReal x821=(sj13*x818);
IkReal x822=(((r02*sj13))+((cj13*x818)));
IkReal x823=(((sj13*x819))+(((-1.0)*r12*x816)));
IkReal x824=(((r12*sj13))+((cj13*x819)));
IkReal x825=((((-1.0)*r22*x816))+((sj13*x820)));
IkReal x826=(((r22*sj13))+((cj13*x820)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r00=((((-1.0)*x817*x822))+((sj12*((x821+(((-1.0)*cj13*r02)))))));
new_r12=(((r11*sj14))+(((-1.0)*r10*x814)));
new_r01=(((sj12*x822))+((cj12*((x821+(((-1.0)*r02*x816)))))));
new_r02=(((r01*sj14))+(((-1.0)*r00*x814)));
new_r10=((((-1.0)*x817*x824))+((sj12*x823)));
new_r11=(((sj12*x824))+((cj12*x823)));
new_r20=(((sj12*x825))+(((-1.0)*x817*x826)));
new_r21=(((cj12*x825))+((sj12*x826)));
new_r22=((((-1.0)*r20*x814))+((r21*sj14)));
j9eval[0]=cj11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x827=IKcos(j9);
IkReal x828=IKsin(j9);
IkReal x829=((1.0)*x828);
IkReal x830=((-1.0)*x828);
evalcond[0]=(new_r02*x827);
evalcond[1]=(new_r10*x828);
evalcond[2]=(x827+new_r10);
evalcond[3]=x830;
evalcond[4]=(new_r02*x830);
evalcond[5]=((1.0)+((new_r10*x827)));
evalcond[6]=(new_r11+(((-1.0)*x829)));
evalcond[7]=(new_r01+(((-1.0)*x827)));
evalcond[8]=(((new_r11*x827))+(((-1.0)*new_r01*x829)));
evalcond[9]=((-1.0)+((new_r01*x827))+((new_r11*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x831=IKsin(j9);
IkReal x832=IKcos(j9);
evalcond[0]=x831;
evalcond[1]=(new_r02*x832);
evalcond[2]=(x831+new_r11);
evalcond[3]=(new_r10*x831);
evalcond[4]=(new_r01+x832);
evalcond[5]=((-1.0)*new_r02*x831);
evalcond[6]=((-1.0)+((new_r10*x832)));
evalcond[7]=((((-1.0)*x832))+new_r10);
evalcond[8]=(((new_r11*x832))+(((-1.0)*new_r01*x831)));
evalcond[9]=((1.0)+((new_r11*x831))+((new_r01*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x833=IKcos(j9);
IkReal x834=IKsin(j9);
IkReal x835=((1.0)*x834);
evalcond[0]=x833;
evalcond[1]=(new_r02*x833);
evalcond[2]=(new_r10*x833);
evalcond[3]=(x833+new_r11);
evalcond[4]=(x834+new_r10);
evalcond[5]=((-1.0)*new_r02*x834);
evalcond[6]=((1.0)+((new_r10*x834)));
evalcond[7]=((((-1.0)*x835))+new_r01);
evalcond[8]=(((new_r01*x833))+((new_r11*x834)));
evalcond[9]=((1.0)+((new_r11*x833))+(((-1.0)*new_r01*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=0;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x836=IKcos(j9);
IkReal x837=IKsin(j9);
IkReal x838=((1.0)*x837);
evalcond[0]=(new_r02*x836);
evalcond[1]=(new_r10*x836);
evalcond[2]=(new_r01+x837);
evalcond[3]=((-1.0)*x836);
evalcond[4]=((-1.0)*new_r02*x837);
evalcond[5]=((((-1.0)*x836))+new_r11);
evalcond[6]=((-1.0)+((new_r10*x837)));
evalcond[7]=((((-1.0)*x838))+new_r10);
evalcond[8]=(((new_r11*x837))+((new_r01*x836)));
evalcond[9]=((-1.0)+((new_r11*x836))+(((-1.0)*new_r01*x838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x840=IKPowWithIntegerCheck(new_r10,-1);
if(!x840.valid){
continue;
}
IkReal x839=x840.value;
CheckValue<IkReal> x841=IKPowWithIntegerCheck(cj11,-1);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(x839,-2);
if(!x842.valid){
continue;
}
if( IKabs((x839*(x841.value)*(((1.0)+(((-1.0)*(cj11*cj11)))+(((-1.0)*(x842.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj11*x839)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x839*(x841.value)*(((1.0)+(((-1.0)*(cj11*cj11)))+(((-1.0)*(x842.value)))))))+IKsqr(((-1.0)*sj11*x839))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x839*(x841.value)*(((1.0)+(((-1.0)*(cj11*cj11)))+(((-1.0)*(x842.value)))))), ((-1.0)*sj11*x839));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x843=IKcos(j9);
IkReal x844=IKsin(j9);
IkReal x845=((1.0)*sj11);
IkReal x846=(cj11*x843);
IkReal x847=((1.0)*x844);
IkReal x848=(x844*x845);
evalcond[0]=(new_r02*x843);
evalcond[1]=((-1.0)*new_r02*x844);
evalcond[2]=(((new_r10*x843))+sj11);
evalcond[3]=(((new_r10*x844))+cj11);
evalcond[4]=(((cj11*x844))+new_r10+((sj11*x843)));
evalcond[5]=(x846+(((-1.0)*x848)));
evalcond[6]=(cj11+((new_r11*x843))+(((-1.0)*new_r01*x847)));
evalcond[7]=(x846+(((-1.0)*x848))+new_r11);
evalcond[8]=(((new_r11*x844))+((new_r01*x843))+(((-1.0)*x845)));
evalcond[9]=((((-1.0)*cj11*x847))+(((-1.0)*x843*x845))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x850=IKPowWithIntegerCheck(new_r10,-1);
if(!x850.valid){
continue;
}
IkReal x849=x850.value;
CheckValue<IkReal> x851=IKPowWithIntegerCheck(sj11,-1);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852=IKPowWithIntegerCheck(x849,-2);
if(!x852.valid){
continue;
}
if( IKabs(((-1.0)*cj11*x849)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x849*(x851.value)*(((((-1.0)*(x852.value)))+(cj11*cj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj11*x849))+IKsqr((x849*(x851.value)*(((((-1.0)*(x852.value)))+(cj11*cj11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*cj11*x849), (x849*(x851.value)*(((((-1.0)*(x852.value)))+(cj11*cj11)))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x853=IKcos(j9);
IkReal x854=IKsin(j9);
IkReal x855=((1.0)*sj11);
IkReal x856=(cj11*x853);
IkReal x857=((1.0)*x854);
IkReal x858=(x854*x855);
evalcond[0]=(new_r02*x853);
evalcond[1]=((-1.0)*new_r02*x854);
evalcond[2]=(((new_r10*x853))+sj11);
evalcond[3]=(cj11+((new_r10*x854)));
evalcond[4]=(((sj11*x853))+((cj11*x854))+new_r10);
evalcond[5]=(x856+(((-1.0)*x858)));
evalcond[6]=(((new_r11*x853))+(((-1.0)*new_r01*x857))+cj11);
evalcond[7]=(x856+(((-1.0)*x858))+new_r11);
evalcond[8]=(((new_r11*x854))+((new_r01*x853))+(((-1.0)*x855)));
evalcond[9]=((((-1.0)*cj11*x857))+(((-1.0)*x853*x855))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x859 = IKatan2WithCheck(IkReal(((-1.0)*cj11)),((-1.0)*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x859.valid){
continue;
}
CheckValue<IkReal> x860=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x860.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x859.value)+(((1.5707963267949)*(x860.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x861=IKcos(j9);
IkReal x862=IKsin(j9);
IkReal x863=((1.0)*sj11);
IkReal x864=(cj11*x861);
IkReal x865=((1.0)*x862);
IkReal x866=(x862*x863);
evalcond[0]=(new_r02*x861);
evalcond[1]=((-1.0)*new_r02*x862);
evalcond[2]=(((new_r10*x861))+sj11);
evalcond[3]=(((new_r10*x862))+cj11);
evalcond[4]=(((cj11*x862))+new_r10+((sj11*x861)));
evalcond[5]=(x864+(((-1.0)*x866)));
evalcond[6]=(cj11+((new_r11*x861))+(((-1.0)*new_r01*x865)));
evalcond[7]=(x864+new_r11+(((-1.0)*x866)));
evalcond[8]=(((new_r01*x861))+((new_r11*x862))+(((-1.0)*x863)));
evalcond[9]=((((-1.0)*cj11*x865))+new_r01+(((-1.0)*x861*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r02)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=0;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x867=((1.0)*cj14);
IkReal x868=((1.0)*sj14);
IkReal x869=((1.0)*cj13);
IkReal x870=((1.0)*cj12);
IkReal x871=x89;
IkReal x872=x88;
IkReal x873=x90;
IkReal x874=(sj13*x872);
IkReal x875=(((cj13*x872))+((r02*sj13)));
IkReal x876=((((-1.0)*r12*x869))+((sj13*x871)));
IkReal x877=(((r12*sj13))+((cj13*x871)));
IkReal x878=(((sj13*x873))+(((-1.0)*r22*x869)));
IkReal x879=(((cj13*x873))+((r22*sj13)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r10=(((sj12*x876))+(((-1.0)*x870*x877)));
new_r02=(((r01*sj14))+(((-1.0)*r00*x867)));
new_r00=(((sj12*(((((-1.0)*cj13*r02))+x874))))+(((-1.0)*x870*x875)));
new_r01=(((cj12*(((((-1.0)*r02*x869))+x874))))+((sj12*x875)));
new_r11=(((sj12*x877))+((cj12*x876)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x867)));
new_r20=(((sj12*x878))+(((-1.0)*x870*x879)));
new_r21=(((sj12*x879))+((cj12*x878)));
new_r22=((((-1.0)*r20*x867))+((r21*sj14)));
j9eval[0]=((IKabs(cj11))+(IKabs(sj11)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x881=IKPowWithIntegerCheck(new_r00,-1);
if(!x881.valid){
continue;
}
IkReal x880=x881.value;
CheckValue<IkReal> x882=IKPowWithIntegerCheck(new_r01,-1);
if(!x882.valid){
continue;
}
if( IKabs((x880*(x882.value)*(((((-1.0)*cj11*new_r11))+((cj11*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj11*x880)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x880*(x882.value)*(((((-1.0)*cj11*new_r11))+((cj11*new_r00))))))+IKsqr(((-1.0)*cj11*x880))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x880*(x882.value)*(((((-1.0)*cj11*new_r11))+((cj11*new_r00))))), ((-1.0)*cj11*x880));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x883=IKcos(j9);
IkReal x884=IKsin(j9);
IkReal x885=((1.0)*sj11);
IkReal x886=(cj11*x883);
IkReal x887=((1.0)*x884);
IkReal x888=(x884*x885);
evalcond[0]=(new_r12*x883);
evalcond[1]=(new_r12*x884);
evalcond[2]=(cj11+((new_r00*x883)));
evalcond[3]=(sj11+(((-1.0)*new_r00*x887)));
evalcond[4]=(((cj11*x884))+((sj11*x883)));
evalcond[5]=(cj11+((new_r11*x883))+(((-1.0)*new_r01*x887)));
evalcond[6]=(x886+(((-1.0)*x888))+new_r11);
evalcond[7]=(x886+(((-1.0)*x888))+new_r00);
evalcond[8]=(((new_r11*x884))+(((-1.0)*x885))+((new_r01*x883)));
evalcond[9]=((((-1.0)*cj11*x887))+(((-1.0)*x883*x885))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(sj11),((-1.0)*cj11),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x890.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x889.value)+(((1.5707963267949)*(x890.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x891=IKcos(j9);
IkReal x892=IKsin(j9);
IkReal x893=((1.0)*sj11);
IkReal x894=(cj11*x891);
IkReal x895=((1.0)*x892);
IkReal x896=(x892*x893);
evalcond[0]=(new_r12*x891);
evalcond[1]=(new_r12*x892);
evalcond[2]=(((new_r00*x891))+cj11);
evalcond[3]=((((-1.0)*new_r00*x895))+sj11);
evalcond[4]=(((cj11*x892))+((sj11*x891)));
evalcond[5]=(((new_r11*x891))+cj11+(((-1.0)*new_r01*x895)));
evalcond[6]=(x894+(((-1.0)*x896))+new_r11);
evalcond[7]=(new_r00+x894+(((-1.0)*x896)));
evalcond[8]=(((new_r01*x891))+(((-1.0)*x893))+((new_r11*x892)));
evalcond[9]=((((-1.0)*cj11*x895))+new_r01+(((-1.0)*x891*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[2];
IkReal x897=((1.0)*cj14);
IkReal x898=((1.0)*cj12);
IkReal x899=((1.0)*sj14);
IkReal x900=((1.0)*cj13);
IkReal x901=x90;
IkReal x902=x88;
IkReal x903=x89;
IkReal x904=(sj13*x902);
IkReal x905=((((-1.0)*r22*x900))+((sj13*x901)));
IkReal x906=(((cj13*x901))+((r22*sj13)));
IkReal x907=(((r02*sj13))+((cj13*x902)));
IkReal x908=(((sj13*x903))+(((-1.0)*r12*x900)));
IkReal x909=(((r12*sj13))+((cj13*x903)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
new_r02=((((-1.0)*r00*x897))+((r01*sj14)));
new_r12=(((r11*sj14))+(((-1.0)*r10*x897)));
new_r20=(((sj12*x905))+(((-1.0)*x898*x906)));
new_r21=(((sj12*x906))+((cj12*x905)));
new_r01=(((cj12*(((((-1.0)*r02*x900))+x904))))+((sj12*x907)));
new_r11=(((cj12*x908))+((sj12*x909)));
new_r00=(((sj12*((x904+(((-1.0)*cj13*r02))))))+(((-1.0)*x898*x907)));
new_r10=(((sj12*x908))+(((-1.0)*x898*x909)));
new_r22=((((-1.0)*r20*x897))+((r21*sj14)));
j9eval[0]=1.0;
j9eval[1]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(IKsign((((cj11*new_r10))+((new_r00*sj11)))),-1);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal(((((-1.0)*(cj11*cj11)))+(new_r00*new_r00))),((((-1.0)*new_r00*new_r10))+(((-1.0)*cj11*sj11))),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x910.value)))+(x911.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x912=IKcos(j9);
IkReal x913=IKsin(j9);
IkReal x914=((1.0)*x913);
evalcond[0]=(((new_r00*x912))+cj11+((new_r10*x913)));
evalcond[1]=((((-1.0)*new_r00*x914))+sj11+((new_r10*x912)));
evalcond[2]=((((-1.0)*sj11*x914))+((cj11*x912))+new_r00);
evalcond[3]=((((-1.0)*cj11*x914))+(((-1.0)*new_r10))+(((-1.0)*sj11*x912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x915=((1.0)*cj11);
CheckValue<IkReal> x916=IKPowWithIntegerCheck(IKsign(((new_r00*new_r00)+(new_r10*new_r10))),-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal((((new_r00*sj11))+(((-1.0)*new_r10*x915)))),((((-1.0)*new_r10*sj11))+(((-1.0)*new_r00*x915))),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x916.value)))+(x917.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x918=IKcos(j9);
IkReal x919=IKsin(j9);
IkReal x920=((1.0)*x919);
evalcond[0]=(((new_r10*x919))+cj11+((new_r00*x918)));
evalcond[1]=((((-1.0)*new_r00*x920))+sj11+((new_r10*x918)));
evalcond[2]=(((cj11*x918))+new_r00+(((-1.0)*sj11*x920)));
evalcond[3]=((((-1.0)*sj11*x918))+(((-1.0)*cj11*x920))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x921 = IKatan2WithCheck(IkReal((cj11*new_r02)),((-1.0)*cj11*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
CheckValue<IkReal> x922=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x922.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x921.value)+(((1.5707963267949)*(x922.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x923=IKcos(j9);
IkReal x924=IKsin(j9);
IkReal x925=((1.0)*sj11);
IkReal x926=(cj11*x923);
IkReal x927=((1.0)*x924);
IkReal x928=(x924*x925);
evalcond[0]=(((new_r12*x924))+((new_r02*x923)));
evalcond[1]=((((-1.0)*new_r02*x927))+((new_r12*x923)));
evalcond[2]=(cj11+((new_r00*x923))+((new_r10*x924)));
evalcond[3]=(((cj11*x924))+new_r10+((sj11*x923)));
evalcond[4]=(((new_r10*x923))+(((-1.0)*new_r00*x927))+sj11);
evalcond[5]=(cj11+(((-1.0)*new_r01*x927))+((new_r11*x923)));
evalcond[6]=(x926+(((-1.0)*x928))+new_r11);
evalcond[7]=(x926+(((-1.0)*x928))+new_r00);
evalcond[8]=(((new_r11*x924))+(((-1.0)*x925))+((new_r01*x923)));
evalcond[9]=((((-1.0)*cj11*x927))+(((-1.0)*x923*x925))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x929 = IKatan2WithCheck(IkReal((cj11*new_r02)),((-1.0)*cj11*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x929.valid){
continue;
}
CheckValue<IkReal> x930=IKPowWithIntegerCheck(IKsign((((new_r11*new_r12))+((new_r01*new_r02)))),-1);
if(!x930.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x929.value)+(((1.5707963267949)*(x930.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x931=IKcos(j9);
IkReal x932=IKsin(j9);
IkReal x933=((1.0)*sj11);
IkReal x934=(cj11*x931);
IkReal x935=((1.0)*x932);
IkReal x936=(x932*x933);
evalcond[0]=(((new_r02*x931))+((new_r12*x932)));
evalcond[1]=((((-1.0)*new_r02*x935))+((new_r12*x931)));
evalcond[2]=(cj11+((new_r10*x932))+((new_r00*x931)));
evalcond[3]=(((cj11*x932))+((sj11*x931))+new_r10);
evalcond[4]=(((new_r10*x931))+sj11+(((-1.0)*new_r00*x935)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x935))+((new_r11*x931)));
evalcond[6]=(x934+(((-1.0)*x936))+new_r11);
evalcond[7]=(x934+new_r00+(((-1.0)*x936)));
evalcond[8]=((((-1.0)*x933))+((new_r01*x931))+((new_r11*x932)));
evalcond[9]=((((-1.0)*x931*x933))+new_r01+(((-1.0)*cj11*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal((new_r02*sj11)),((-1.0)*new_r12*sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
CheckValue<IkReal> x938=IKPowWithIntegerCheck(IKsign((((new_r00*new_r02))+((new_r10*new_r12)))),-1);
if(!x938.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x937.value)+(((1.5707963267949)*(x938.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x939=IKcos(j9);
IkReal x940=IKsin(j9);
IkReal x941=((1.0)*sj11);
IkReal x942=(cj11*x939);
IkReal x943=((1.0)*x940);
IkReal x944=(x940*x941);
evalcond[0]=(((new_r02*x939))+((new_r12*x940)));
evalcond[1]=(((new_r12*x939))+(((-1.0)*new_r02*x943)));
evalcond[2]=(((new_r10*x940))+((new_r00*x939))+cj11);
evalcond[3]=(((cj11*x940))+((sj11*x939))+new_r10);
evalcond[4]=((((-1.0)*new_r00*x943))+((new_r10*x939))+sj11);
evalcond[5]=((((-1.0)*new_r01*x943))+cj11+((new_r11*x939)));
evalcond[6]=(x942+(((-1.0)*x944))+new_r11);
evalcond[7]=(x942+(((-1.0)*x944))+new_r00);
evalcond[8]=((((-1.0)*x941))+((new_r01*x939))+((new_r11*x940)));
evalcond[9]=((((-1.0)*cj11*x943))+(((-1.0)*x939*x941))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x946=IKPowWithIntegerCheck(cj10,-1);
if(!x946.valid){
continue;
}
IkReal x945=x946.value;
CheckValue<IkReal> x947=IKPowWithIntegerCheck(new_r12,-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948=IKPowWithIntegerCheck(x945,-2);
if(!x948.valid){
continue;
}
if( IKabs((x945*(x947.value)*(((((-1.0)*(x948.value)))+(new_r02*new_r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x945)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x945*(x947.value)*(((((-1.0)*(x948.value)))+(new_r02*new_r02)))))+IKsqr(((-1.0)*new_r02*x945))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x945*(x947.value)*(((((-1.0)*(x948.value)))+(new_r02*new_r02)))), ((-1.0)*new_r02*x945));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x949=IKcos(j9);
IkReal x950=IKsin(j9);
IkReal x951=((1.0)*sj10);
IkReal x952=(sj10*sj11);
IkReal x953=(new_r12*x950);
IkReal x954=(cj10*x949);
IkReal x955=(new_r10*x950);
IkReal x956=(new_r02*x949);
IkReal x957=(cj11*x949);
IkReal x958=(new_r01*x949);
IkReal x959=((1.0)*x950);
IkReal x960=(new_r11*x950);
IkReal x961=(new_r00*x949);
evalcond[0]=(x954+new_r02);
evalcond[1]=(((cj10*x950))+new_r12);
evalcond[2]=(((new_r12*x949))+(((-1.0)*new_r02*x959)));
evalcond[3]=(cj10+x956+x953);
evalcond[4]=((((-1.0)*new_r00*x959))+sj11+((new_r10*x949)));
evalcond[5]=(cj11+(((-1.0)*new_r01*x959))+((new_r11*x949)));
evalcond[6]=(x957+((x950*x952))+new_r11);
evalcond[7]=(x958+x952+x960);
evalcond[8]=((((-1.0)*cj11*x959))+((x949*x952))+new_r01);
evalcond[9]=(((sj11*x949))+(((-1.0)*cj11*x950*x951))+new_r10);
evalcond[10]=(x955+(((-1.0)*cj11*x951))+x961);
evalcond[11]=((((-1.0)*x951*x957))+(((-1.0)*sj11*x959))+new_r00);
evalcond[12]=(((new_r20*sj10))+((cj10*x955))+((new_r00*x954)));
evalcond[13]=(((new_r21*sj10))+((cj10*x960))+((new_r01*x954)));
evalcond[14]=((1.0)+((new_r22*sj10))+((new_r02*x954))+((cj10*x953)));
evalcond[15]=((((-1.0)*x951*x956))+((cj10*new_r22))+(((-1.0)*x951*x953)));
evalcond[16]=((((-1.0)*x951*x955))+(((-1.0)*x951*x961))+cj11+((cj10*new_r20)));
evalcond[17]=((((-1.0)*x951*x958))+(((-1.0)*sj11))+((cj10*new_r21))+(((-1.0)*x951*x960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x962=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x962.valid){
continue;
}
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x962.value)))+(x963.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x964=IKcos(j9);
IkReal x965=IKsin(j9);
IkReal x966=((1.0)*sj10);
IkReal x967=(sj10*sj11);
IkReal x968=(new_r12*x965);
IkReal x969=(cj10*x964);
IkReal x970=(new_r10*x965);
IkReal x971=(new_r02*x964);
IkReal x972=(cj11*x964);
IkReal x973=(new_r01*x964);
IkReal x974=((1.0)*x965);
IkReal x975=(new_r11*x965);
IkReal x976=(new_r00*x964);
evalcond[0]=(new_r02+x969);
evalcond[1]=(((cj10*x965))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x974))+((new_r12*x964)));
evalcond[3]=(x971+cj10+x968);
evalcond[4]=(((new_r10*x964))+(((-1.0)*new_r00*x974))+sj11);
evalcond[5]=(cj11+((new_r11*x964))+(((-1.0)*new_r01*x974)));
evalcond[6]=(((x965*x967))+x972+new_r11);
evalcond[7]=(x973+x975+x967);
evalcond[8]=((((-1.0)*cj11*x974))+((x964*x967))+new_r01);
evalcond[9]=(((sj11*x964))+(((-1.0)*cj11*x965*x966))+new_r10);
evalcond[10]=(x970+x976+(((-1.0)*cj11*x966)));
evalcond[11]=((((-1.0)*sj11*x974))+(((-1.0)*x966*x972))+new_r00);
evalcond[12]=(((new_r20*sj10))+((cj10*x970))+((new_r00*x969)));
evalcond[13]=(((new_r21*sj10))+((cj10*x975))+((new_r01*x969)));
evalcond[14]=((1.0)+((new_r22*sj10))+((new_r02*x969))+((cj10*x968)));
evalcond[15]=((((-1.0)*x966*x968))+((cj10*new_r22))+(((-1.0)*x966*x971)));
evalcond[16]=((((-1.0)*x966*x970))+cj11+((cj10*new_r20))+(((-1.0)*x966*x976)));
evalcond[17]=((((-1.0)*sj11))+((cj10*new_r21))+(((-1.0)*x966*x975))+(((-1.0)*x966*x973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j13;
vinfos[4].indices[0] = _ij13[0];
vinfos[4].indices[1] = _ij13[1];
vinfos[4].maxsolutions = _nj13;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j14;
vinfos[5].indices[0] = _ij14[0];
vinfos[5].indices[1] = _ij14[1];
vinfos[5].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - awesome-o (fa934f769f6b23be90dcbbab97a6a243)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0.9"/*0x10000048"*/; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
